{"ast":null,"code":"const {\n  KafkaJSPartialMessageError,\n  KafkaJSUnsupportedMagicByteInMessageSet\n} = require('../../errors');\nconst V0Decoder = require('./v0/decoder');\nconst V1Decoder = require('./v1/decoder');\nconst decodeMessage = (decoder, magicByte) => {\n  switch (magicByte) {\n    case 0:\n      return V0Decoder(decoder);\n    case 1:\n      return V1Decoder(decoder);\n    default:\n      throw new KafkaJSUnsupportedMagicByteInMessageSet(`Unsupported MessageSet message version, magic byte: ${magicByte}`);\n  }\n};\nmodule.exports = (offset, size, decoder) => {\n  // Don't decrement decoder.offset because slice is already considering the current\n  // offset of the decoder\n  const remainingBytes = Buffer.byteLength(decoder.slice(size).buffer);\n  if (remainingBytes < size) {\n    throw new KafkaJSPartialMessageError(`Tried to decode a partial message: remainingBytes(${remainingBytes}) < messageSize(${size})`);\n  }\n  const crc = decoder.readInt32();\n  const magicByte = decoder.readInt8();\n  const message = decodeMessage(decoder, magicByte);\n  return Object.assign({\n    offset,\n    size,\n    crc,\n    magicByte\n  }, message);\n};","map":{"version":3,"names":["KafkaJSPartialMessageError","KafkaJSUnsupportedMagicByteInMessageSet","require","V0Decoder","V1Decoder","decodeMessage","decoder","magicByte","module","exports","offset","size","remainingBytes","Buffer","byteLength","slice","buffer","crc","readInt32","readInt8","message","Object","assign"],"sources":["C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/kafkajs/src/protocol/message/decoder.js"],"sourcesContent":["const {\n  KafkaJSPartialMessageError,\n  KafkaJSUnsupportedMagicByteInMessageSet,\n} = require('../../errors')\n\nconst V0Decoder = require('./v0/decoder')\nconst V1Decoder = require('./v1/decoder')\n\nconst decodeMessage = (decoder, magicByte) => {\n  switch (magicByte) {\n    case 0:\n      return V0Decoder(decoder)\n    case 1:\n      return V1Decoder(decoder)\n    default:\n      throw new KafkaJSUnsupportedMagicByteInMessageSet(\n        `Unsupported MessageSet message version, magic byte: ${magicByte}`\n      )\n  }\n}\n\nmodule.exports = (offset, size, decoder) => {\n  // Don't decrement decoder.offset because slice is already considering the current\n  // offset of the decoder\n  const remainingBytes = Buffer.byteLength(decoder.slice(size).buffer)\n\n  if (remainingBytes < size) {\n    throw new KafkaJSPartialMessageError(\n      `Tried to decode a partial message: remainingBytes(${remainingBytes}) < messageSize(${size})`\n    )\n  }\n\n  const crc = decoder.readInt32()\n  const magicByte = decoder.readInt8()\n  const message = decodeMessage(decoder, magicByte)\n  return Object.assign({ offset, size, crc, magicByte }, message)\n}\n"],"mappings":"AAAA,MAAM;EACJA,0BAA0B;EAC1BC;AACF,CAAC,GAAGC,OAAO,CAAC,cAAc,CAAC;AAE3B,MAAMC,SAAS,GAAGD,OAAO,CAAC,cAAc,CAAC;AACzC,MAAME,SAAS,GAAGF,OAAO,CAAC,cAAc,CAAC;AAEzC,MAAMG,aAAa,GAAG,CAACC,OAAO,EAAEC,SAAS,KAAK;EAC5C,QAAQA,SAAS;IACf,KAAK,CAAC;MACJ,OAAOJ,SAAS,CAACG,OAAO,CAAC;IAC3B,KAAK,CAAC;MACJ,OAAOF,SAAS,CAACE,OAAO,CAAC;IAC3B;MACE,MAAM,IAAIL,uCAAuC,CAC9C,uDAAsDM,SAAU,EAAC,CACnE;EAAA;AAEP,CAAC;AAEDC,MAAM,CAACC,OAAO,GAAG,CAACC,MAAM,EAAEC,IAAI,EAAEL,OAAO,KAAK;EAC1C;EACA;EACA,MAAMM,cAAc,GAAGC,MAAM,CAACC,UAAU,CAACR,OAAO,CAACS,KAAK,CAACJ,IAAI,CAAC,CAACK,MAAM,CAAC;EAEpE,IAAIJ,cAAc,GAAGD,IAAI,EAAE;IACzB,MAAM,IAAIX,0BAA0B,CACjC,qDAAoDY,cAAe,mBAAkBD,IAAK,GAAE,CAC9F;EACH;EAEA,MAAMM,GAAG,GAAGX,OAAO,CAACY,SAAS,EAAE;EAC/B,MAAMX,SAAS,GAAGD,OAAO,CAACa,QAAQ,EAAE;EACpC,MAAMC,OAAO,GAAGf,aAAa,CAACC,OAAO,EAAEC,SAAS,CAAC;EACjD,OAAOc,MAAM,CAACC,MAAM,CAAC;IAAEZ,MAAM;IAAEC,IAAI;IAAEM,GAAG;IAAEV;EAAU,CAAC,EAAEa,OAAO,CAAC;AACjE,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}