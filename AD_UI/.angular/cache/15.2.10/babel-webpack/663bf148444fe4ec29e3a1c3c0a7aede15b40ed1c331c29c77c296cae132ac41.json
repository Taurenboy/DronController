{"ast":null,"code":"var _asyncToGenerator = require(\"C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n/**\n * The sasl object must include a property named oauthBearerProvider, an\n * async function that is used to return the OAuth bearer token.\n *\n * The OAuth bearer token must be an object with properties value and\n * (optionally) extensions, that will be sent during the SASL/OAUTHBEARER\n * request.\n *\n * The implementation of the oauthBearerProvider must take care that tokens are\n * reused and refreshed when appropriate.\n */\n\nconst {\n  request\n} = require('../../protocol/sasl/oauthBearer');\nconst {\n  KafkaJSSASLAuthenticationError\n} = require('../../errors');\nconst oauthBearerAuthenticatorProvider = sasl => ({\n  host,\n  port,\n  logger,\n  saslAuthenticate\n}) => {\n  return {\n    authenticate: function () {\n      var _ref = _asyncToGenerator(function* () {\n        const {\n          oauthBearerProvider\n        } = sasl;\n        if (oauthBearerProvider == null) {\n          throw new KafkaJSSASLAuthenticationError('SASL OAUTHBEARER: Missing OAuth bearer token provider');\n        }\n        const oauthBearerToken = yield oauthBearerProvider();\n        if (oauthBearerToken.value == null) {\n          throw new KafkaJSSASLAuthenticationError('SASL OAUTHBEARER: Invalid OAuth bearer token');\n        }\n        const broker = `${host}:${port}`;\n        try {\n          logger.debug('Authenticate with SASL OAUTHBEARER', {\n            broker\n          });\n          yield saslAuthenticate({\n            request: yield request(sasl, oauthBearerToken)\n          });\n          logger.debug('SASL OAUTHBEARER authentication successful', {\n            broker\n          });\n        } catch (e) {\n          const error = new KafkaJSSASLAuthenticationError(`SASL OAUTHBEARER authentication failed: ${e.message}`);\n          logger.error(error.message, {\n            broker\n          });\n          throw error;\n        }\n      });\n      return function authenticate() {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  };\n};\nmodule.exports = oauthBearerAuthenticatorProvider;","map":{"version":3,"names":["request","require","KafkaJSSASLAuthenticationError","oauthBearerAuthenticatorProvider","sasl","host","port","logger","saslAuthenticate","authenticate","oauthBearerProvider","oauthBearerToken","value","broker","debug","e","error","message","module","exports"],"sources":["C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/kafkajs/src/broker/saslAuthenticator/oauthBearer.js"],"sourcesContent":["/**\n * The sasl object must include a property named oauthBearerProvider, an\n * async function that is used to return the OAuth bearer token.\n *\n * The OAuth bearer token must be an object with properties value and\n * (optionally) extensions, that will be sent during the SASL/OAUTHBEARER\n * request.\n *\n * The implementation of the oauthBearerProvider must take care that tokens are\n * reused and refreshed when appropriate.\n */\n\nconst { request } = require('../../protocol/sasl/oauthBearer')\nconst { KafkaJSSASLAuthenticationError } = require('../../errors')\n\nconst oauthBearerAuthenticatorProvider = sasl => ({ host, port, logger, saslAuthenticate }) => {\n  return {\n    authenticate: async () => {\n      const { oauthBearerProvider } = sasl\n\n      if (oauthBearerProvider == null) {\n        throw new KafkaJSSASLAuthenticationError(\n          'SASL OAUTHBEARER: Missing OAuth bearer token provider'\n        )\n      }\n\n      const oauthBearerToken = await oauthBearerProvider()\n\n      if (oauthBearerToken.value == null) {\n        throw new KafkaJSSASLAuthenticationError('SASL OAUTHBEARER: Invalid OAuth bearer token')\n      }\n\n      const broker = `${host}:${port}`\n\n      try {\n        logger.debug('Authenticate with SASL OAUTHBEARER', { broker })\n        await saslAuthenticate({ request: await request(sasl, oauthBearerToken) })\n        logger.debug('SASL OAUTHBEARER authentication successful', { broker })\n      } catch (e) {\n        const error = new KafkaJSSASLAuthenticationError(\n          `SASL OAUTHBEARER authentication failed: ${e.message}`\n        )\n        logger.error(error.message, { broker })\n        throw error\n      }\n    },\n  }\n}\n\nmodule.exports = oauthBearerAuthenticatorProvider\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM;EAAEA;AAAQ,CAAC,GAAGC,OAAO,CAAC,iCAAiC,CAAC;AAC9D,MAAM;EAAEC;AAA+B,CAAC,GAAGD,OAAO,CAAC,cAAc,CAAC;AAElE,MAAME,gCAAgC,GAAGC,IAAI,IAAI,CAAC;EAAEC,IAAI;EAAEC,IAAI;EAAEC,MAAM;EAAEC;AAAiB,CAAC,KAAK;EAC7F,OAAO;IACLC,YAAY;MAAA,6BAAE,aAAY;QACxB,MAAM;UAAEC;QAAoB,CAAC,GAAGN,IAAI;QAEpC,IAAIM,mBAAmB,IAAI,IAAI,EAAE;UAC/B,MAAM,IAAIR,8BAA8B,CACtC,uDAAuD,CACxD;QACH;QAEA,MAAMS,gBAAgB,SAASD,mBAAmB,EAAE;QAEpD,IAAIC,gBAAgB,CAACC,KAAK,IAAI,IAAI,EAAE;UAClC,MAAM,IAAIV,8BAA8B,CAAC,8CAA8C,CAAC;QAC1F;QAEA,MAAMW,MAAM,GAAI,GAAER,IAAK,IAAGC,IAAK,EAAC;QAEhC,IAAI;UACFC,MAAM,CAACO,KAAK,CAAC,oCAAoC,EAAE;YAAED;UAAO,CAAC,CAAC;UAC9D,MAAML,gBAAgB,CAAC;YAAER,OAAO,QAAQA,OAAO,CAACI,IAAI,EAAEO,gBAAgB;UAAE,CAAC,CAAC;UAC1EJ,MAAM,CAACO,KAAK,CAAC,4CAA4C,EAAE;YAAED;UAAO,CAAC,CAAC;QACxE,CAAC,CAAC,OAAOE,CAAC,EAAE;UACV,MAAMC,KAAK,GAAG,IAAId,8BAA8B,CAC7C,2CAA0Ca,CAAC,CAACE,OAAQ,EAAC,CACvD;UACDV,MAAM,CAACS,KAAK,CAACA,KAAK,CAACC,OAAO,EAAE;YAAEJ;UAAO,CAAC,CAAC;UACvC,MAAMG,KAAK;QACb;MACF,CAAC;MAAA;QAAA;MAAA;IAAA;EACH,CAAC;AACH,CAAC;AAEDE,MAAM,CAACC,OAAO,GAAGhB,gCAAgC"},"metadata":{},"sourceType":"script","externalDependencies":[]}