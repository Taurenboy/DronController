{"ast":null,"code":"var _asyncToGenerator = require(\"C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nconst Encoder = require('../../../encoder');\nconst {\n  Fetch: apiKey\n} = require('../../apiKeys');\n\n/**\n * Fetch Request (Version: 0) => replica_id max_wait_time min_bytes [topics]\n *   replica_id => INT32\n *   max_wait_time => INT32\n *   min_bytes => INT32\n *   topics => topic [partitions]\n *     topic => STRING\n *     partitions => partition fetch_offset max_bytes\n *       partition => INT32\n *       fetch_offset => INT64\n *       max_bytes => INT32\n */\n\n/**\n * @param {number} replicaId Broker id of the follower\n * @param {number} maxWaitTime Maximum time in ms to wait for the response\n * @param {number} minBytes Minimum bytes to accumulate in the response.\n * @param {Array} topics Topics to fetch\n *                        [\n *                          {\n *                            topic: 'topic-name',\n *                            partitions: [\n *                              {\n *                                partition: 0,\n *                                fetchOffset: '4124',\n *                                maxBytes: 2048\n *                              }\n *                            ]\n *                          }\n *                        ]\n */\nmodule.exports = ({\n  replicaId,\n  maxWaitTime,\n  minBytes,\n  topics\n}) => ({\n  apiKey,\n  apiVersion: 0,\n  apiName: 'Fetch',\n  encode: function () {\n    var _ref = _asyncToGenerator(function* () {\n      return new Encoder().writeInt32(replicaId).writeInt32(maxWaitTime).writeInt32(minBytes).writeArray(topics.map(encodeTopic));\n    });\n    return function encode() {\n      return _ref.apply(this, arguments);\n    };\n  }()\n});\nconst encodeTopic = ({\n  topic,\n  partitions\n}) => {\n  return new Encoder().writeString(topic).writeArray(partitions.map(encodePartition));\n};\nconst encodePartition = ({\n  partition,\n  fetchOffset,\n  maxBytes\n}) => {\n  return new Encoder().writeInt32(partition).writeInt64(fetchOffset).writeInt32(maxBytes);\n};","map":{"version":3,"names":["Encoder","require","Fetch","apiKey","module","exports","replicaId","maxWaitTime","minBytes","topics","apiVersion","apiName","encode","writeInt32","writeArray","map","encodeTopic","topic","partitions","writeString","encodePartition","partition","fetchOffset","maxBytes","writeInt64"],"sources":["C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/kafkajs/src/protocol/requests/fetch/v0/request.js"],"sourcesContent":["const Encoder = require('../../../encoder')\nconst { Fetch: apiKey } = require('../../apiKeys')\n\n/**\n * Fetch Request (Version: 0) => replica_id max_wait_time min_bytes [topics]\n *   replica_id => INT32\n *   max_wait_time => INT32\n *   min_bytes => INT32\n *   topics => topic [partitions]\n *     topic => STRING\n *     partitions => partition fetch_offset max_bytes\n *       partition => INT32\n *       fetch_offset => INT64\n *       max_bytes => INT32\n */\n\n/**\n * @param {number} replicaId Broker id of the follower\n * @param {number} maxWaitTime Maximum time in ms to wait for the response\n * @param {number} minBytes Minimum bytes to accumulate in the response.\n * @param {Array} topics Topics to fetch\n *                        [\n *                          {\n *                            topic: 'topic-name',\n *                            partitions: [\n *                              {\n *                                partition: 0,\n *                                fetchOffset: '4124',\n *                                maxBytes: 2048\n *                              }\n *                            ]\n *                          }\n *                        ]\n */\nmodule.exports = ({ replicaId, maxWaitTime, minBytes, topics }) => ({\n  apiKey,\n  apiVersion: 0,\n  apiName: 'Fetch',\n  encode: async () => {\n    return new Encoder()\n      .writeInt32(replicaId)\n      .writeInt32(maxWaitTime)\n      .writeInt32(minBytes)\n      .writeArray(topics.map(encodeTopic))\n  },\n})\n\nconst encodeTopic = ({ topic, partitions }) => {\n  return new Encoder().writeString(topic).writeArray(partitions.map(encodePartition))\n}\n\nconst encodePartition = ({ partition, fetchOffset, maxBytes }) => {\n  return new Encoder()\n    .writeInt32(partition)\n    .writeInt64(fetchOffset)\n    .writeInt32(maxBytes)\n}\n"],"mappings":";AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAC3C,MAAM;EAAEC,KAAK,EAAEC;AAAO,CAAC,GAAGF,OAAO,CAAC,eAAe,CAAC;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAG,MAAM,CAACC,OAAO,GAAG,CAAC;EAAEC,SAAS;EAAEC,WAAW;EAAEC,QAAQ;EAAEC;AAAO,CAAC,MAAM;EAClEN,MAAM;EACNO,UAAU,EAAE,CAAC;EACbC,OAAO,EAAE,OAAO;EAChBC,MAAM;IAAA,6BAAE,aAAY;MAClB,OAAO,IAAIZ,OAAO,EAAE,CACjBa,UAAU,CAACP,SAAS,CAAC,CACrBO,UAAU,CAACN,WAAW,CAAC,CACvBM,UAAU,CAACL,QAAQ,CAAC,CACpBM,UAAU,CAACL,MAAM,CAACM,GAAG,CAACC,WAAW,CAAC,CAAC;IACxC,CAAC;IAAA;MAAA;IAAA;EAAA;AACH,CAAC,CAAC;AAEF,MAAMA,WAAW,GAAG,CAAC;EAAEC,KAAK;EAAEC;AAAW,CAAC,KAAK;EAC7C,OAAO,IAAIlB,OAAO,EAAE,CAACmB,WAAW,CAACF,KAAK,CAAC,CAACH,UAAU,CAACI,UAAU,CAACH,GAAG,CAACK,eAAe,CAAC,CAAC;AACrF,CAAC;AAED,MAAMA,eAAe,GAAG,CAAC;EAAEC,SAAS;EAAEC,WAAW;EAAEC;AAAS,CAAC,KAAK;EAChE,OAAO,IAAIvB,OAAO,EAAE,CACjBa,UAAU,CAACQ,SAAS,CAAC,CACrBG,UAAU,CAACF,WAAW,CAAC,CACvBT,UAAU,CAACU,QAAQ,CAAC;AACzB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}