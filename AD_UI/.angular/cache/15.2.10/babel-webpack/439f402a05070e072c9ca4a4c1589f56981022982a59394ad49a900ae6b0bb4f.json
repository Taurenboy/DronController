{"ast":null,"code":"var _asyncToGenerator = require(\"C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nconst Encoder = require('../../../encoder');\nconst {\n  AddPartitionsToTxn: apiKey\n} = require('../../apiKeys');\n\n/**\n * AddPartitionsToTxn Request (Version: 0) => transactional_id producer_id producer_epoch [topics]\n *   transactional_id => STRING\n *   producer_id => INT64\n *   producer_epoch => INT16\n *   topics => topic [partitions]\n *     topic => STRING\n *     partitions => INT32\n */\n\nmodule.exports = ({\n  transactionalId,\n  producerId,\n  producerEpoch,\n  topics\n}) => ({\n  apiKey,\n  apiVersion: 0,\n  apiName: 'AddPartitionsToTxn',\n  encode: function () {\n    var _ref = _asyncToGenerator(function* () {\n      return new Encoder().writeString(transactionalId).writeInt64(producerId).writeInt16(producerEpoch).writeArray(topics.map(encodeTopic));\n    });\n    return function encode() {\n      return _ref.apply(this, arguments);\n    };\n  }()\n});\nconst encodeTopic = ({\n  topic,\n  partitions\n}) => {\n  return new Encoder().writeString(topic).writeArray(partitions.map(encodePartition));\n};\nconst encodePartition = partition => {\n  return new Encoder().writeInt32(partition);\n};","map":{"version":3,"names":["Encoder","require","AddPartitionsToTxn","apiKey","module","exports","transactionalId","producerId","producerEpoch","topics","apiVersion","apiName","encode","writeString","writeInt64","writeInt16","writeArray","map","encodeTopic","topic","partitions","encodePartition","partition","writeInt32"],"sources":["C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/kafkajs/src/protocol/requests/addPartitionsToTxn/v0/request.js"],"sourcesContent":["const Encoder = require('../../../encoder')\nconst { AddPartitionsToTxn: apiKey } = require('../../apiKeys')\n\n/**\n * AddPartitionsToTxn Request (Version: 0) => transactional_id producer_id producer_epoch [topics]\n *   transactional_id => STRING\n *   producer_id => INT64\n *   producer_epoch => INT16\n *   topics => topic [partitions]\n *     topic => STRING\n *     partitions => INT32\n */\n\nmodule.exports = ({ transactionalId, producerId, producerEpoch, topics }) => ({\n  apiKey,\n  apiVersion: 0,\n  apiName: 'AddPartitionsToTxn',\n  encode: async () => {\n    return new Encoder()\n      .writeString(transactionalId)\n      .writeInt64(producerId)\n      .writeInt16(producerEpoch)\n      .writeArray(topics.map(encodeTopic))\n  },\n})\n\nconst encodeTopic = ({ topic, partitions }) => {\n  return new Encoder().writeString(topic).writeArray(partitions.map(encodePartition))\n}\n\nconst encodePartition = partition => {\n  return new Encoder().writeInt32(partition)\n}\n"],"mappings":";AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAC3C,MAAM;EAAEC,kBAAkB,EAAEC;AAAO,CAAC,GAAGF,OAAO,CAAC,eAAe,CAAC;;AAE/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAG,MAAM,CAACC,OAAO,GAAG,CAAC;EAAEC,eAAe;EAAEC,UAAU;EAAEC,aAAa;EAAEC;AAAO,CAAC,MAAM;EAC5EN,MAAM;EACNO,UAAU,EAAE,CAAC;EACbC,OAAO,EAAE,oBAAoB;EAC7BC,MAAM;IAAA,6BAAE,aAAY;MAClB,OAAO,IAAIZ,OAAO,EAAE,CACjBa,WAAW,CAACP,eAAe,CAAC,CAC5BQ,UAAU,CAACP,UAAU,CAAC,CACtBQ,UAAU,CAACP,aAAa,CAAC,CACzBQ,UAAU,CAACP,MAAM,CAACQ,GAAG,CAACC,WAAW,CAAC,CAAC;IACxC,CAAC;IAAA;MAAA;IAAA;EAAA;AACH,CAAC,CAAC;AAEF,MAAMA,WAAW,GAAG,CAAC;EAAEC,KAAK;EAAEC;AAAW,CAAC,KAAK;EAC7C,OAAO,IAAIpB,OAAO,EAAE,CAACa,WAAW,CAACM,KAAK,CAAC,CAACH,UAAU,CAACI,UAAU,CAACH,GAAG,CAACI,eAAe,CAAC,CAAC;AACrF,CAAC;AAED,MAAMA,eAAe,GAAGC,SAAS,IAAI;EACnC,OAAO,IAAItB,OAAO,EAAE,CAACuB,UAAU,CAACD,SAAS,CAAC;AAC5C,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}