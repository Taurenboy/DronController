{"ast":null,"code":"var _asyncToGenerator = require(\"C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nconst createRetry = require('../retry');\nconst {\n  CONNECTION_STATUS\n} = require('../network/connectionStatus');\nconst {\n  DefaultPartitioner\n} = require('./partitioners/');\nconst InstrumentationEventEmitter = require('../instrumentation/emitter');\nconst createEosManager = require('./eosManager');\nconst createMessageProducer = require('./messageProducer');\nconst {\n  events,\n  wrap: wrapEvent,\n  unwrap: unwrapEvent\n} = require('./instrumentationEvents');\nconst {\n  KafkaJSNonRetriableError\n} = require('../errors');\nconst {\n  values,\n  keys\n} = Object;\nconst eventNames = values(events);\nconst eventKeys = keys(events).map(key => `producer.events.${key}`).join(', ');\nconst {\n  CONNECT,\n  DISCONNECT\n} = events;\n\n/**\n *\n * @param {Object} params\n * @param {import('../../types').Cluster} params.cluster\n * @param {import('../../types').Logger} params.logger\n * @param {import('../../types').ICustomPartitioner} [params.createPartitioner]\n * @param {import('../../types').RetryOptions} [params.retry]\n * @param {boolean} [params.idempotent]\n * @param {string} [params.transactionalId]\n * @param {number} [params.transactionTimeout]\n * @param {InstrumentationEventEmitter} [params.instrumentationEmitter]\n *\n * @returns {import('../../types').Producer}\n */\nmodule.exports = ({\n  cluster,\n  logger: rootLogger,\n  createPartitioner = DefaultPartitioner,\n  retry,\n  idempotent = false,\n  transactionalId,\n  transactionTimeout,\n  instrumentationEmitter: rootInstrumentationEmitter\n}) => {\n  let connectionStatus = CONNECTION_STATUS.DISCONNECTED;\n  retry = retry || {\n    retries: idempotent ? Number.MAX_SAFE_INTEGER : 5\n  };\n  if (idempotent && retry.retries < 1) {\n    throw new KafkaJSNonRetriableError('Idempotent producer must allow retries to protect against transient errors');\n  }\n  const logger = rootLogger.namespace('Producer');\n  if (idempotent && retry.retries < Number.MAX_SAFE_INTEGER) {\n    logger.warn('Limiting retries for the idempotent producer may invalidate EoS guarantees');\n  }\n  const partitioner = createPartitioner();\n  const retrier = createRetry(Object.assign({}, cluster.retry, retry));\n  const instrumentationEmitter = rootInstrumentationEmitter || new InstrumentationEventEmitter();\n  const idempotentEosManager = createEosManager({\n    logger,\n    cluster,\n    transactionTimeout,\n    transactional: false,\n    transactionalId\n  });\n  const {\n    send,\n    sendBatch\n  } = createMessageProducer({\n    logger,\n    cluster,\n    partitioner,\n    eosManager: idempotentEosManager,\n    idempotent,\n    retrier,\n    getConnectionStatus: () => connectionStatus\n  });\n  let transactionalEosManager;\n\n  /** @type {import(\"../../types\").Producer[\"on\"]} */\n  const on = (eventName, listener) => {\n    if (!eventNames.includes(eventName)) {\n      throw new KafkaJSNonRetriableError(`Event name should be one of ${eventKeys}`);\n    }\n    return instrumentationEmitter.addListener(unwrapEvent(eventName), event => {\n      event.type = wrapEvent(event.type);\n      Promise.resolve(listener(event)).catch(e => {\n        logger.error(`Failed to execute listener: ${e.message}`, {\n          eventName,\n          stack: e.stack\n        });\n      });\n    });\n  };\n\n  /**\n   * Begin a transaction. The returned object contains methods to send messages\n   * to the transaction and end the transaction by committing or aborting.\n   *\n   * Only messages sent on the transaction object will participate in the transaction.\n   *\n   * Calling any of the transactional methods after the transaction has ended\n   * will raise an exception (use `isActive` to ascertain if ended).\n   * @returns {Promise<Transaction>}\n   *\n   * @typedef {Object} Transaction\n   * @property {Function} send  Identical to the producer \"send\" method\n   * @property {Function} sendBatch Identical to the producer \"sendBatch\" method\n   * @property {Function} abort Abort the transaction\n   * @property {Function} commit  Commit the transaction\n   * @property {Function} isActive  Whether the transaction is active\n   */\n  const transaction = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* () {\n      if (!transactionalId) {\n        throw new KafkaJSNonRetriableError('Must provide transactional id for transactional producer');\n      }\n      let transactionDidEnd = false;\n      transactionalEosManager = transactionalEosManager || createEosManager({\n        logger,\n        cluster,\n        transactionTimeout,\n        transactional: true,\n        transactionalId\n      });\n      if (transactionalEosManager.isInTransaction()) {\n        throw new KafkaJSNonRetriableError('There is already an ongoing transaction for this producer. Please end the transaction before beginning another.');\n      }\n\n      // We only initialize the producer id once\n      if (!transactionalEosManager.isInitialized()) {\n        yield transactionalEosManager.initProducerId();\n      }\n      transactionalEosManager.beginTransaction();\n      const {\n        send: sendTxn,\n        sendBatch: sendBatchTxn\n      } = createMessageProducer({\n        logger,\n        cluster,\n        partitioner,\n        retrier,\n        eosManager: transactionalEosManager,\n        idempotent: true,\n        getConnectionStatus: () => connectionStatus\n      });\n      const isActive = () => transactionalEosManager.isInTransaction() && !transactionDidEnd;\n      const transactionGuard = fn => (...args) => {\n        if (!isActive()) {\n          return Promise.reject(new KafkaJSNonRetriableError('Cannot continue to use transaction once ended'));\n        }\n        return fn(...args);\n      };\n      return {\n        sendBatch: transactionGuard(sendBatchTxn),\n        send: transactionGuard(sendTxn),\n        /**\n         * Abort the ongoing transaction.\n         *\n         * @throws {KafkaJSNonRetriableError} If transaction has ended\n         */\n        abort: transactionGuard( /*#__PURE__*/_asyncToGenerator(function* () {\n          yield transactionalEosManager.abort();\n          transactionDidEnd = true;\n        })),\n        /**\n         * Commit the ongoing transaction.\n         *\n         * @throws {KafkaJSNonRetriableError} If transaction has ended\n         */\n        commit: transactionGuard( /*#__PURE__*/_asyncToGenerator(function* () {\n          yield transactionalEosManager.commit();\n          transactionDidEnd = true;\n        })),\n        /**\n         * Sends a list of specified offsets to the consumer group coordinator, and also marks those offsets as part of the current transaction.\n         *\n         * @throws {KafkaJSNonRetriableError} If transaction has ended\n         */\n        sendOffsets: transactionGuard( /*#__PURE__*/function () {\n          var _ref4 = _asyncToGenerator(function* ({\n            consumerGroupId,\n            topics\n          }) {\n            yield transactionalEosManager.sendOffsets({\n              consumerGroupId,\n              topics\n            });\n            for (const topicOffsets of topics) {\n              const {\n                topic,\n                partitions\n              } = topicOffsets;\n              for (const {\n                partition,\n                offset\n              } of partitions) {\n                cluster.markOffsetAsCommitted({\n                  groupId: consumerGroupId,\n                  topic,\n                  partition,\n                  offset\n                });\n              }\n            }\n          });\n          return function (_x) {\n            return _ref4.apply(this, arguments);\n          };\n        }()),\n        isActive\n      };\n    });\n    return function transaction() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  /**\n   * @returns {Object} logger\n   */\n  const getLogger = () => logger;\n  return {\n    /**\n     * @returns {Promise}\n     */\n    connect: function () {\n      var _ref5 = _asyncToGenerator(function* () {\n        yield cluster.connect();\n        connectionStatus = CONNECTION_STATUS.CONNECTED;\n        instrumentationEmitter.emit(CONNECT);\n        if (idempotent && !idempotentEosManager.isInitialized()) {\n          yield idempotentEosManager.initProducerId();\n        }\n      });\n      return function connect() {\n        return _ref5.apply(this, arguments);\n      };\n    }(),\n    /**\n     * @return {Promise}\n     */\n    disconnect: function () {\n      var _ref6 = _asyncToGenerator(function* () {\n        connectionStatus = CONNECTION_STATUS.DISCONNECTING;\n        yield cluster.disconnect();\n        connectionStatus = CONNECTION_STATUS.DISCONNECTED;\n        instrumentationEmitter.emit(DISCONNECT);\n      });\n      return function disconnect() {\n        return _ref6.apply(this, arguments);\n      };\n    }(),\n    isIdempotent: () => {\n      return idempotent;\n    },\n    events,\n    on,\n    send,\n    sendBatch,\n    transaction,\n    logger: getLogger\n  };\n};","map":{"version":3,"names":["createRetry","require","CONNECTION_STATUS","DefaultPartitioner","InstrumentationEventEmitter","createEosManager","createMessageProducer","events","wrap","wrapEvent","unwrap","unwrapEvent","KafkaJSNonRetriableError","values","keys","Object","eventNames","eventKeys","map","key","join","CONNECT","DISCONNECT","module","exports","cluster","logger","rootLogger","createPartitioner","retry","idempotent","transactionalId","transactionTimeout","instrumentationEmitter","rootInstrumentationEmitter","connectionStatus","DISCONNECTED","retries","Number","MAX_SAFE_INTEGER","namespace","warn","partitioner","retrier","assign","idempotentEosManager","transactional","send","sendBatch","eosManager","getConnectionStatus","transactionalEosManager","on","eventName","listener","includes","addListener","event","type","Promise","resolve","catch","e","error","message","stack","transaction","transactionDidEnd","isInTransaction","isInitialized","initProducerId","beginTransaction","sendTxn","sendBatchTxn","isActive","transactionGuard","fn","args","reject","abort","commit","sendOffsets","consumerGroupId","topics","topicOffsets","topic","partitions","partition","offset","markOffsetAsCommitted","groupId","getLogger","connect","CONNECTED","emit","disconnect","DISCONNECTING","isIdempotent"],"sources":["C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/kafkajs/src/producer/index.js"],"sourcesContent":["const createRetry = require('../retry')\nconst { CONNECTION_STATUS } = require('../network/connectionStatus')\nconst { DefaultPartitioner } = require('./partitioners/')\nconst InstrumentationEventEmitter = require('../instrumentation/emitter')\nconst createEosManager = require('./eosManager')\nconst createMessageProducer = require('./messageProducer')\nconst { events, wrap: wrapEvent, unwrap: unwrapEvent } = require('./instrumentationEvents')\nconst { KafkaJSNonRetriableError } = require('../errors')\n\nconst { values, keys } = Object\nconst eventNames = values(events)\nconst eventKeys = keys(events)\n  .map(key => `producer.events.${key}`)\n  .join(', ')\n\nconst { CONNECT, DISCONNECT } = events\n\n/**\n *\n * @param {Object} params\n * @param {import('../../types').Cluster} params.cluster\n * @param {import('../../types').Logger} params.logger\n * @param {import('../../types').ICustomPartitioner} [params.createPartitioner]\n * @param {import('../../types').RetryOptions} [params.retry]\n * @param {boolean} [params.idempotent]\n * @param {string} [params.transactionalId]\n * @param {number} [params.transactionTimeout]\n * @param {InstrumentationEventEmitter} [params.instrumentationEmitter]\n *\n * @returns {import('../../types').Producer}\n */\nmodule.exports = ({\n  cluster,\n  logger: rootLogger,\n  createPartitioner = DefaultPartitioner,\n  retry,\n  idempotent = false,\n  transactionalId,\n  transactionTimeout,\n  instrumentationEmitter: rootInstrumentationEmitter,\n}) => {\n  let connectionStatus = CONNECTION_STATUS.DISCONNECTED\n  retry = retry || { retries: idempotent ? Number.MAX_SAFE_INTEGER : 5 }\n\n  if (idempotent && retry.retries < 1) {\n    throw new KafkaJSNonRetriableError(\n      'Idempotent producer must allow retries to protect against transient errors'\n    )\n  }\n\n  const logger = rootLogger.namespace('Producer')\n\n  if (idempotent && retry.retries < Number.MAX_SAFE_INTEGER) {\n    logger.warn('Limiting retries for the idempotent producer may invalidate EoS guarantees')\n  }\n\n  const partitioner = createPartitioner()\n  const retrier = createRetry(Object.assign({}, cluster.retry, retry))\n  const instrumentationEmitter = rootInstrumentationEmitter || new InstrumentationEventEmitter()\n  const idempotentEosManager = createEosManager({\n    logger,\n    cluster,\n    transactionTimeout,\n    transactional: false,\n    transactionalId,\n  })\n\n  const { send, sendBatch } = createMessageProducer({\n    logger,\n    cluster,\n    partitioner,\n    eosManager: idempotentEosManager,\n    idempotent,\n    retrier,\n    getConnectionStatus: () => connectionStatus,\n  })\n\n  let transactionalEosManager\n\n  /** @type {import(\"../../types\").Producer[\"on\"]} */\n  const on = (eventName, listener) => {\n    if (!eventNames.includes(eventName)) {\n      throw new KafkaJSNonRetriableError(`Event name should be one of ${eventKeys}`)\n    }\n\n    return instrumentationEmitter.addListener(unwrapEvent(eventName), event => {\n      event.type = wrapEvent(event.type)\n      Promise.resolve(listener(event)).catch(e => {\n        logger.error(`Failed to execute listener: ${e.message}`, {\n          eventName,\n          stack: e.stack,\n        })\n      })\n    })\n  }\n\n  /**\n   * Begin a transaction. The returned object contains methods to send messages\n   * to the transaction and end the transaction by committing or aborting.\n   *\n   * Only messages sent on the transaction object will participate in the transaction.\n   *\n   * Calling any of the transactional methods after the transaction has ended\n   * will raise an exception (use `isActive` to ascertain if ended).\n   * @returns {Promise<Transaction>}\n   *\n   * @typedef {Object} Transaction\n   * @property {Function} send  Identical to the producer \"send\" method\n   * @property {Function} sendBatch Identical to the producer \"sendBatch\" method\n   * @property {Function} abort Abort the transaction\n   * @property {Function} commit  Commit the transaction\n   * @property {Function} isActive  Whether the transaction is active\n   */\n  const transaction = async () => {\n    if (!transactionalId) {\n      throw new KafkaJSNonRetriableError('Must provide transactional id for transactional producer')\n    }\n\n    let transactionDidEnd = false\n    transactionalEosManager =\n      transactionalEosManager ||\n      createEosManager({\n        logger,\n        cluster,\n        transactionTimeout,\n        transactional: true,\n        transactionalId,\n      })\n\n    if (transactionalEosManager.isInTransaction()) {\n      throw new KafkaJSNonRetriableError(\n        'There is already an ongoing transaction for this producer. Please end the transaction before beginning another.'\n      )\n    }\n\n    // We only initialize the producer id once\n    if (!transactionalEosManager.isInitialized()) {\n      await transactionalEosManager.initProducerId()\n    }\n    transactionalEosManager.beginTransaction()\n\n    const { send: sendTxn, sendBatch: sendBatchTxn } = createMessageProducer({\n      logger,\n      cluster,\n      partitioner,\n      retrier,\n      eosManager: transactionalEosManager,\n      idempotent: true,\n      getConnectionStatus: () => connectionStatus,\n    })\n\n    const isActive = () => transactionalEosManager.isInTransaction() && !transactionDidEnd\n\n    const transactionGuard = fn => (...args) => {\n      if (!isActive()) {\n        return Promise.reject(\n          new KafkaJSNonRetriableError('Cannot continue to use transaction once ended')\n        )\n      }\n\n      return fn(...args)\n    }\n\n    return {\n      sendBatch: transactionGuard(sendBatchTxn),\n      send: transactionGuard(sendTxn),\n      /**\n       * Abort the ongoing transaction.\n       *\n       * @throws {KafkaJSNonRetriableError} If transaction has ended\n       */\n      abort: transactionGuard(async () => {\n        await transactionalEosManager.abort()\n        transactionDidEnd = true\n      }),\n      /**\n       * Commit the ongoing transaction.\n       *\n       * @throws {KafkaJSNonRetriableError} If transaction has ended\n       */\n      commit: transactionGuard(async () => {\n        await transactionalEosManager.commit()\n        transactionDidEnd = true\n      }),\n      /**\n       * Sends a list of specified offsets to the consumer group coordinator, and also marks those offsets as part of the current transaction.\n       *\n       * @throws {KafkaJSNonRetriableError} If transaction has ended\n       */\n      sendOffsets: transactionGuard(async ({ consumerGroupId, topics }) => {\n        await transactionalEosManager.sendOffsets({ consumerGroupId, topics })\n\n        for (const topicOffsets of topics) {\n          const { topic, partitions } = topicOffsets\n          for (const { partition, offset } of partitions) {\n            cluster.markOffsetAsCommitted({\n              groupId: consumerGroupId,\n              topic,\n              partition,\n              offset,\n            })\n          }\n        }\n      }),\n      isActive,\n    }\n  }\n\n  /**\n   * @returns {Object} logger\n   */\n  const getLogger = () => logger\n\n  return {\n    /**\n     * @returns {Promise}\n     */\n    connect: async () => {\n      await cluster.connect()\n      connectionStatus = CONNECTION_STATUS.CONNECTED\n      instrumentationEmitter.emit(CONNECT)\n\n      if (idempotent && !idempotentEosManager.isInitialized()) {\n        await idempotentEosManager.initProducerId()\n      }\n    },\n    /**\n     * @return {Promise}\n     */\n    disconnect: async () => {\n      connectionStatus = CONNECTION_STATUS.DISCONNECTING\n      await cluster.disconnect()\n      connectionStatus = CONNECTION_STATUS.DISCONNECTED\n      instrumentationEmitter.emit(DISCONNECT)\n    },\n    isIdempotent: () => {\n      return idempotent\n    },\n    events,\n    on,\n    send,\n    sendBatch,\n    transaction,\n    logger: getLogger,\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}