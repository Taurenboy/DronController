{"ast":null,"code":"var _asyncToGenerator = require(\"C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nconst {\n  parse\n} = require('../v0/response');\nconst Decoder = require('../../../decoder');\n\n/**\n * Starting in version 1, on quota violation, brokers send out responses before throttling.\n * @see https://cwiki.apache.org/confluence/display/KAFKA/KIP-219+-+Improve+quota+communication\n * Version 1 also introduces a new resource pattern type field.\n * @see https://cwiki.apache.org/confluence/display/KAFKA/KIP-290%3A+Support+for+Prefixed+ACLs\n *\n * DescribeAcls Response (Version: 1) => throttle_time_ms error_code error_message [resources]\n *   throttle_time_ms => INT32\n *   error_code => INT16\n *   error_message => NULLABLE_STRING\n *   resources => resource_type resource_name resource_pattern_type [acls]\n *     resource_type => INT8\n *     resource_name => STRING\n *     resource_pattern_type => INT8\n *     acls => principal host operation permission_type\n *       principal => STRING\n *       host => STRING\n *       operation => INT8\n *       permission_type => INT8\n */\nconst decodeAcls = decoder => ({\n  principal: decoder.readString(),\n  host: decoder.readString(),\n  operation: decoder.readInt8(),\n  permissionType: decoder.readInt8()\n});\nconst decodeResources = decoder => ({\n  resourceType: decoder.readInt8(),\n  resourceName: decoder.readString(),\n  resourcePatternType: decoder.readInt8(),\n  acls: decoder.readArray(decodeAcls)\n});\nconst decode = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (rawData) {\n    const decoder = new Decoder(rawData);\n    const throttleTime = decoder.readInt32();\n    const errorCode = decoder.readInt16();\n    const errorMessage = decoder.readString();\n    const resources = decoder.readArray(decodeResources);\n    return {\n      throttleTime: 0,\n      clientSideThrottleTime: throttleTime,\n      errorCode,\n      errorMessage,\n      resources\n    };\n  });\n  return function decode(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nmodule.exports = {\n  decode,\n  parse\n};","map":{"version":3,"names":["parse","require","Decoder","decodeAcls","decoder","principal","readString","host","operation","readInt8","permissionType","decodeResources","resourceType","resourceName","resourcePatternType","acls","readArray","decode","rawData","throttleTime","readInt32","errorCode","readInt16","errorMessage","resources","clientSideThrottleTime","module","exports"],"sources":["C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/kafkajs/src/protocol/requests/describeAcls/v1/response.js"],"sourcesContent":["const { parse } = require('../v0/response')\nconst Decoder = require('../../../decoder')\n\n/**\n * Starting in version 1, on quota violation, brokers send out responses before throttling.\n * @see https://cwiki.apache.org/confluence/display/KAFKA/KIP-219+-+Improve+quota+communication\n * Version 1 also introduces a new resource pattern type field.\n * @see https://cwiki.apache.org/confluence/display/KAFKA/KIP-290%3A+Support+for+Prefixed+ACLs\n *\n * DescribeAcls Response (Version: 1) => throttle_time_ms error_code error_message [resources]\n *   throttle_time_ms => INT32\n *   error_code => INT16\n *   error_message => NULLABLE_STRING\n *   resources => resource_type resource_name resource_pattern_type [acls]\n *     resource_type => INT8\n *     resource_name => STRING\n *     resource_pattern_type => INT8\n *     acls => principal host operation permission_type\n *       principal => STRING\n *       host => STRING\n *       operation => INT8\n *       permission_type => INT8\n */\nconst decodeAcls = decoder => ({\n  principal: decoder.readString(),\n  host: decoder.readString(),\n  operation: decoder.readInt8(),\n  permissionType: decoder.readInt8(),\n})\n\nconst decodeResources = decoder => ({\n  resourceType: decoder.readInt8(),\n  resourceName: decoder.readString(),\n  resourcePatternType: decoder.readInt8(),\n  acls: decoder.readArray(decodeAcls),\n})\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData)\n  const throttleTime = decoder.readInt32()\n  const errorCode = decoder.readInt16()\n  const errorMessage = decoder.readString()\n  const resources = decoder.readArray(decodeResources)\n\n  return {\n    throttleTime: 0,\n    clientSideThrottleTime: throttleTime,\n    errorCode,\n    errorMessage,\n    resources,\n  }\n}\n\nmodule.exports = {\n  decode,\n  parse,\n}\n"],"mappings":";AAAA,MAAM;EAAEA;AAAM,CAAC,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AAC3C,MAAMC,OAAO,GAAGD,OAAO,CAAC,kBAAkB,CAAC;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,UAAU,GAAGC,OAAO,KAAK;EAC7BC,SAAS,EAAED,OAAO,CAACE,UAAU,EAAE;EAC/BC,IAAI,EAAEH,OAAO,CAACE,UAAU,EAAE;EAC1BE,SAAS,EAAEJ,OAAO,CAACK,QAAQ,EAAE;EAC7BC,cAAc,EAAEN,OAAO,CAACK,QAAQ;AAClC,CAAC,CAAC;AAEF,MAAME,eAAe,GAAGP,OAAO,KAAK;EAClCQ,YAAY,EAAER,OAAO,CAACK,QAAQ,EAAE;EAChCI,YAAY,EAAET,OAAO,CAACE,UAAU,EAAE;EAClCQ,mBAAmB,EAAEV,OAAO,CAACK,QAAQ,EAAE;EACvCM,IAAI,EAAEX,OAAO,CAACY,SAAS,CAACb,UAAU;AACpC,CAAC,CAAC;AAEF,MAAMc,MAAM;EAAA,6BAAG,WAAMC,OAAO,EAAI;IAC9B,MAAMd,OAAO,GAAG,IAAIF,OAAO,CAACgB,OAAO,CAAC;IACpC,MAAMC,YAAY,GAAGf,OAAO,CAACgB,SAAS,EAAE;IACxC,MAAMC,SAAS,GAAGjB,OAAO,CAACkB,SAAS,EAAE;IACrC,MAAMC,YAAY,GAAGnB,OAAO,CAACE,UAAU,EAAE;IACzC,MAAMkB,SAAS,GAAGpB,OAAO,CAACY,SAAS,CAACL,eAAe,CAAC;IAEpD,OAAO;MACLQ,YAAY,EAAE,CAAC;MACfM,sBAAsB,EAAEN,YAAY;MACpCE,SAAS;MACTE,YAAY;MACZC;IACF,CAAC;EACH,CAAC;EAAA,gBAdKP,MAAM;IAAA;EAAA;AAAA,GAcX;AAEDS,MAAM,CAACC,OAAO,GAAG;EACfV,MAAM;EACNjB;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}