{"ast":null,"code":"var _asyncToGenerator = require(\"C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nconst Decoder = require('../../../decoder');\nconst {\n  failure,\n  createErrorFromCode\n} = require('../../../error');\n\n/**\n * Metadata Response (Version: 0) => [brokers] [topic_metadata]\n *   brokers => node_id host port\n *     node_id => INT32\n *     host => STRING\n *     port => INT32\n *   topic_metadata => topic_error_code topic [partition_metadata]\n *     topic_error_code => INT16\n *     topic => STRING\n *     partition_metadata => partition_error_code partition_id leader [replicas] [isr]\n *       partition_error_code => INT16\n *       partition_id => INT32\n *       leader => INT32\n *       replicas => INT32\n *       isr => INT32\n */\n\nconst broker = decoder => ({\n  nodeId: decoder.readInt32(),\n  host: decoder.readString(),\n  port: decoder.readInt32()\n});\nconst topicMetadata = decoder => ({\n  topicErrorCode: decoder.readInt16(),\n  topic: decoder.readString(),\n  partitionMetadata: decoder.readArray(partitionMetadata)\n});\nconst partitionMetadata = decoder => ({\n  partitionErrorCode: decoder.readInt16(),\n  partitionId: decoder.readInt32(),\n  // leader: The node id for the kafka broker currently acting as leader\n  // for this partition\n  leader: decoder.readInt32(),\n  replicas: decoder.readArray(d => d.readInt32()),\n  isr: decoder.readArray(d => d.readInt32())\n});\nconst decode = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (rawData) {\n    const decoder = new Decoder(rawData);\n    return {\n      brokers: decoder.readArray(broker),\n      topicMetadata: decoder.readArray(topicMetadata)\n    };\n  });\n  return function decode(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nconst parse = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(function* (data) {\n    const topicsWithErrors = data.topicMetadata.filter(topic => failure(topic.topicErrorCode));\n    if (topicsWithErrors.length > 0) {\n      const {\n        topicErrorCode\n      } = topicsWithErrors[0];\n      throw createErrorFromCode(topicErrorCode);\n    }\n    const errors = data.topicMetadata.flatMap(topic => {\n      return topic.partitionMetadata.filter(partition => failure(partition.partitionErrorCode));\n    });\n    if (errors.length > 0) {\n      const {\n        partitionErrorCode\n      } = errors[0];\n      throw createErrorFromCode(partitionErrorCode);\n    }\n    return data;\n  });\n  return function parse(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nmodule.exports = {\n  decode,\n  parse\n};","map":{"version":3,"names":["Decoder","require","failure","createErrorFromCode","broker","decoder","nodeId","readInt32","host","readString","port","topicMetadata","topicErrorCode","readInt16","topic","partitionMetadata","readArray","partitionErrorCode","partitionId","leader","replicas","d","isr","decode","rawData","brokers","parse","data","topicsWithErrors","filter","length","errors","flatMap","partition","module","exports"],"sources":["C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/kafkajs/src/protocol/requests/metadata/v0/response.js"],"sourcesContent":["const Decoder = require('../../../decoder')\nconst { failure, createErrorFromCode } = require('../../../error')\n\n/**\n * Metadata Response (Version: 0) => [brokers] [topic_metadata]\n *   brokers => node_id host port\n *     node_id => INT32\n *     host => STRING\n *     port => INT32\n *   topic_metadata => topic_error_code topic [partition_metadata]\n *     topic_error_code => INT16\n *     topic => STRING\n *     partition_metadata => partition_error_code partition_id leader [replicas] [isr]\n *       partition_error_code => INT16\n *       partition_id => INT32\n *       leader => INT32\n *       replicas => INT32\n *       isr => INT32\n */\n\nconst broker = decoder => ({\n  nodeId: decoder.readInt32(),\n  host: decoder.readString(),\n  port: decoder.readInt32(),\n})\n\nconst topicMetadata = decoder => ({\n  topicErrorCode: decoder.readInt16(),\n  topic: decoder.readString(),\n  partitionMetadata: decoder.readArray(partitionMetadata),\n})\n\nconst partitionMetadata = decoder => ({\n  partitionErrorCode: decoder.readInt16(),\n  partitionId: decoder.readInt32(),\n  // leader: The node id for the kafka broker currently acting as leader\n  // for this partition\n  leader: decoder.readInt32(),\n  replicas: decoder.readArray(d => d.readInt32()),\n  isr: decoder.readArray(d => d.readInt32()),\n})\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData)\n  return {\n    brokers: decoder.readArray(broker),\n    topicMetadata: decoder.readArray(topicMetadata),\n  }\n}\n\nconst parse = async data => {\n  const topicsWithErrors = data.topicMetadata.filter(topic => failure(topic.topicErrorCode))\n  if (topicsWithErrors.length > 0) {\n    const { topicErrorCode } = topicsWithErrors[0]\n    throw createErrorFromCode(topicErrorCode)\n  }\n\n  const errors = data.topicMetadata.flatMap(topic => {\n    return topic.partitionMetadata.filter(partition => failure(partition.partitionErrorCode))\n  })\n\n  if (errors.length > 0) {\n    const { partitionErrorCode } = errors[0]\n    throw createErrorFromCode(partitionErrorCode)\n  }\n\n  return data\n}\n\nmodule.exports = {\n  decode,\n  parse,\n}\n"],"mappings":";AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAC3C,MAAM;EAAEC,OAAO;EAAEC;AAAoB,CAAC,GAAGF,OAAO,CAAC,gBAAgB,CAAC;;AAElE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMG,MAAM,GAAGC,OAAO,KAAK;EACzBC,MAAM,EAAED,OAAO,CAACE,SAAS,EAAE;EAC3BC,IAAI,EAAEH,OAAO,CAACI,UAAU,EAAE;EAC1BC,IAAI,EAAEL,OAAO,CAACE,SAAS;AACzB,CAAC,CAAC;AAEF,MAAMI,aAAa,GAAGN,OAAO,KAAK;EAChCO,cAAc,EAAEP,OAAO,CAACQ,SAAS,EAAE;EACnCC,KAAK,EAAET,OAAO,CAACI,UAAU,EAAE;EAC3BM,iBAAiB,EAAEV,OAAO,CAACW,SAAS,CAACD,iBAAiB;AACxD,CAAC,CAAC;AAEF,MAAMA,iBAAiB,GAAGV,OAAO,KAAK;EACpCY,kBAAkB,EAAEZ,OAAO,CAACQ,SAAS,EAAE;EACvCK,WAAW,EAAEb,OAAO,CAACE,SAAS,EAAE;EAChC;EACA;EACAY,MAAM,EAAEd,OAAO,CAACE,SAAS,EAAE;EAC3Ba,QAAQ,EAAEf,OAAO,CAACW,SAAS,CAACK,CAAC,IAAIA,CAAC,CAACd,SAAS,EAAE,CAAC;EAC/Ce,GAAG,EAAEjB,OAAO,CAACW,SAAS,CAACK,CAAC,IAAIA,CAAC,CAACd,SAAS,EAAE;AAC3C,CAAC,CAAC;AAEF,MAAMgB,MAAM;EAAA,6BAAG,WAAMC,OAAO,EAAI;IAC9B,MAAMnB,OAAO,GAAG,IAAIL,OAAO,CAACwB,OAAO,CAAC;IACpC,OAAO;MACLC,OAAO,EAAEpB,OAAO,CAACW,SAAS,CAACZ,MAAM,CAAC;MAClCO,aAAa,EAAEN,OAAO,CAACW,SAAS,CAACL,aAAa;IAChD,CAAC;EACH,CAAC;EAAA,gBANKY,MAAM;IAAA;EAAA;AAAA,GAMX;AAED,MAAMG,KAAK;EAAA,8BAAG,WAAMC,IAAI,EAAI;IAC1B,MAAMC,gBAAgB,GAAGD,IAAI,CAAChB,aAAa,CAACkB,MAAM,CAACf,KAAK,IAAIZ,OAAO,CAACY,KAAK,CAACF,cAAc,CAAC,CAAC;IAC1F,IAAIgB,gBAAgB,CAACE,MAAM,GAAG,CAAC,EAAE;MAC/B,MAAM;QAAElB;MAAe,CAAC,GAAGgB,gBAAgB,CAAC,CAAC,CAAC;MAC9C,MAAMzB,mBAAmB,CAACS,cAAc,CAAC;IAC3C;IAEA,MAAMmB,MAAM,GAAGJ,IAAI,CAAChB,aAAa,CAACqB,OAAO,CAAClB,KAAK,IAAI;MACjD,OAAOA,KAAK,CAACC,iBAAiB,CAACc,MAAM,CAACI,SAAS,IAAI/B,OAAO,CAAC+B,SAAS,CAAChB,kBAAkB,CAAC,CAAC;IAC3F,CAAC,CAAC;IAEF,IAAIc,MAAM,CAACD,MAAM,GAAG,CAAC,EAAE;MACrB,MAAM;QAAEb;MAAmB,CAAC,GAAGc,MAAM,CAAC,CAAC,CAAC;MACxC,MAAM5B,mBAAmB,CAACc,kBAAkB,CAAC;IAC/C;IAEA,OAAOU,IAAI;EACb,CAAC;EAAA,gBAjBKD,KAAK;IAAA;EAAA;AAAA,GAiBV;AAEDQ,MAAM,CAACC,OAAO,GAAG;EACfZ,MAAM;EACNG;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}