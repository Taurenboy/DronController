{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class SocketService {\n  constructor() {\n    // Configura la conexión al servidor de sockets\n    // this.socket = io('http://localhost:3000', {\n    //   query: {\n    //     appName: 'AD_UI', // Nombre de la aplicación\n    //   },\n    // });\n  }\n  // Define métodos para enviar y recibir mensajes por sockets\n  sendMessage(message) {\n    this.socket.emit('chatMessage', message);\n  }\n  // Agrega otros métodos según tus necesidades\n  // Suscríbete a eventos para recibir mensajes del servidor\n  onMessageReceived(callback) {\n    this.socket.on('tablero', message => {\n      callback(message);\n    });\n  }\n  static #_ = this.ɵfac = function SocketService_Factory(t) {\n    return new (t || SocketService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SocketService,\n    factory: SocketService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":";AAMA,OAAM,MAAOA,aAAa;EAGxBC;IACE;IACA;IACA;IACA;IACA;IACA;EAAA;EAGF;EACAC,WAAW,CAACC,OAAe;IACzB,IAAI,CAACC,MAAM,CAACC,IAAI,CAAC,aAAa,EAAEF,OAAO,CAAC;EAC1C;EAEA;EAEA;EACAG,iBAAiB,CAACC,QAAmC;IACnD,IAAI,CAACH,MAAM,CAACI,EAAE,CAAC,SAAS,EAAGL,OAAe,IAAI;MAC5CI,QAAQ,CAACJ,OAAO,CAAC;IACnB,CAAC,CAAC;EACJ;EAAC;qBAxBUH,aAAa;EAAA;EAAA;WAAbA,aAAa;IAAAS,SAAbT,aAAa;IAAAU,YAFZ;EAAM","names":["SocketService","constructor","sendMessage","message","socket","emit","onMessageReceived","callback","on","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\ingev\\Documents\\Desarrollo\\Luna\\DronController\\AD_UI\\src\\app\\socket.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { io } from 'socket.io-client';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SocketService {\n  private socket: any;\n\n  constructor() {\n    // Configura la conexión al servidor de sockets\n    // this.socket = io('http://localhost:3000', {\n    //   query: {\n    //     appName: 'AD_UI', // Nombre de la aplicación\n    //   },\n    // });\n  }\n\n  // Define métodos para enviar y recibir mensajes por sockets\n  sendMessage(message: string) {\n    this.socket.emit('chatMessage', message);\n  }\n\n  // Agrega otros métodos según tus necesidades\n\n  // Suscríbete a eventos para recibir mensajes del servidor\n  onMessageReceived(callback: (message: string) => void) {\n    this.socket.on('tablero', (message: string) => {\n      callback(message);\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}