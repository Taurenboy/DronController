{"ast":null,"code":"var _asyncToGenerator = require(\"C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nconst Decoder = require('../../../decoder');\nconst {\n  parse: parseV3\n} = require('../v3/response');\n\n/**\n * Produce Response (Version: 5) => [responses] throttle_time_ms\n *   responses => topic [partition_responses]\n *     topic => STRING\n *     partition_responses => partition error_code base_offset log_append_time log_start_offset\n *       partition => INT32\n *       error_code => INT16\n *       base_offset => INT64\n *       log_append_time => INT64\n *       log_start_offset => INT64\n *   throttle_time_ms => INT32\n */\n\nconst partition = decoder => ({\n  partition: decoder.readInt32(),\n  errorCode: decoder.readInt16(),\n  baseOffset: decoder.readInt64().toString(),\n  logAppendTime: decoder.readInt64().toString(),\n  logStartOffset: decoder.readInt64().toString()\n});\nconst decode = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (rawData) {\n    const decoder = new Decoder(rawData);\n    const topics = decoder.readArray(decoder => ({\n      topicName: decoder.readString(),\n      partitions: decoder.readArray(partition)\n    }));\n    const throttleTime = decoder.readInt32();\n    return {\n      topics,\n      throttleTime\n    };\n  });\n  return function decode(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nmodule.exports = {\n  decode,\n  parse: parseV3\n};","map":{"version":3,"names":["Decoder","require","parse","parseV3","partition","decoder","readInt32","errorCode","readInt16","baseOffset","readInt64","toString","logAppendTime","logStartOffset","decode","rawData","topics","readArray","topicName","readString","partitions","throttleTime","module","exports"],"sources":["C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/kafkajs/src/protocol/requests/produce/v5/response.js"],"sourcesContent":["const Decoder = require('../../../decoder')\nconst { parse: parseV3 } = require('../v3/response')\n\n/**\n * Produce Response (Version: 5) => [responses] throttle_time_ms\n *   responses => topic [partition_responses]\n *     topic => STRING\n *     partition_responses => partition error_code base_offset log_append_time log_start_offset\n *       partition => INT32\n *       error_code => INT16\n *       base_offset => INT64\n *       log_append_time => INT64\n *       log_start_offset => INT64\n *   throttle_time_ms => INT32\n */\n\nconst partition = decoder => ({\n  partition: decoder.readInt32(),\n  errorCode: decoder.readInt16(),\n  baseOffset: decoder.readInt64().toString(),\n  logAppendTime: decoder.readInt64().toString(),\n  logStartOffset: decoder.readInt64().toString(),\n})\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData)\n  const topics = decoder.readArray(decoder => ({\n    topicName: decoder.readString(),\n    partitions: decoder.readArray(partition),\n  }))\n\n  const throttleTime = decoder.readInt32()\n\n  return {\n    topics,\n    throttleTime,\n  }\n}\n\nmodule.exports = {\n  decode,\n  parse: parseV3,\n}\n"],"mappings":";AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAC3C,MAAM;EAAEC,KAAK,EAAEC;AAAQ,CAAC,GAAGF,OAAO,CAAC,gBAAgB,CAAC;;AAEpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMG,SAAS,GAAGC,OAAO,KAAK;EAC5BD,SAAS,EAAEC,OAAO,CAACC,SAAS,EAAE;EAC9BC,SAAS,EAAEF,OAAO,CAACG,SAAS,EAAE;EAC9BC,UAAU,EAAEJ,OAAO,CAACK,SAAS,EAAE,CAACC,QAAQ,EAAE;EAC1CC,aAAa,EAAEP,OAAO,CAACK,SAAS,EAAE,CAACC,QAAQ,EAAE;EAC7CE,cAAc,EAAER,OAAO,CAACK,SAAS,EAAE,CAACC,QAAQ;AAC9C,CAAC,CAAC;AAEF,MAAMG,MAAM;EAAA,6BAAG,WAAMC,OAAO,EAAI;IAC9B,MAAMV,OAAO,GAAG,IAAIL,OAAO,CAACe,OAAO,CAAC;IACpC,MAAMC,MAAM,GAAGX,OAAO,CAACY,SAAS,CAACZ,OAAO,KAAK;MAC3Ca,SAAS,EAAEb,OAAO,CAACc,UAAU,EAAE;MAC/BC,UAAU,EAAEf,OAAO,CAACY,SAAS,CAACb,SAAS;IACzC,CAAC,CAAC,CAAC;IAEH,MAAMiB,YAAY,GAAGhB,OAAO,CAACC,SAAS,EAAE;IAExC,OAAO;MACLU,MAAM;MACNK;IACF,CAAC;EACH,CAAC;EAAA,gBAbKP,MAAM;IAAA;EAAA;AAAA,GAaX;AAEDQ,MAAM,CAACC,OAAO,GAAG;EACfT,MAAM;EACNZ,KAAK,EAAEC;AACT,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}