{"ast":null,"code":"var _asyncToGenerator = require(\"C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nconst Encoder = require('../../../encoder');\nconst {\n  Fetch: apiKey\n} = require('../../apiKeys');\nconst ISOLATION_LEVEL = require('../../../isolationLevel');\n\n/**\n * Sessions are only used by followers\n * @see https://cwiki.apache.org/confluence/display/KAFKA/KIP-227%3A+Introduce+Incremental+FetchRequests+to+Increase+Partition+Scalability\n */\n\n/**\n * Fetch Request (Version: 7) => replica_id max_wait_time min_bytes max_bytes isolation_level session_id session_epoch [topics] [forgotten_topics_data]\n *   replica_id => INT32\n *   max_wait_time => INT32\n *   min_bytes => INT32\n *   max_bytes => INT32\n *   isolation_level => INT8\n *   session_id => INT32\n *   session_epoch => INT32\n *   topics => topic [partitions]\n *     topic => STRING\n *     partitions => partition fetch_offset log_start_offset partition_max_bytes\n *       partition => INT32\n *       fetch_offset => INT64\n *       log_start_offset => INT64\n *       partition_max_bytes => INT32\n *   forgotten_topics_data => topic [partitions]\n *     topic => STRING\n *     partitions => INT32\n */\n\nmodule.exports = ({\n  replicaId,\n  maxWaitTime,\n  minBytes,\n  maxBytes,\n  topics,\n  isolationLevel = ISOLATION_LEVEL.READ_COMMITTED,\n  sessionId = 0,\n  sessionEpoch = -1,\n  forgottenTopics = [] // Topics to remove from the fetch session\n}) => ({\n  apiKey,\n  apiVersion: 7,\n  apiName: 'Fetch',\n  encode: function () {\n    var _ref = _asyncToGenerator(function* () {\n      return new Encoder().writeInt32(replicaId).writeInt32(maxWaitTime).writeInt32(minBytes).writeInt32(maxBytes).writeInt8(isolationLevel).writeInt32(sessionId).writeInt32(sessionEpoch).writeArray(topics.map(encodeTopic)).writeArray(forgottenTopics.map(encodeForgottenTopics));\n    });\n    return function encode() {\n      return _ref.apply(this, arguments);\n    };\n  }()\n});\nconst encodeForgottenTopics = ({\n  topic,\n  partitions\n}) => {\n  return new Encoder().writeString(topic).writeArray(partitions);\n};\nconst encodeTopic = ({\n  topic,\n  partitions\n}) => {\n  return new Encoder().writeString(topic).writeArray(partitions.map(encodePartition));\n};\nconst encodePartition = ({\n  partition,\n  fetchOffset,\n  logStartOffset = -1,\n  maxBytes\n}) => {\n  return new Encoder().writeInt32(partition).writeInt64(fetchOffset).writeInt64(logStartOffset).writeInt32(maxBytes);\n};","map":{"version":3,"names":["Encoder","require","Fetch","apiKey","ISOLATION_LEVEL","module","exports","replicaId","maxWaitTime","minBytes","maxBytes","topics","isolationLevel","READ_COMMITTED","sessionId","sessionEpoch","forgottenTopics","apiVersion","apiName","encode","writeInt32","writeInt8","writeArray","map","encodeTopic","encodeForgottenTopics","topic","partitions","writeString","encodePartition","partition","fetchOffset","logStartOffset","writeInt64"],"sources":["C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/kafkajs/src/protocol/requests/fetch/v7/request.js"],"sourcesContent":["const Encoder = require('../../../encoder')\nconst { Fetch: apiKey } = require('../../apiKeys')\nconst ISOLATION_LEVEL = require('../../../isolationLevel')\n\n/**\n * Sessions are only used by followers\n * @see https://cwiki.apache.org/confluence/display/KAFKA/KIP-227%3A+Introduce+Incremental+FetchRequests+to+Increase+Partition+Scalability\n */\n\n/**\n * Fetch Request (Version: 7) => replica_id max_wait_time min_bytes max_bytes isolation_level session_id session_epoch [topics] [forgotten_topics_data]\n *   replica_id => INT32\n *   max_wait_time => INT32\n *   min_bytes => INT32\n *   max_bytes => INT32\n *   isolation_level => INT8\n *   session_id => INT32\n *   session_epoch => INT32\n *   topics => topic [partitions]\n *     topic => STRING\n *     partitions => partition fetch_offset log_start_offset partition_max_bytes\n *       partition => INT32\n *       fetch_offset => INT64\n *       log_start_offset => INT64\n *       partition_max_bytes => INT32\n *   forgotten_topics_data => topic [partitions]\n *     topic => STRING\n *     partitions => INT32\n */\n\nmodule.exports = ({\n  replicaId,\n  maxWaitTime,\n  minBytes,\n  maxBytes,\n  topics,\n  isolationLevel = ISOLATION_LEVEL.READ_COMMITTED,\n  sessionId = 0,\n  sessionEpoch = -1,\n  forgottenTopics = [], // Topics to remove from the fetch session\n}) => ({\n  apiKey,\n  apiVersion: 7,\n  apiName: 'Fetch',\n  encode: async () => {\n    return new Encoder()\n      .writeInt32(replicaId)\n      .writeInt32(maxWaitTime)\n      .writeInt32(minBytes)\n      .writeInt32(maxBytes)\n      .writeInt8(isolationLevel)\n      .writeInt32(sessionId)\n      .writeInt32(sessionEpoch)\n      .writeArray(topics.map(encodeTopic))\n      .writeArray(forgottenTopics.map(encodeForgottenTopics))\n  },\n})\n\nconst encodeForgottenTopics = ({ topic, partitions }) => {\n  return new Encoder().writeString(topic).writeArray(partitions)\n}\n\nconst encodeTopic = ({ topic, partitions }) => {\n  return new Encoder().writeString(topic).writeArray(partitions.map(encodePartition))\n}\n\nconst encodePartition = ({ partition, fetchOffset, logStartOffset = -1, maxBytes }) => {\n  return new Encoder()\n    .writeInt32(partition)\n    .writeInt64(fetchOffset)\n    .writeInt64(logStartOffset)\n    .writeInt32(maxBytes)\n}\n"],"mappings":";AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAC3C,MAAM;EAAEC,KAAK,EAAEC;AAAO,CAAC,GAAGF,OAAO,CAAC,eAAe,CAAC;AAClD,MAAMG,eAAe,GAAGH,OAAO,CAAC,yBAAyB,CAAC;;AAE1D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAI,MAAM,CAACC,OAAO,GAAG,CAAC;EAChBC,SAAS;EACTC,WAAW;EACXC,QAAQ;EACRC,QAAQ;EACRC,MAAM;EACNC,cAAc,GAAGR,eAAe,CAACS,cAAc;EAC/CC,SAAS,GAAG,CAAC;EACbC,YAAY,GAAG,CAAC,CAAC;EACjBC,eAAe,GAAG,EAAE,CAAE;AACxB,CAAC,MAAM;EACLb,MAAM;EACNc,UAAU,EAAE,CAAC;EACbC,OAAO,EAAE,OAAO;EAChBC,MAAM;IAAA,6BAAE,aAAY;MAClB,OAAO,IAAInB,OAAO,EAAE,CACjBoB,UAAU,CAACb,SAAS,CAAC,CACrBa,UAAU,CAACZ,WAAW,CAAC,CACvBY,UAAU,CAACX,QAAQ,CAAC,CACpBW,UAAU,CAACV,QAAQ,CAAC,CACpBW,SAAS,CAACT,cAAc,CAAC,CACzBQ,UAAU,CAACN,SAAS,CAAC,CACrBM,UAAU,CAACL,YAAY,CAAC,CACxBO,UAAU,CAACX,MAAM,CAACY,GAAG,CAACC,WAAW,CAAC,CAAC,CACnCF,UAAU,CAACN,eAAe,CAACO,GAAG,CAACE,qBAAqB,CAAC,CAAC;IAC3D,CAAC;IAAA;MAAA;IAAA;EAAA;AACH,CAAC,CAAC;AAEF,MAAMA,qBAAqB,GAAG,CAAC;EAAEC,KAAK;EAAEC;AAAW,CAAC,KAAK;EACvD,OAAO,IAAI3B,OAAO,EAAE,CAAC4B,WAAW,CAACF,KAAK,CAAC,CAACJ,UAAU,CAACK,UAAU,CAAC;AAChE,CAAC;AAED,MAAMH,WAAW,GAAG,CAAC;EAAEE,KAAK;EAAEC;AAAW,CAAC,KAAK;EAC7C,OAAO,IAAI3B,OAAO,EAAE,CAAC4B,WAAW,CAACF,KAAK,CAAC,CAACJ,UAAU,CAACK,UAAU,CAACJ,GAAG,CAACM,eAAe,CAAC,CAAC;AACrF,CAAC;AAED,MAAMA,eAAe,GAAG,CAAC;EAAEC,SAAS;EAAEC,WAAW;EAAEC,cAAc,GAAG,CAAC,CAAC;EAAEtB;AAAS,CAAC,KAAK;EACrF,OAAO,IAAIV,OAAO,EAAE,CACjBoB,UAAU,CAACU,SAAS,CAAC,CACrBG,UAAU,CAACF,WAAW,CAAC,CACvBE,UAAU,CAACD,cAAc,CAAC,CAC1BZ,UAAU,CAACV,QAAQ,CAAC;AACzB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}