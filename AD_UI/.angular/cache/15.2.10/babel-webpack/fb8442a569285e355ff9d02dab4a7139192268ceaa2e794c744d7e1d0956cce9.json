{"ast":null,"code":"var _asyncToGenerator = require(\"C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nconst Decoder = require('../../../decoder');\nconst {\n  parse: parseV0\n} = require('../v0/response');\n\n/**\n * Metadata Response (Version: 1) => [brokers] controller_id [topic_metadata]\n *   brokers => node_id host port rack\n *     node_id => INT32\n *     host => STRING\n *     port => INT32\n *     rack => NULLABLE_STRING\n *   controller_id => INT32\n *   topic_metadata => topic_error_code topic is_internal [partition_metadata]\n *     topic_error_code => INT16\n *     topic => STRING\n *     is_internal => BOOLEAN\n *     partition_metadata => partition_error_code partition_id leader [replicas] [isr]\n *       partition_error_code => INT16\n *       partition_id => INT32\n *       leader => INT32\n *       replicas => INT32\n *       isr => INT32\n */\n\nconst broker = decoder => ({\n  nodeId: decoder.readInt32(),\n  host: decoder.readString(),\n  port: decoder.readInt32(),\n  rack: decoder.readString()\n});\nconst topicMetadata = decoder => ({\n  topicErrorCode: decoder.readInt16(),\n  topic: decoder.readString(),\n  isInternal: decoder.readBoolean(),\n  partitionMetadata: decoder.readArray(partitionMetadata)\n});\nconst partitionMetadata = decoder => ({\n  partitionErrorCode: decoder.readInt16(),\n  partitionId: decoder.readInt32(),\n  leader: decoder.readInt32(),\n  replicas: decoder.readArray(d => d.readInt32()),\n  isr: decoder.readArray(d => d.readInt32())\n});\nconst decode = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (rawData) {\n    const decoder = new Decoder(rawData);\n    return {\n      brokers: decoder.readArray(broker),\n      controllerId: decoder.readInt32(),\n      topicMetadata: decoder.readArray(topicMetadata)\n    };\n  });\n  return function decode(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nmodule.exports = {\n  decode,\n  parse: parseV0\n};","map":{"version":3,"names":["Decoder","require","parse","parseV0","broker","decoder","nodeId","readInt32","host","readString","port","rack","topicMetadata","topicErrorCode","readInt16","topic","isInternal","readBoolean","partitionMetadata","readArray","partitionErrorCode","partitionId","leader","replicas","d","isr","decode","rawData","brokers","controllerId","module","exports"],"sources":["C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/kafkajs/src/protocol/requests/metadata/v1/response.js"],"sourcesContent":["const Decoder = require('../../../decoder')\nconst { parse: parseV0 } = require('../v0/response')\n\n/**\n * Metadata Response (Version: 1) => [brokers] controller_id [topic_metadata]\n *   brokers => node_id host port rack\n *     node_id => INT32\n *     host => STRING\n *     port => INT32\n *     rack => NULLABLE_STRING\n *   controller_id => INT32\n *   topic_metadata => topic_error_code topic is_internal [partition_metadata]\n *     topic_error_code => INT16\n *     topic => STRING\n *     is_internal => BOOLEAN\n *     partition_metadata => partition_error_code partition_id leader [replicas] [isr]\n *       partition_error_code => INT16\n *       partition_id => INT32\n *       leader => INT32\n *       replicas => INT32\n *       isr => INT32\n */\n\nconst broker = decoder => ({\n  nodeId: decoder.readInt32(),\n  host: decoder.readString(),\n  port: decoder.readInt32(),\n  rack: decoder.readString(),\n})\n\nconst topicMetadata = decoder => ({\n  topicErrorCode: decoder.readInt16(),\n  topic: decoder.readString(),\n  isInternal: decoder.readBoolean(),\n  partitionMetadata: decoder.readArray(partitionMetadata),\n})\n\nconst partitionMetadata = decoder => ({\n  partitionErrorCode: decoder.readInt16(),\n  partitionId: decoder.readInt32(),\n  leader: decoder.readInt32(),\n  replicas: decoder.readArray(d => d.readInt32()),\n  isr: decoder.readArray(d => d.readInt32()),\n})\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData)\n  return {\n    brokers: decoder.readArray(broker),\n    controllerId: decoder.readInt32(),\n    topicMetadata: decoder.readArray(topicMetadata),\n  }\n}\n\nmodule.exports = {\n  decode,\n  parse: parseV0,\n}\n"],"mappings":";AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAC3C,MAAM;EAAEC,KAAK,EAAEC;AAAQ,CAAC,GAAGF,OAAO,CAAC,gBAAgB,CAAC;;AAEpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMG,MAAM,GAAGC,OAAO,KAAK;EACzBC,MAAM,EAAED,OAAO,CAACE,SAAS,EAAE;EAC3BC,IAAI,EAAEH,OAAO,CAACI,UAAU,EAAE;EAC1BC,IAAI,EAAEL,OAAO,CAACE,SAAS,EAAE;EACzBI,IAAI,EAAEN,OAAO,CAACI,UAAU;AAC1B,CAAC,CAAC;AAEF,MAAMG,aAAa,GAAGP,OAAO,KAAK;EAChCQ,cAAc,EAAER,OAAO,CAACS,SAAS,EAAE;EACnCC,KAAK,EAAEV,OAAO,CAACI,UAAU,EAAE;EAC3BO,UAAU,EAAEX,OAAO,CAACY,WAAW,EAAE;EACjCC,iBAAiB,EAAEb,OAAO,CAACc,SAAS,CAACD,iBAAiB;AACxD,CAAC,CAAC;AAEF,MAAMA,iBAAiB,GAAGb,OAAO,KAAK;EACpCe,kBAAkB,EAAEf,OAAO,CAACS,SAAS,EAAE;EACvCO,WAAW,EAAEhB,OAAO,CAACE,SAAS,EAAE;EAChCe,MAAM,EAAEjB,OAAO,CAACE,SAAS,EAAE;EAC3BgB,QAAQ,EAAElB,OAAO,CAACc,SAAS,CAACK,CAAC,IAAIA,CAAC,CAACjB,SAAS,EAAE,CAAC;EAC/CkB,GAAG,EAAEpB,OAAO,CAACc,SAAS,CAACK,CAAC,IAAIA,CAAC,CAACjB,SAAS,EAAE;AAC3C,CAAC,CAAC;AAEF,MAAMmB,MAAM;EAAA,6BAAG,WAAMC,OAAO,EAAI;IAC9B,MAAMtB,OAAO,GAAG,IAAIL,OAAO,CAAC2B,OAAO,CAAC;IACpC,OAAO;MACLC,OAAO,EAAEvB,OAAO,CAACc,SAAS,CAACf,MAAM,CAAC;MAClCyB,YAAY,EAAExB,OAAO,CAACE,SAAS,EAAE;MACjCK,aAAa,EAAEP,OAAO,CAACc,SAAS,CAACP,aAAa;IAChD,CAAC;EACH,CAAC;EAAA,gBAPKc,MAAM;IAAA;EAAA;AAAA,GAOX;AAEDI,MAAM,CAACC,OAAO,GAAG;EACfL,MAAM;EACNxB,KAAK,EAAEC;AACT,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}