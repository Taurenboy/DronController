{"ast":null,"code":"var _asyncToGenerator = require(\"C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n/**\n * https://tools.ietf.org/html/rfc5802\n *\n * First, the client sends the \"client-first-message\" containing:\n *\n *  -> a GS2 header consisting of a flag indicating whether channel\n * binding is supported-but-not-used, not supported, or used, and an\n * optional SASL authorization identity;\n *\n *  -> SCRAM username and a random, unique nonce attributes.\n *\n * Note that the client's first message will always start with \"n\", \"y\",\n * or \"p\"; otherwise, the message is invalid and authentication MUST\n * fail.  This is important, as it allows for GS2 extensibility (e.g.,\n * to add support for security layers).\n */\n\nconst Encoder = require('../../../encoder');\nmodule.exports = ({\n  clientFirstMessage\n}) => ({\n  encode: function () {\n    var _ref = _asyncToGenerator(function* () {\n      return new Encoder().writeBytes(clientFirstMessage).buffer;\n    });\n    return function encode() {\n      return _ref.apply(this, arguments);\n    };\n  }()\n});","map":{"version":3,"names":["Encoder","require","module","exports","clientFirstMessage","encode","writeBytes","buffer"],"sources":["C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/kafkajs/src/protocol/sasl/scram/firstMessage/request.js"],"sourcesContent":["/**\n * https://tools.ietf.org/html/rfc5802\n *\n * First, the client sends the \"client-first-message\" containing:\n *\n *  -> a GS2 header consisting of a flag indicating whether channel\n * binding is supported-but-not-used, not supported, or used, and an\n * optional SASL authorization identity;\n *\n *  -> SCRAM username and a random, unique nonce attributes.\n *\n * Note that the client's first message will always start with \"n\", \"y\",\n * or \"p\"; otherwise, the message is invalid and authentication MUST\n * fail.  This is important, as it allows for GS2 extensibility (e.g.,\n * to add support for security layers).\n */\n\nconst Encoder = require('../../../encoder')\n\nmodule.exports = ({ clientFirstMessage }) => ({\n  encode: async () => new Encoder().writeBytes(clientFirstMessage).buffer,\n})\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAE3CC,MAAM,CAACC,OAAO,GAAG,CAAC;EAAEC;AAAmB,CAAC,MAAM;EAC5CC,MAAM;IAAA,6BAAE;MAAA,OAAY,IAAIL,OAAO,EAAE,CAACM,UAAU,CAACF,kBAAkB,CAAC,CAACG,MAAM;IAAA;IAAA;MAAA;IAAA;EAAA;AACzE,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}