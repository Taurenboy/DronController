{"ast":null,"code":"var _asyncToGenerator = require(\"C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nconst seq = require('../utils/seq');\nconst createFetcher = require('./fetcher');\nconst createWorker = require('./worker');\nconst createWorkerQueue = require('./workerQueue');\nconst {\n  KafkaJSFetcherRebalanceError,\n  KafkaJSNoBrokerAvailableError\n} = require('../errors');\n\n/** @typedef {ReturnType<typeof createFetchManager>} FetchManager */\n\n/**\n * @param {object} options\n * @param {import('../../types').Logger} options.logger\n * @param {() => number[]} options.getNodeIds\n * @param {(nodeId: number) => Promise<import('../../types').Batch[]>} options.fetch\n * @param {import('./worker').Handler<T>} options.handler\n * @param {number} [options.concurrency]\n * @template T\n */\nconst createFetchManager = ({\n  logger: rootLogger,\n  getNodeIds,\n  fetch,\n  handler,\n  concurrency = 1\n}) => {\n  const logger = rootLogger.namespace('FetchManager');\n  const workers = seq(concurrency, workerId => createWorker({\n    handler,\n    workerId\n  }));\n  const workerQueue = createWorkerQueue({\n    workers\n  });\n  let fetchers = [];\n  const getFetchers = () => fetchers;\n  const createFetchers = () => {\n    const nodeIds = getNodeIds();\n    const partitionAssignments = new Map();\n    if (nodeIds.length === 0) {\n      throw new KafkaJSNoBrokerAvailableError();\n    }\n    const validateShouldRebalance = () => {\n      const current = getNodeIds();\n      const hasChanged = nodeIds.length !== current.length || nodeIds.some(nodeId => !current.includes(nodeId));\n      if (hasChanged && current.length !== 0) {\n        throw new KafkaJSFetcherRebalanceError();\n      }\n    };\n    const fetchers = nodeIds.map(nodeId => createFetcher({\n      nodeId,\n      workerQueue,\n      partitionAssignments,\n      fetch: function () {\n        var _ref = _asyncToGenerator(function* (nodeId) {\n          validateShouldRebalance();\n          return fetch(nodeId);\n        });\n        return function fetch(_x) {\n          return _ref.apply(this, arguments);\n        };\n      }(),\n      logger\n    }));\n    logger.debug(`Created ${fetchers.length} fetchers`, {\n      nodeIds,\n      concurrency\n    });\n    return fetchers;\n  };\n  const start = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      logger.debug('Starting...');\n      while (true) {\n        fetchers = createFetchers();\n        try {\n          yield Promise.all(fetchers.map(fetcher => fetcher.start()));\n        } catch (error) {\n          yield stop();\n          if (error instanceof KafkaJSFetcherRebalanceError) {\n            logger.debug('Rebalancing fetchers...');\n            continue;\n          }\n          throw error;\n        }\n        break;\n      }\n    });\n    return function start() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  const stop = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator(function* () {\n      logger.debug('Stopping fetchers...');\n      yield Promise.all(fetchers.map(fetcher => fetcher.stop()));\n      logger.debug('Stopped fetchers');\n    });\n    return function stop() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  return {\n    start,\n    stop,\n    getFetchers\n  };\n};\nmodule.exports = createFetchManager;","map":{"version":3,"names":["seq","require","createFetcher","createWorker","createWorkerQueue","KafkaJSFetcherRebalanceError","KafkaJSNoBrokerAvailableError","createFetchManager","logger","rootLogger","getNodeIds","fetch","handler","concurrency","namespace","workers","workerId","workerQueue","fetchers","getFetchers","createFetchers","nodeIds","partitionAssignments","Map","length","validateShouldRebalance","current","hasChanged","some","nodeId","includes","map","debug","start","Promise","all","fetcher","error","stop","module","exports"],"sources":["C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/kafkajs/src/consumer/fetchManager.js"],"sourcesContent":["const seq = require('../utils/seq')\nconst createFetcher = require('./fetcher')\nconst createWorker = require('./worker')\nconst createWorkerQueue = require('./workerQueue')\nconst { KafkaJSFetcherRebalanceError, KafkaJSNoBrokerAvailableError } = require('../errors')\n\n/** @typedef {ReturnType<typeof createFetchManager>} FetchManager */\n\n/**\n * @param {object} options\n * @param {import('../../types').Logger} options.logger\n * @param {() => number[]} options.getNodeIds\n * @param {(nodeId: number) => Promise<import('../../types').Batch[]>} options.fetch\n * @param {import('./worker').Handler<T>} options.handler\n * @param {number} [options.concurrency]\n * @template T\n */\nconst createFetchManager = ({\n  logger: rootLogger,\n  getNodeIds,\n  fetch,\n  handler,\n  concurrency = 1,\n}) => {\n  const logger = rootLogger.namespace('FetchManager')\n  const workers = seq(concurrency, workerId => createWorker({ handler, workerId }))\n  const workerQueue = createWorkerQueue({ workers })\n\n  let fetchers = []\n\n  const getFetchers = () => fetchers\n\n  const createFetchers = () => {\n    const nodeIds = getNodeIds()\n    const partitionAssignments = new Map()\n\n    if (nodeIds.length === 0) {\n      throw new KafkaJSNoBrokerAvailableError()\n    }\n\n    const validateShouldRebalance = () => {\n      const current = getNodeIds()\n      const hasChanged =\n        nodeIds.length !== current.length || nodeIds.some(nodeId => !current.includes(nodeId))\n      if (hasChanged && current.length !== 0) {\n        throw new KafkaJSFetcherRebalanceError()\n      }\n    }\n\n    const fetchers = nodeIds.map(nodeId =>\n      createFetcher({\n        nodeId,\n        workerQueue,\n        partitionAssignments,\n        fetch: async nodeId => {\n          validateShouldRebalance()\n          return fetch(nodeId)\n        },\n        logger,\n      })\n    )\n\n    logger.debug(`Created ${fetchers.length} fetchers`, { nodeIds, concurrency })\n    return fetchers\n  }\n\n  const start = async () => {\n    logger.debug('Starting...')\n\n    while (true) {\n      fetchers = createFetchers()\n\n      try {\n        await Promise.all(fetchers.map(fetcher => fetcher.start()))\n      } catch (error) {\n        await stop()\n\n        if (error instanceof KafkaJSFetcherRebalanceError) {\n          logger.debug('Rebalancing fetchers...')\n          continue\n        }\n\n        throw error\n      }\n\n      break\n    }\n  }\n\n  const stop = async () => {\n    logger.debug('Stopping fetchers...')\n    await Promise.all(fetchers.map(fetcher => fetcher.stop()))\n    logger.debug('Stopped fetchers')\n  }\n\n  return { start, stop, getFetchers }\n}\n\nmodule.exports = createFetchManager\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}