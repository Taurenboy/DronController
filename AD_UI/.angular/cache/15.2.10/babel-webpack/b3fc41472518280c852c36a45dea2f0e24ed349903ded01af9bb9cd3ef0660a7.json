{"ast":null,"code":"var _asyncToGenerator = require(\"C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nconst Long = require('../../../../utils/long');\nconst Encoder = require('../../../encoder');\nconst {\n  Produce: apiKey\n} = require('../../apiKeys');\nconst {\n  Types\n} = require('../../../message/compression');\nconst Record = require('../../../recordBatch/record/v0');\nconst {\n  RecordBatch\n} = require('../../../recordBatch/v0');\n\n/**\n * Produce Request (Version: 3) => transactional_id acks timeout [topic_data]\n *   transactional_id => NULLABLE_STRING\n *   acks => INT16\n *   timeout => INT32\n *   topic_data => topic [data]\n *     topic => STRING\n *     data => partition record_set\n *       partition => INT32\n *       record_set => RECORDS\n */\n\n/**\n * @param [transactionalId=null] {String} The transactional id or null if the producer is not transactional\n * @param acks {Integer} See producer request v0\n * @param timeout {Integer} See producer request v0\n * @param [compression=CompressionTypes.None] {CompressionTypes}\n * @param topicData {Array}\n */\nmodule.exports = ({\n  acks,\n  timeout,\n  transactionalId = null,\n  producerId = Long.fromInt(-1),\n  producerEpoch = 0,\n  compression = Types.None,\n  topicData\n}) => ({\n  apiKey,\n  apiVersion: 3,\n  apiName: 'Produce',\n  expectResponse: () => acks !== 0,\n  encode: function () {\n    var _ref = _asyncToGenerator(function* () {\n      const encodeTopic = topicEncoder(compression);\n      const encodedTopicData = [];\n      for (const data of topicData) {\n        encodedTopicData.push(yield encodeTopic({\n          ...data,\n          transactionalId,\n          producerId,\n          producerEpoch\n        }));\n      }\n      return new Encoder().writeString(transactionalId).writeInt16(acks).writeInt32(timeout).writeArray(encodedTopicData);\n    });\n    return function encode() {\n      return _ref.apply(this, arguments);\n    };\n  }()\n});\nconst topicEncoder = compression => /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(function* ({\n    topic,\n    partitions,\n    transactionalId,\n    producerId,\n    producerEpoch\n  }) {\n    const encodePartitions = partitionsEncoder(compression);\n    const encodedPartitions = [];\n    for (const data of partitions) {\n      encodedPartitions.push(yield encodePartitions({\n        ...data,\n        transactionalId,\n        producerId,\n        producerEpoch\n      }));\n    }\n    return new Encoder().writeString(topic).writeArray(encodedPartitions);\n  });\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nconst partitionsEncoder = compression => /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator(function* ({\n    partition,\n    messages,\n    transactionalId,\n    firstSequence,\n    producerId,\n    producerEpoch\n  }) {\n    const dateNow = Date.now();\n    const messageTimestamps = messages.map(m => m.timestamp).filter(timestamp => timestamp != null).sort();\n    const timestamps = messageTimestamps.length === 0 ? [dateNow] : messageTimestamps;\n    const firstTimestamp = timestamps[0];\n    const maxTimestamp = timestamps[timestamps.length - 1];\n    const records = messages.map((message, i) => Record({\n      ...message,\n      offsetDelta: i,\n      timestampDelta: (message.timestamp || dateNow) - firstTimestamp\n    }));\n    const recordBatch = yield RecordBatch({\n      compression,\n      records,\n      firstTimestamp,\n      maxTimestamp,\n      producerId,\n      producerEpoch,\n      firstSequence,\n      transactional: !!transactionalId,\n      lastOffsetDelta: records.length - 1\n    });\n    return new Encoder().writeInt32(partition).writeInt32(recordBatch.size()).writeEncoder(recordBatch);\n  });\n  return function (_x2) {\n    return _ref3.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["Long","require","Encoder","Produce","apiKey","Types","Record","RecordBatch","module","exports","acks","timeout","transactionalId","producerId","fromInt","producerEpoch","compression","None","topicData","apiVersion","apiName","expectResponse","encode","encodeTopic","topicEncoder","encodedTopicData","data","push","writeString","writeInt16","writeInt32","writeArray","topic","partitions","encodePartitions","partitionsEncoder","encodedPartitions","partition","messages","firstSequence","dateNow","Date","now","messageTimestamps","map","m","timestamp","filter","sort","timestamps","length","firstTimestamp","maxTimestamp","records","message","i","offsetDelta","timestampDelta","recordBatch","transactional","lastOffsetDelta","size","writeEncoder"],"sources":["C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/kafkajs/src/protocol/requests/produce/v3/request.js"],"sourcesContent":["const Long = require('../../../../utils/long')\nconst Encoder = require('../../../encoder')\nconst { Produce: apiKey } = require('../../apiKeys')\nconst { Types } = require('../../../message/compression')\nconst Record = require('../../../recordBatch/record/v0')\nconst { RecordBatch } = require('../../../recordBatch/v0')\n\n/**\n * Produce Request (Version: 3) => transactional_id acks timeout [topic_data]\n *   transactional_id => NULLABLE_STRING\n *   acks => INT16\n *   timeout => INT32\n *   topic_data => topic [data]\n *     topic => STRING\n *     data => partition record_set\n *       partition => INT32\n *       record_set => RECORDS\n */\n\n/**\n * @param [transactionalId=null] {String} The transactional id or null if the producer is not transactional\n * @param acks {Integer} See producer request v0\n * @param timeout {Integer} See producer request v0\n * @param [compression=CompressionTypes.None] {CompressionTypes}\n * @param topicData {Array}\n */\nmodule.exports = ({\n  acks,\n  timeout,\n  transactionalId = null,\n  producerId = Long.fromInt(-1),\n  producerEpoch = 0,\n  compression = Types.None,\n  topicData,\n}) => ({\n  apiKey,\n  apiVersion: 3,\n  apiName: 'Produce',\n  expectResponse: () => acks !== 0,\n  encode: async () => {\n    const encodeTopic = topicEncoder(compression)\n    const encodedTopicData = []\n\n    for (const data of topicData) {\n      encodedTopicData.push(\n        await encodeTopic({ ...data, transactionalId, producerId, producerEpoch })\n      )\n    }\n\n    return new Encoder()\n      .writeString(transactionalId)\n      .writeInt16(acks)\n      .writeInt32(timeout)\n      .writeArray(encodedTopicData)\n  },\n})\n\nconst topicEncoder = compression => async ({\n  topic,\n  partitions,\n  transactionalId,\n  producerId,\n  producerEpoch,\n}) => {\n  const encodePartitions = partitionsEncoder(compression)\n  const encodedPartitions = []\n\n  for (const data of partitions) {\n    encodedPartitions.push(\n      await encodePartitions({ ...data, transactionalId, producerId, producerEpoch })\n    )\n  }\n\n  return new Encoder().writeString(topic).writeArray(encodedPartitions)\n}\n\nconst partitionsEncoder = compression => async ({\n  partition,\n  messages,\n  transactionalId,\n  firstSequence,\n  producerId,\n  producerEpoch,\n}) => {\n  const dateNow = Date.now()\n  const messageTimestamps = messages\n    .map(m => m.timestamp)\n    .filter(timestamp => timestamp != null)\n    .sort()\n\n  const timestamps = messageTimestamps.length === 0 ? [dateNow] : messageTimestamps\n  const firstTimestamp = timestamps[0]\n  const maxTimestamp = timestamps[timestamps.length - 1]\n\n  const records = messages.map((message, i) =>\n    Record({\n      ...message,\n      offsetDelta: i,\n      timestampDelta: (message.timestamp || dateNow) - firstTimestamp,\n    })\n  )\n\n  const recordBatch = await RecordBatch({\n    compression,\n    records,\n    firstTimestamp,\n    maxTimestamp,\n    producerId,\n    producerEpoch,\n    firstSequence,\n    transactional: !!transactionalId,\n    lastOffsetDelta: records.length - 1,\n  })\n\n  return new Encoder()\n    .writeInt32(partition)\n    .writeInt32(recordBatch.size())\n    .writeEncoder(recordBatch)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}