{"ast":null,"code":"var _asyncToGenerator = require(\"C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n/**\n * http://www.ietf.org/rfc/rfc5801.txt\n *\n * See org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerClientInitialResponse\n * for official Java client implementation.\n *\n * The mechanism consists of a message from the client to the server.\n * The client sends the \"n,\"\" GS header, followed by the authorizationIdentitty\n * prefixed by \"a=\" (if present), followed by \",\", followed by a US-ASCII SOH\n * character, followed by \"auth=Bearer \", followed by the token value, followed\n * by US-ASCII SOH character, followed by SASL extensions in OAuth \"friendly\"\n * format and then closed by two additionals US-ASCII SOH characters.\n *\n * SASL extensions are optional an must be expressed as key-value pairs in an\n * object. Each expression is converted as, the extension entry key, followed\n * by \"=\", followed by extension entry value. Each extension is separated by a\n * US-ASCII SOH character. If extensions are not present, their relative part\n * in the message, including the US-ASCII SOH character, is omitted.\n *\n * The client may leave the authorization identity empty to\n * indicate that it is the same as the authentication identity.\n *\n * The server will verify the authentication token and verify that the\n * authentication credentials permit the client to login as the authorization\n * identity. If both steps succeed, the user is logged in.\n */\n\nconst Encoder = require('../../encoder');\nconst SEPARATOR = '\\u0001'; // SOH - Start Of Header ASCII\n\nfunction formatExtensions(extensions) {\n  let msg = '';\n  if (extensions == null) {\n    return msg;\n  }\n  let prefix = '';\n  for (const k in extensions) {\n    msg += `${prefix}${k}=${extensions[k]}`;\n    prefix = SEPARATOR;\n  }\n  return msg;\n}\nmodule.exports = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* ({\n    authorizationIdentity = null\n  }, oauthBearerToken) {\n    const authzid = authorizationIdentity == null ? '' : `\"a=${authorizationIdentity}`;\n    let ext = formatExtensions(oauthBearerToken.extensions);\n    if (ext.length > 0) {\n      ext = `${SEPARATOR}${ext}`;\n    }\n    const oauthMsg = `n,${authzid},${SEPARATOR}auth=Bearer ${oauthBearerToken.value}${ext}${SEPARATOR}${SEPARATOR}`;\n    return {\n      encode: function () {\n        var _ref2 = _asyncToGenerator(function* () {\n          return new Encoder().writeBytes(Buffer.from(oauthMsg)).buffer;\n        });\n        return function encode() {\n          return _ref2.apply(this, arguments);\n        };\n      }()\n    };\n  });\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["Encoder","require","SEPARATOR","formatExtensions","extensions","msg","prefix","k","module","exports","authorizationIdentity","oauthBearerToken","authzid","ext","length","oauthMsg","value","encode","writeBytes","Buffer","from","buffer"],"sources":["C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/kafkajs/src/protocol/sasl/oauthBearer/request.js"],"sourcesContent":["/**\n * http://www.ietf.org/rfc/rfc5801.txt\n *\n * See org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerClientInitialResponse\n * for official Java client implementation.\n *\n * The mechanism consists of a message from the client to the server.\n * The client sends the \"n,\"\" GS header, followed by the authorizationIdentitty\n * prefixed by \"a=\" (if present), followed by \",\", followed by a US-ASCII SOH\n * character, followed by \"auth=Bearer \", followed by the token value, followed\n * by US-ASCII SOH character, followed by SASL extensions in OAuth \"friendly\"\n * format and then closed by two additionals US-ASCII SOH characters.\n *\n * SASL extensions are optional an must be expressed as key-value pairs in an\n * object. Each expression is converted as, the extension entry key, followed\n * by \"=\", followed by extension entry value. Each extension is separated by a\n * US-ASCII SOH character. If extensions are not present, their relative part\n * in the message, including the US-ASCII SOH character, is omitted.\n *\n * The client may leave the authorization identity empty to\n * indicate that it is the same as the authentication identity.\n *\n * The server will verify the authentication token and verify that the\n * authentication credentials permit the client to login as the authorization\n * identity. If both steps succeed, the user is logged in.\n */\n\nconst Encoder = require('../../encoder')\n\nconst SEPARATOR = '\\u0001' // SOH - Start Of Header ASCII\n\nfunction formatExtensions(extensions) {\n  let msg = ''\n\n  if (extensions == null) {\n    return msg\n  }\n\n  let prefix = ''\n  for (const k in extensions) {\n    msg += `${prefix}${k}=${extensions[k]}`\n    prefix = SEPARATOR\n  }\n\n  return msg\n}\n\nmodule.exports = async ({ authorizationIdentity = null }, oauthBearerToken) => {\n  const authzid = authorizationIdentity == null ? '' : `\"a=${authorizationIdentity}`\n  let ext = formatExtensions(oauthBearerToken.extensions)\n  if (ext.length > 0) {\n    ext = `${SEPARATOR}${ext}`\n  }\n\n  const oauthMsg = `n,${authzid},${SEPARATOR}auth=Bearer ${oauthBearerToken.value}${ext}${SEPARATOR}${SEPARATOR}`\n\n  return {\n    encode: async () => {\n      return new Encoder().writeBytes(Buffer.from(oauthMsg)).buffer\n    },\n  }\n}\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,eAAe,CAAC;AAExC,MAAMC,SAAS,GAAG,QAAQ,EAAC;;AAE3B,SAASC,gBAAgB,CAACC,UAAU,EAAE;EACpC,IAAIC,GAAG,GAAG,EAAE;EAEZ,IAAID,UAAU,IAAI,IAAI,EAAE;IACtB,OAAOC,GAAG;EACZ;EAEA,IAAIC,MAAM,GAAG,EAAE;EACf,KAAK,MAAMC,CAAC,IAAIH,UAAU,EAAE;IAC1BC,GAAG,IAAK,GAAEC,MAAO,GAAEC,CAAE,IAAGH,UAAU,CAACG,CAAC,CAAE,EAAC;IACvCD,MAAM,GAAGJ,SAAS;EACpB;EAEA,OAAOG,GAAG;AACZ;AAEAG,MAAM,CAACC,OAAO;EAAA,6BAAG,WAAO;IAAEC,qBAAqB,GAAG;EAAK,CAAC,EAAEC,gBAAgB,EAAK;IAC7E,MAAMC,OAAO,GAAGF,qBAAqB,IAAI,IAAI,GAAG,EAAE,GAAI,MAAKA,qBAAsB,EAAC;IAClF,IAAIG,GAAG,GAAGV,gBAAgB,CAACQ,gBAAgB,CAACP,UAAU,CAAC;IACvD,IAAIS,GAAG,CAACC,MAAM,GAAG,CAAC,EAAE;MAClBD,GAAG,GAAI,GAAEX,SAAU,GAAEW,GAAI,EAAC;IAC5B;IAEA,MAAME,QAAQ,GAAI,KAAIH,OAAQ,IAAGV,SAAU,eAAcS,gBAAgB,CAACK,KAAM,GAAEH,GAAI,GAAEX,SAAU,GAAEA,SAAU,EAAC;IAE/G,OAAO;MACLe,MAAM;QAAA,8BAAE,aAAY;UAClB,OAAO,IAAIjB,OAAO,EAAE,CAACkB,UAAU,CAACC,MAAM,CAACC,IAAI,CAACL,QAAQ,CAAC,CAAC,CAACM,MAAM;QAC/D,CAAC;QAAA;UAAA;QAAA;MAAA;IACH,CAAC;EACH,CAAC;EAAA;IAAA;EAAA;AAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}