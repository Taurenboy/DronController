{"ast":null,"code":"var _asyncToGenerator = require(\"C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nconst createSendMessages = require('./sendMessages');\nconst {\n  KafkaJSError,\n  KafkaJSNonRetriableError\n} = require('../errors');\nconst {\n  CONNECTION_STATUS\n} = require('../network/connectionStatus');\nmodule.exports = ({\n  logger,\n  cluster,\n  partitioner,\n  eosManager,\n  idempotent,\n  retrier,\n  getConnectionStatus\n}) => {\n  const sendMessages = createSendMessages({\n    logger,\n    cluster,\n    retrier,\n    partitioner,\n    eosManager\n  });\n  const validateConnectionStatus = () => {\n    const connectionStatus = getConnectionStatus();\n    switch (connectionStatus) {\n      case CONNECTION_STATUS.DISCONNECTING:\n        throw new KafkaJSNonRetriableError(`The producer is disconnecting; therefore, it can't safely accept messages anymore`);\n      case CONNECTION_STATUS.DISCONNECTED:\n        throw new KafkaJSError('The producer is disconnected');\n    }\n  };\n\n  /**\n   * @typedef {Object} TopicMessages\n   * @property {string} topic\n   * @property {Array} messages An array of objects with \"key\" and \"value\", example:\n   *                         [{ key: 'my-key', value: 'my-value'}]\n   *\n   * @typedef {Object} SendBatchRequest\n   * @property {Array<TopicMessages>} topicMessages\n   * @property {number} [acks=-1] Control the number of required acks.\n   *                           -1 = all replicas must acknowledge\n   *                            0 = no acknowledgments\n   *                            1 = only waits for the leader to acknowledge\n   *\n   * @property {number} [timeout=30000] The time to await a response in ms\n   * @property {Compression.Types} [compression=Compression.Types.None] Compression codec\n   *\n   * @param {SendBatchRequest}\n   * @returns {Promise}\n   */\n  const sendBatch = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* ({\n      acks = -1,\n      timeout,\n      compression,\n      topicMessages = []\n    }) {\n      if (topicMessages.some(({\n        topic\n      }) => !topic)) {\n        throw new KafkaJSNonRetriableError(`Invalid topic`);\n      }\n      if (idempotent && acks !== -1) {\n        throw new KafkaJSNonRetriableError(`Not requiring ack for all messages invalidates the idempotent producer's EoS guarantees`);\n      }\n      for (const {\n        topic,\n        messages\n      } of topicMessages) {\n        if (!messages) {\n          throw new KafkaJSNonRetriableError(`Invalid messages array [${messages}] for topic \"${topic}\"`);\n        }\n        const messageWithoutValue = messages.find(message => message.value === undefined);\n        if (messageWithoutValue) {\n          throw new KafkaJSNonRetriableError(`Invalid message without value for topic \"${topic}\": ${JSON.stringify(messageWithoutValue)}`);\n        }\n      }\n      validateConnectionStatus();\n      const mergedTopicMessages = topicMessages.reduce((merged, {\n        topic,\n        messages\n      }) => {\n        const index = merged.findIndex(({\n          topic: mergedTopic\n        }) => topic === mergedTopic);\n        if (index === -1) {\n          merged.push({\n            topic,\n            messages\n          });\n        } else {\n          merged[index].messages = [...merged[index].messages, ...messages];\n        }\n        return merged;\n      }, []);\n      return yield sendMessages({\n        acks,\n        timeout,\n        compression,\n        topicMessages: mergedTopicMessages\n      });\n    });\n    return function sendBatch(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  /**\n   * @param {ProduceRequest} ProduceRequest\n   * @returns {Promise}\n   *\n   * @typedef {Object} ProduceRequest\n   * @property {string} topic\n   * @property {Array} messages An array of objects with \"key\" and \"value\", example:\n   *                         [{ key: 'my-key', value: 'my-value'}]\n   * @property {number} [acks=-1] Control the number of required acks.\n   *                           -1 = all replicas must acknowledge\n   *                            0 = no acknowledgments\n   *                            1 = only waits for the leader to acknowledge\n   * @property {number} [timeout=30000] The time to await a response in ms\n   * @property {Compression.Types} [compression=Compression.Types.None] Compression codec\n   */\n  const send = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator(function* ({\n      acks,\n      timeout,\n      compression,\n      topic,\n      messages\n    }) {\n      const topicMessage = {\n        topic,\n        messages\n      };\n      return sendBatch({\n        acks,\n        timeout,\n        compression,\n        topicMessages: [topicMessage]\n      });\n    });\n    return function send(_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  return {\n    send,\n    sendBatch\n  };\n};","map":{"version":3,"names":["createSendMessages","require","KafkaJSError","KafkaJSNonRetriableError","CONNECTION_STATUS","module","exports","logger","cluster","partitioner","eosManager","idempotent","retrier","getConnectionStatus","sendMessages","validateConnectionStatus","connectionStatus","DISCONNECTING","DISCONNECTED","sendBatch","acks","timeout","compression","topicMessages","some","topic","messages","messageWithoutValue","find","message","value","undefined","JSON","stringify","mergedTopicMessages","reduce","merged","index","findIndex","mergedTopic","push","send","topicMessage"],"sources":["C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/kafkajs/src/producer/messageProducer.js"],"sourcesContent":["const createSendMessages = require('./sendMessages')\nconst { KafkaJSError, KafkaJSNonRetriableError } = require('../errors')\nconst { CONNECTION_STATUS } = require('../network/connectionStatus')\n\nmodule.exports = ({\n  logger,\n  cluster,\n  partitioner,\n  eosManager,\n  idempotent,\n  retrier,\n  getConnectionStatus,\n}) => {\n  const sendMessages = createSendMessages({\n    logger,\n    cluster,\n    retrier,\n    partitioner,\n    eosManager,\n  })\n\n  const validateConnectionStatus = () => {\n    const connectionStatus = getConnectionStatus()\n\n    switch (connectionStatus) {\n      case CONNECTION_STATUS.DISCONNECTING:\n        throw new KafkaJSNonRetriableError(\n          `The producer is disconnecting; therefore, it can't safely accept messages anymore`\n        )\n      case CONNECTION_STATUS.DISCONNECTED:\n        throw new KafkaJSError('The producer is disconnected')\n    }\n  }\n\n  /**\n   * @typedef {Object} TopicMessages\n   * @property {string} topic\n   * @property {Array} messages An array of objects with \"key\" and \"value\", example:\n   *                         [{ key: 'my-key', value: 'my-value'}]\n   *\n   * @typedef {Object} SendBatchRequest\n   * @property {Array<TopicMessages>} topicMessages\n   * @property {number} [acks=-1] Control the number of required acks.\n   *                           -1 = all replicas must acknowledge\n   *                            0 = no acknowledgments\n   *                            1 = only waits for the leader to acknowledge\n   *\n   * @property {number} [timeout=30000] The time to await a response in ms\n   * @property {Compression.Types} [compression=Compression.Types.None] Compression codec\n   *\n   * @param {SendBatchRequest}\n   * @returns {Promise}\n   */\n  const sendBatch = async ({ acks = -1, timeout, compression, topicMessages = [] }) => {\n    if (topicMessages.some(({ topic }) => !topic)) {\n      throw new KafkaJSNonRetriableError(`Invalid topic`)\n    }\n\n    if (idempotent && acks !== -1) {\n      throw new KafkaJSNonRetriableError(\n        `Not requiring ack for all messages invalidates the idempotent producer's EoS guarantees`\n      )\n    }\n\n    for (const { topic, messages } of topicMessages) {\n      if (!messages) {\n        throw new KafkaJSNonRetriableError(\n          `Invalid messages array [${messages}] for topic \"${topic}\"`\n        )\n      }\n\n      const messageWithoutValue = messages.find(message => message.value === undefined)\n      if (messageWithoutValue) {\n        throw new KafkaJSNonRetriableError(\n          `Invalid message without value for topic \"${topic}\": ${JSON.stringify(\n            messageWithoutValue\n          )}`\n        )\n      }\n    }\n\n    validateConnectionStatus()\n    const mergedTopicMessages = topicMessages.reduce((merged, { topic, messages }) => {\n      const index = merged.findIndex(({ topic: mergedTopic }) => topic === mergedTopic)\n\n      if (index === -1) {\n        merged.push({ topic, messages })\n      } else {\n        merged[index].messages = [...merged[index].messages, ...messages]\n      }\n\n      return merged\n    }, [])\n\n    return await sendMessages({\n      acks,\n      timeout,\n      compression,\n      topicMessages: mergedTopicMessages,\n    })\n  }\n\n  /**\n   * @param {ProduceRequest} ProduceRequest\n   * @returns {Promise}\n   *\n   * @typedef {Object} ProduceRequest\n   * @property {string} topic\n   * @property {Array} messages An array of objects with \"key\" and \"value\", example:\n   *                         [{ key: 'my-key', value: 'my-value'}]\n   * @property {number} [acks=-1] Control the number of required acks.\n   *                           -1 = all replicas must acknowledge\n   *                            0 = no acknowledgments\n   *                            1 = only waits for the leader to acknowledge\n   * @property {number} [timeout=30000] The time to await a response in ms\n   * @property {Compression.Types} [compression=Compression.Types.None] Compression codec\n   */\n  const send = async ({ acks, timeout, compression, topic, messages }) => {\n    const topicMessage = { topic, messages }\n    return sendBatch({\n      acks,\n      timeout,\n      compression,\n      topicMessages: [topicMessage],\n    })\n  }\n\n  return {\n    send,\n    sendBatch,\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}