{"ast":null,"code":"var _asyncToGenerator = require(\"C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nconst {\n  KafkaJSConnectionError,\n  KafkaJSNonRetriableError\n} = require('../errors');\nconst ConnectionPool = require('../network/connectionPool');\n\n/**\n * @typedef {Object} ConnectionPoolBuilder\n * @property {(destination?: { host?: string, port?: number, rack?: string }) => Promise<ConnectionPool>} build\n */\n\n/**\n * @param {Object} options\n * @param {import(\"../../types\").ISocketFactory} [options.socketFactory]\n * @param {string[]|(() => string[])} options.brokers\n * @param {Object} [options.ssl]\n * @param {Object} [options.sasl]\n * @param {string} options.clientId\n * @param {number} options.requestTimeout\n * @param {boolean} [options.enforceRequestTimeout]\n * @param {number} [options.connectionTimeout]\n * @param {number} [options.maxInFlightRequests]\n * @param {import(\"../../types\").RetryOptions} [options.retry]\n * @param {import(\"../../types\").Logger} options.logger\n * @param {import(\"../instrumentation/emitter\")} [options.instrumentationEmitter]\n * @param {number} [options.reauthenticationThreshold]\n * @returns {ConnectionPoolBuilder}\n */\nmodule.exports = ({\n  socketFactory,\n  brokers,\n  ssl,\n  sasl,\n  clientId,\n  requestTimeout,\n  enforceRequestTimeout,\n  connectionTimeout,\n  maxInFlightRequests,\n  logger,\n  instrumentationEmitter = null,\n  reauthenticationThreshold\n}) => {\n  let index = 0;\n  const isValidBroker = broker => {\n    return broker && typeof broker === 'string' && broker.length > 0;\n  };\n  const validateBrokers = brokers => {\n    if (!brokers) {\n      throw new KafkaJSNonRetriableError(`Failed to connect: brokers should not be null`);\n    }\n    if (Array.isArray(brokers)) {\n      if (!brokers.length) {\n        throw new KafkaJSNonRetriableError(`Failed to connect: brokers array is empty`);\n      }\n      brokers.forEach((broker, index) => {\n        if (!isValidBroker(broker)) {\n          throw new KafkaJSNonRetriableError(`Failed to connect: broker at index ${index} is invalid \"${typeof broker}\"`);\n        }\n      });\n    }\n  };\n  const getBrokers = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* () {\n      let list;\n      if (typeof brokers === 'function') {\n        try {\n          list = yield brokers();\n        } catch (e) {\n          const wrappedError = new KafkaJSConnectionError(`Failed to connect: \"config.brokers\" threw: ${e.message}`);\n          wrappedError.stack = `${wrappedError.name}\\n  Caused by: ${e.stack}`;\n          throw wrappedError;\n        }\n      } else {\n        list = brokers;\n      }\n      validateBrokers(list);\n      return list;\n    });\n    return function getBrokers() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  return {\n    build: function () {\n      var _ref2 = _asyncToGenerator(function* ({\n        host,\n        port,\n        rack\n      } = {}) {\n        if (!host) {\n          const list = yield getBrokers();\n          const randomBroker = list[index++ % list.length];\n          host = randomBroker.split(':')[0];\n          port = Number(randomBroker.split(':')[1]);\n        }\n        return new ConnectionPool({\n          host,\n          port,\n          rack,\n          sasl,\n          ssl,\n          clientId,\n          socketFactory,\n          connectionTimeout,\n          requestTimeout,\n          enforceRequestTimeout,\n          maxInFlightRequests,\n          instrumentationEmitter,\n          logger,\n          reauthenticationThreshold\n        });\n      });\n      return function build() {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  };\n};","map":{"version":3,"names":["KafkaJSConnectionError","KafkaJSNonRetriableError","require","ConnectionPool","module","exports","socketFactory","brokers","ssl","sasl","clientId","requestTimeout","enforceRequestTimeout","connectionTimeout","maxInFlightRequests","logger","instrumentationEmitter","reauthenticationThreshold","index","isValidBroker","broker","length","validateBrokers","Array","isArray","forEach","getBrokers","list","e","wrappedError","message","stack","name","build","host","port","rack","randomBroker","split","Number"],"sources":["C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/kafkajs/src/cluster/connectionPoolBuilder.js"],"sourcesContent":["const { KafkaJSConnectionError, KafkaJSNonRetriableError } = require('../errors')\nconst ConnectionPool = require('../network/connectionPool')\n\n/**\n * @typedef {Object} ConnectionPoolBuilder\n * @property {(destination?: { host?: string, port?: number, rack?: string }) => Promise<ConnectionPool>} build\n */\n\n/**\n * @param {Object} options\n * @param {import(\"../../types\").ISocketFactory} [options.socketFactory]\n * @param {string[]|(() => string[])} options.brokers\n * @param {Object} [options.ssl]\n * @param {Object} [options.sasl]\n * @param {string} options.clientId\n * @param {number} options.requestTimeout\n * @param {boolean} [options.enforceRequestTimeout]\n * @param {number} [options.connectionTimeout]\n * @param {number} [options.maxInFlightRequests]\n * @param {import(\"../../types\").RetryOptions} [options.retry]\n * @param {import(\"../../types\").Logger} options.logger\n * @param {import(\"../instrumentation/emitter\")} [options.instrumentationEmitter]\n * @param {number} [options.reauthenticationThreshold]\n * @returns {ConnectionPoolBuilder}\n */\nmodule.exports = ({\n  socketFactory,\n  brokers,\n  ssl,\n  sasl,\n  clientId,\n  requestTimeout,\n  enforceRequestTimeout,\n  connectionTimeout,\n  maxInFlightRequests,\n  logger,\n  instrumentationEmitter = null,\n  reauthenticationThreshold,\n}) => {\n  let index = 0\n\n  const isValidBroker = broker => {\n    return broker && typeof broker === 'string' && broker.length > 0\n  }\n\n  const validateBrokers = brokers => {\n    if (!brokers) {\n      throw new KafkaJSNonRetriableError(`Failed to connect: brokers should not be null`)\n    }\n\n    if (Array.isArray(brokers)) {\n      if (!brokers.length) {\n        throw new KafkaJSNonRetriableError(`Failed to connect: brokers array is empty`)\n      }\n\n      brokers.forEach((broker, index) => {\n        if (!isValidBroker(broker)) {\n          throw new KafkaJSNonRetriableError(\n            `Failed to connect: broker at index ${index} is invalid \"${typeof broker}\"`\n          )\n        }\n      })\n    }\n  }\n\n  const getBrokers = async () => {\n    let list\n\n    if (typeof brokers === 'function') {\n      try {\n        list = await brokers()\n      } catch (e) {\n        const wrappedError = new KafkaJSConnectionError(\n          `Failed to connect: \"config.brokers\" threw: ${e.message}`\n        )\n        wrappedError.stack = `${wrappedError.name}\\n  Caused by: ${e.stack}`\n        throw wrappedError\n      }\n    } else {\n      list = brokers\n    }\n\n    validateBrokers(list)\n\n    return list\n  }\n\n  return {\n    build: async ({ host, port, rack } = {}) => {\n      if (!host) {\n        const list = await getBrokers()\n\n        const randomBroker = list[index++ % list.length]\n\n        host = randomBroker.split(':')[0]\n        port = Number(randomBroker.split(':')[1])\n      }\n\n      return new ConnectionPool({\n        host,\n        port,\n        rack,\n        sasl,\n        ssl,\n        clientId,\n        socketFactory,\n        connectionTimeout,\n        requestTimeout,\n        enforceRequestTimeout,\n        maxInFlightRequests,\n        instrumentationEmitter,\n        logger,\n        reauthenticationThreshold,\n      })\n    },\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}