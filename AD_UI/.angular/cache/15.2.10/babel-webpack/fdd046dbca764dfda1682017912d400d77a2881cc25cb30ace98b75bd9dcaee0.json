{"ast":null,"code":"var _asyncToGenerator = require(\"C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nconst Decoder = require('../../../decoder');\nconst {\n  parse: parseV0\n} = require('../v0/response');\n\n/**\n * v2 (supported in 0.10.0 or later)\n * ProduceResponse => [TopicName [Partition ErrorCode Offset Timestamp]] ThrottleTime\n *   TopicName => string\n *   Partition => int32\n *   ErrorCode => int16\n *   Offset => int64\n *   Timestamp => int64\n *   ThrottleTime => int32\n */\n\nconst partition = decoder => ({\n  partition: decoder.readInt32(),\n  errorCode: decoder.readInt16(),\n  offset: decoder.readInt64().toString(),\n  timestamp: decoder.readInt64().toString()\n});\nconst decode = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (rawData) {\n    const decoder = new Decoder(rawData);\n    const topics = decoder.readArray(decoder => ({\n      topicName: decoder.readString(),\n      partitions: decoder.readArray(partition)\n    }));\n    const throttleTime = decoder.readInt32();\n    return {\n      topics,\n      throttleTime\n    };\n  });\n  return function decode(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nmodule.exports = {\n  decode,\n  parse: parseV0\n};","map":{"version":3,"names":["Decoder","require","parse","parseV0","partition","decoder","readInt32","errorCode","readInt16","offset","readInt64","toString","timestamp","decode","rawData","topics","readArray","topicName","readString","partitions","throttleTime","module","exports"],"sources":["C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/kafkajs/src/protocol/requests/produce/v2/response.js"],"sourcesContent":["const Decoder = require('../../../decoder')\nconst { parse: parseV0 } = require('../v0/response')\n\n/**\n * v2 (supported in 0.10.0 or later)\n * ProduceResponse => [TopicName [Partition ErrorCode Offset Timestamp]] ThrottleTime\n *   TopicName => string\n *   Partition => int32\n *   ErrorCode => int16\n *   Offset => int64\n *   Timestamp => int64\n *   ThrottleTime => int32\n */\n\nconst partition = decoder => ({\n  partition: decoder.readInt32(),\n  errorCode: decoder.readInt16(),\n  offset: decoder.readInt64().toString(),\n  timestamp: decoder.readInt64().toString(),\n})\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData)\n  const topics = decoder.readArray(decoder => ({\n    topicName: decoder.readString(),\n    partitions: decoder.readArray(partition),\n  }))\n\n  const throttleTime = decoder.readInt32()\n\n  return {\n    topics,\n    throttleTime,\n  }\n}\n\nmodule.exports = {\n  decode,\n  parse: parseV0,\n}\n"],"mappings":";AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAC3C,MAAM;EAAEC,KAAK,EAAEC;AAAQ,CAAC,GAAGF,OAAO,CAAC,gBAAgB,CAAC;;AAEpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMG,SAAS,GAAGC,OAAO,KAAK;EAC5BD,SAAS,EAAEC,OAAO,CAACC,SAAS,EAAE;EAC9BC,SAAS,EAAEF,OAAO,CAACG,SAAS,EAAE;EAC9BC,MAAM,EAAEJ,OAAO,CAACK,SAAS,EAAE,CAACC,QAAQ,EAAE;EACtCC,SAAS,EAAEP,OAAO,CAACK,SAAS,EAAE,CAACC,QAAQ;AACzC,CAAC,CAAC;AAEF,MAAME,MAAM;EAAA,6BAAG,WAAMC,OAAO,EAAI;IAC9B,MAAMT,OAAO,GAAG,IAAIL,OAAO,CAACc,OAAO,CAAC;IACpC,MAAMC,MAAM,GAAGV,OAAO,CAACW,SAAS,CAACX,OAAO,KAAK;MAC3CY,SAAS,EAAEZ,OAAO,CAACa,UAAU,EAAE;MAC/BC,UAAU,EAAEd,OAAO,CAACW,SAAS,CAACZ,SAAS;IACzC,CAAC,CAAC,CAAC;IAEH,MAAMgB,YAAY,GAAGf,OAAO,CAACC,SAAS,EAAE;IAExC,OAAO;MACLS,MAAM;MACNK;IACF,CAAC;EACH,CAAC;EAAA,gBAbKP,MAAM;IAAA;EAAA;AAAA,GAaX;AAEDQ,MAAM,CAACC,OAAO,GAAG;EACfT,MAAM;EACNX,KAAK,EAAEC;AACT,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}