{"ast":null,"code":"var _asyncToGenerator = require(\"C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nconst Decoder = require('../../../decoder');\nconst Encoder = require('../../../encoder');\nconst {\n  parse: parseV0\n} = require('../v0/response');\nconst {\n  failIfVersionNotSupported\n} = require('../../../error');\n\n/**\n * SaslAuthenticate Response (Version: 1) => error_code error_message sasl_auth_bytes\n *   error_code => INT16\n *   error_message => NULLABLE_STRING\n *   sasl_auth_bytes => BYTES\n *   session_lifetime_ms => INT64\n */\nconst decode = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (rawData) {\n    const decoder = new Decoder(rawData);\n    const errorCode = decoder.readInt16();\n    failIfVersionNotSupported(errorCode);\n    const errorMessage = decoder.readString();\n\n    // This is necessary to make the response compatible with the original\n    // mechanism protocols. They expect a byte response, which starts with\n    // the size\n    const authBytesEncoder = new Encoder().writeBytes(decoder.readBytes());\n    const authBytes = authBytesEncoder.buffer;\n    const sessionLifetimeMs = decoder.readInt64().toString();\n    return {\n      errorCode,\n      errorMessage,\n      authBytes,\n      sessionLifetimeMs\n    };\n  });\n  return function decode(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nmodule.exports = {\n  decode,\n  parse: parseV0\n};","map":{"version":3,"names":["Decoder","require","Encoder","parse","parseV0","failIfVersionNotSupported","decode","rawData","decoder","errorCode","readInt16","errorMessage","readString","authBytesEncoder","writeBytes","readBytes","authBytes","buffer","sessionLifetimeMs","readInt64","toString","module","exports"],"sources":["C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/kafkajs/src/protocol/requests/saslAuthenticate/v1/response.js"],"sourcesContent":["const Decoder = require('../../../decoder')\nconst Encoder = require('../../../encoder')\nconst { parse: parseV0 } = require('../v0/response')\nconst { failIfVersionNotSupported } = require('../../../error')\n\n/**\n * SaslAuthenticate Response (Version: 1) => error_code error_message sasl_auth_bytes\n *   error_code => INT16\n *   error_message => NULLABLE_STRING\n *   sasl_auth_bytes => BYTES\n *   session_lifetime_ms => INT64\n */\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData)\n  const errorCode = decoder.readInt16()\n\n  failIfVersionNotSupported(errorCode)\n  const errorMessage = decoder.readString()\n\n  // This is necessary to make the response compatible with the original\n  // mechanism protocols. They expect a byte response, which starts with\n  // the size\n  const authBytesEncoder = new Encoder().writeBytes(decoder.readBytes())\n  const authBytes = authBytesEncoder.buffer\n  const sessionLifetimeMs = decoder.readInt64().toString()\n\n  return {\n    errorCode,\n    errorMessage,\n    authBytes,\n    sessionLifetimeMs,\n  }\n}\nmodule.exports = {\n  decode,\n  parse: parseV0,\n}\n"],"mappings":";AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAC3C,MAAMC,OAAO,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AAC3C,MAAM;EAAEE,KAAK,EAAEC;AAAQ,CAAC,GAAGH,OAAO,CAAC,gBAAgB,CAAC;AACpD,MAAM;EAAEI;AAA0B,CAAC,GAAGJ,OAAO,CAAC,gBAAgB,CAAC;;AAE/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMK,MAAM;EAAA,6BAAG,WAAMC,OAAO,EAAI;IAC9B,MAAMC,OAAO,GAAG,IAAIR,OAAO,CAACO,OAAO,CAAC;IACpC,MAAME,SAAS,GAAGD,OAAO,CAACE,SAAS,EAAE;IAErCL,yBAAyB,CAACI,SAAS,CAAC;IACpC,MAAME,YAAY,GAAGH,OAAO,CAACI,UAAU,EAAE;;IAEzC;IACA;IACA;IACA,MAAMC,gBAAgB,GAAG,IAAIX,OAAO,EAAE,CAACY,UAAU,CAACN,OAAO,CAACO,SAAS,EAAE,CAAC;IACtE,MAAMC,SAAS,GAAGH,gBAAgB,CAACI,MAAM;IACzC,MAAMC,iBAAiB,GAAGV,OAAO,CAACW,SAAS,EAAE,CAACC,QAAQ,EAAE;IAExD,OAAO;MACLX,SAAS;MACTE,YAAY;MACZK,SAAS;MACTE;IACF,CAAC;EACH,CAAC;EAAA,gBApBKZ,MAAM;IAAA;EAAA;AAAA,GAoBX;AACDe,MAAM,CAACC,OAAO,GAAG;EACfhB,MAAM;EACNH,KAAK,EAAEC;AACT,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}