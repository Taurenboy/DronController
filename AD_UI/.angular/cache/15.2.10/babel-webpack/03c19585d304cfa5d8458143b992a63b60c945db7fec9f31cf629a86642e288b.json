{"ast":null,"code":"var _asyncToGenerator = require(\"C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nconst {\n  requests,\n  lookup\n} = require('../../protocol/requests');\nconst apiKeys = require('../../protocol/requests/apiKeys');\nconst plainAuthenticatorProvider = require('./plain');\nconst scram256AuthenticatorProvider = require('./scram256');\nconst scram512AuthenticatorProvider = require('./scram512');\nconst awsIAMAuthenticatorProvider = require('./awsIam');\nconst oauthBearerAuthenticatorProvider = require('./oauthBearer');\nconst {\n  KafkaJSSASLAuthenticationError\n} = require('../../errors');\nconst BUILT_IN_AUTHENTICATION_PROVIDERS = {\n  AWS: awsIAMAuthenticatorProvider,\n  PLAIN: plainAuthenticatorProvider,\n  OAUTHBEARER: oauthBearerAuthenticatorProvider,\n  'SCRAM-SHA-256': scram256AuthenticatorProvider,\n  'SCRAM-SHA-512': scram512AuthenticatorProvider\n};\nconst UNLIMITED_SESSION_LIFETIME = '0';\nmodule.exports = class SASLAuthenticator {\n  constructor(connection, logger, versions, supportAuthenticationProtocol) {\n    this.connection = connection;\n    this.logger = logger;\n    this.sessionLifetime = UNLIMITED_SESSION_LIFETIME;\n    const lookupRequest = lookup(versions);\n    this.saslHandshake = lookupRequest(apiKeys.SaslHandshake, requests.SaslHandshake);\n    this.protocolAuthentication = supportAuthenticationProtocol ? lookupRequest(apiKeys.SaslAuthenticate, requests.SaslAuthenticate) : null;\n  }\n  authenticate() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const mechanism = _this.connection.sasl.mechanism.toUpperCase();\n      const handshake = yield _this.connection.send(_this.saslHandshake({\n        mechanism\n      }));\n      if (!handshake.enabledMechanisms.includes(mechanism)) {\n        throw new KafkaJSSASLAuthenticationError(`SASL ${mechanism} mechanism is not supported by the server`);\n      }\n      const saslAuthenticate = /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* ({\n          request,\n          response\n        }) {\n          if (_this.protocolAuthentication) {\n            const requestAuthBytes = yield request.encode();\n            const authResponse = yield _this.connection.send(_this.protocolAuthentication({\n              authBytes: requestAuthBytes\n            }));\n\n            // `0` is a string because `sessionLifetimeMs` is an int64 encoded as string.\n            // This is not present in SaslAuthenticateV0, so we default to `\"0\"`\n            _this.sessionLifetime = authResponse.sessionLifetimeMs || UNLIMITED_SESSION_LIFETIME;\n            if (!response) {\n              return;\n            }\n            const {\n              authBytes: responseAuthBytes\n            } = authResponse;\n            const payloadDecoded = yield response.decode(responseAuthBytes);\n            return response.parse(payloadDecoded);\n          }\n          return _this.connection.sendAuthRequest({\n            request,\n            response\n          });\n        });\n        return function saslAuthenticate(_x) {\n          return _ref.apply(this, arguments);\n        };\n      }();\n      if (!_this.connection.sasl.authenticationProvider && Object.keys(BUILT_IN_AUTHENTICATION_PROVIDERS).includes(mechanism)) {\n        _this.connection.sasl.authenticationProvider = BUILT_IN_AUTHENTICATION_PROVIDERS[mechanism](_this.connection.sasl);\n      }\n      yield _this.connection.sasl.authenticationProvider({\n        host: _this.connection.host,\n        port: _this.connection.port,\n        logger: _this.logger.namespace(`SaslAuthenticator-${mechanism}`),\n        saslAuthenticate\n      }).authenticate();\n    })();\n  }\n};","map":{"version":3,"names":["requests","lookup","require","apiKeys","plainAuthenticatorProvider","scram256AuthenticatorProvider","scram512AuthenticatorProvider","awsIAMAuthenticatorProvider","oauthBearerAuthenticatorProvider","KafkaJSSASLAuthenticationError","BUILT_IN_AUTHENTICATION_PROVIDERS","AWS","PLAIN","OAUTHBEARER","UNLIMITED_SESSION_LIFETIME","module","exports","SASLAuthenticator","constructor","connection","logger","versions","supportAuthenticationProtocol","sessionLifetime","lookupRequest","saslHandshake","SaslHandshake","protocolAuthentication","SaslAuthenticate","authenticate","mechanism","sasl","toUpperCase","handshake","send","enabledMechanisms","includes","saslAuthenticate","request","response","requestAuthBytes","encode","authResponse","authBytes","sessionLifetimeMs","responseAuthBytes","payloadDecoded","decode","parse","sendAuthRequest","authenticationProvider","Object","keys","host","port","namespace"],"sources":["C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/kafkajs/src/broker/saslAuthenticator/index.js"],"sourcesContent":["const { requests, lookup } = require('../../protocol/requests')\nconst apiKeys = require('../../protocol/requests/apiKeys')\nconst plainAuthenticatorProvider = require('./plain')\nconst scram256AuthenticatorProvider = require('./scram256')\nconst scram512AuthenticatorProvider = require('./scram512')\nconst awsIAMAuthenticatorProvider = require('./awsIam')\nconst oauthBearerAuthenticatorProvider = require('./oauthBearer')\nconst { KafkaJSSASLAuthenticationError } = require('../../errors')\n\nconst BUILT_IN_AUTHENTICATION_PROVIDERS = {\n  AWS: awsIAMAuthenticatorProvider,\n  PLAIN: plainAuthenticatorProvider,\n  OAUTHBEARER: oauthBearerAuthenticatorProvider,\n  'SCRAM-SHA-256': scram256AuthenticatorProvider,\n  'SCRAM-SHA-512': scram512AuthenticatorProvider,\n}\n\nconst UNLIMITED_SESSION_LIFETIME = '0'\n\nmodule.exports = class SASLAuthenticator {\n  constructor(connection, logger, versions, supportAuthenticationProtocol) {\n    this.connection = connection\n    this.logger = logger\n    this.sessionLifetime = UNLIMITED_SESSION_LIFETIME\n\n    const lookupRequest = lookup(versions)\n    this.saslHandshake = lookupRequest(apiKeys.SaslHandshake, requests.SaslHandshake)\n    this.protocolAuthentication = supportAuthenticationProtocol\n      ? lookupRequest(apiKeys.SaslAuthenticate, requests.SaslAuthenticate)\n      : null\n  }\n\n  async authenticate() {\n    const mechanism = this.connection.sasl.mechanism.toUpperCase()\n    const handshake = await this.connection.send(this.saslHandshake({ mechanism }))\n    if (!handshake.enabledMechanisms.includes(mechanism)) {\n      throw new KafkaJSSASLAuthenticationError(\n        `SASL ${mechanism} mechanism is not supported by the server`\n      )\n    }\n\n    const saslAuthenticate = async ({ request, response }) => {\n      if (this.protocolAuthentication) {\n        const requestAuthBytes = await request.encode()\n        const authResponse = await this.connection.send(\n          this.protocolAuthentication({ authBytes: requestAuthBytes })\n        )\n\n        // `0` is a string because `sessionLifetimeMs` is an int64 encoded as string.\n        // This is not present in SaslAuthenticateV0, so we default to `\"0\"`\n        this.sessionLifetime = authResponse.sessionLifetimeMs || UNLIMITED_SESSION_LIFETIME\n\n        if (!response) {\n          return\n        }\n\n        const { authBytes: responseAuthBytes } = authResponse\n        const payloadDecoded = await response.decode(responseAuthBytes)\n        return response.parse(payloadDecoded)\n      }\n\n      return this.connection.sendAuthRequest({ request, response })\n    }\n\n    if (\n      !this.connection.sasl.authenticationProvider &&\n      Object.keys(BUILT_IN_AUTHENTICATION_PROVIDERS).includes(mechanism)\n    ) {\n      this.connection.sasl.authenticationProvider = BUILT_IN_AUTHENTICATION_PROVIDERS[mechanism](\n        this.connection.sasl\n      )\n    }\n    await this.connection.sasl\n      .authenticationProvider({\n        host: this.connection.host,\n        port: this.connection.port,\n        logger: this.logger.namespace(`SaslAuthenticator-${mechanism}`),\n        saslAuthenticate,\n      })\n      .authenticate()\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}