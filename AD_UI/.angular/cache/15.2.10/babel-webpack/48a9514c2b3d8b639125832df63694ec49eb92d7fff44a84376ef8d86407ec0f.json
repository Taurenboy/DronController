{"ast":null,"code":"var _asyncToGenerator = require(\"C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nconst Decoder = require('../../../decoder');\nconst {\n  failure,\n  createErrorFromCode\n} = require('../../../error');\n\n/**\n * ListGroups Response (Version: 0) => error_code [groups]\n *   error_code => INT16\n *   groups => group_id protocol_type\n *     group_id => STRING\n *     protocol_type => STRING\n */\n\nconst decodeGroup = decoder => ({\n  groupId: decoder.readString(),\n  protocolType: decoder.readString()\n});\nconst decode = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (rawData) {\n    const decoder = new Decoder(rawData);\n    const errorCode = decoder.readInt16();\n    const groups = decoder.readArray(decodeGroup);\n    return {\n      errorCode,\n      groups\n    };\n  });\n  return function decode(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nconst parse = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(function* (data) {\n    if (failure(data.errorCode)) {\n      throw createErrorFromCode(data.errorCode);\n    }\n    return data;\n  });\n  return function parse(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nmodule.exports = {\n  decodeGroup,\n  decode,\n  parse\n};","map":{"version":3,"names":["Decoder","require","failure","createErrorFromCode","decodeGroup","decoder","groupId","readString","protocolType","decode","rawData","errorCode","readInt16","groups","readArray","parse","data","module","exports"],"sources":["C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/kafkajs/src/protocol/requests/listGroups/v0/response.js"],"sourcesContent":["const Decoder = require('../../../decoder')\nconst { failure, createErrorFromCode } = require('../../../error')\n\n/**\n * ListGroups Response (Version: 0) => error_code [groups]\n *   error_code => INT16\n *   groups => group_id protocol_type\n *     group_id => STRING\n *     protocol_type => STRING\n */\n\nconst decodeGroup = decoder => ({\n  groupId: decoder.readString(),\n  protocolType: decoder.readString(),\n})\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData)\n  const errorCode = decoder.readInt16()\n  const groups = decoder.readArray(decodeGroup)\n\n  return {\n    errorCode,\n    groups,\n  }\n}\n\nconst parse = async data => {\n  if (failure(data.errorCode)) {\n    throw createErrorFromCode(data.errorCode)\n  }\n\n  return data\n}\n\nmodule.exports = {\n  decodeGroup,\n  decode,\n  parse,\n}\n"],"mappings":";AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAC3C,MAAM;EAAEC,OAAO;EAAEC;AAAoB,CAAC,GAAGF,OAAO,CAAC,gBAAgB,CAAC;;AAElE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMG,WAAW,GAAGC,OAAO,KAAK;EAC9BC,OAAO,EAAED,OAAO,CAACE,UAAU,EAAE;EAC7BC,YAAY,EAAEH,OAAO,CAACE,UAAU;AAClC,CAAC,CAAC;AAEF,MAAME,MAAM;EAAA,6BAAG,WAAMC,OAAO,EAAI;IAC9B,MAAML,OAAO,GAAG,IAAIL,OAAO,CAACU,OAAO,CAAC;IACpC,MAAMC,SAAS,GAAGN,OAAO,CAACO,SAAS,EAAE;IACrC,MAAMC,MAAM,GAAGR,OAAO,CAACS,SAAS,CAACV,WAAW,CAAC;IAE7C,OAAO;MACLO,SAAS;MACTE;IACF,CAAC;EACH,CAAC;EAAA,gBATKJ,MAAM;IAAA;EAAA;AAAA,GASX;AAED,MAAMM,KAAK;EAAA,8BAAG,WAAMC,IAAI,EAAI;IAC1B,IAAId,OAAO,CAACc,IAAI,CAACL,SAAS,CAAC,EAAE;MAC3B,MAAMR,mBAAmB,CAACa,IAAI,CAACL,SAAS,CAAC;IAC3C;IAEA,OAAOK,IAAI;EACb,CAAC;EAAA,gBANKD,KAAK;IAAA;EAAA;AAAA,GAMV;AAEDE,MAAM,CAACC,OAAO,GAAG;EACfd,WAAW;EACXK,MAAM;EACNM;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}