{"ast":null,"code":"var _asyncToGenerator = require(\"C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nconst Encoder = require('../../../encoder');\nconst {\n  Fetch: apiKey\n} = require('../../apiKeys');\nconst ISOLATION_LEVEL = require('../../../isolationLevel');\n\n/**\n * Allow consumers to fetch from closest replica\n * @see https://cwiki.apache.org/confluence/display/KAFKA/KIP-392%3A+Allow+consumers+to+fetch+from+closest+replica\n */\n\n/**\n * Fetch Request (Version: 11) => replica_id max_wait_time min_bytes max_bytes isolation_level session_id session_epoch [topics] [forgotten_topics_data]\n *   replica_id => INT32\n *   max_wait_time => INT32\n *   min_bytes => INT32\n *   max_bytes => INT32\n *   isolation_level => INT8\n *   session_id => INT32\n *   session_epoch => INT32\n *   topics => topic [partitions]\n *     topic => STRING\n *     partitions => partition current_leader_epoch fetch_offset log_start_offset partition_max_bytes\n *       partition => INT32\n *       current_leader_epoch => INT32\n *       fetch_offset => INT64\n *       log_start_offset => INT64\n *       partition_max_bytes => INT32\n *   forgotten_topics_data => topic [partitions]\n *     topic => STRING\n *     partitions => INT32\n *   rack_id => STRING\n */\n\nmodule.exports = ({\n  replicaId,\n  maxWaitTime,\n  minBytes,\n  maxBytes,\n  topics,\n  rackId = '',\n  isolationLevel = ISOLATION_LEVEL.READ_COMMITTED,\n  sessionId = 0,\n  sessionEpoch = -1,\n  forgottenTopics = [] // Topics to remove from the fetch session\n}) => ({\n  apiKey,\n  apiVersion: 11,\n  apiName: 'Fetch',\n  encode: function () {\n    var _ref = _asyncToGenerator(function* () {\n      return new Encoder().writeInt32(replicaId).writeInt32(maxWaitTime).writeInt32(minBytes).writeInt32(maxBytes).writeInt8(isolationLevel).writeInt32(sessionId).writeInt32(sessionEpoch).writeArray(topics.map(encodeTopic)).writeArray(forgottenTopics.map(encodeForgottenTopics)).writeString(rackId);\n    });\n    return function encode() {\n      return _ref.apply(this, arguments);\n    };\n  }()\n});\nconst encodeForgottenTopics = ({\n  topic,\n  partitions\n}) => {\n  return new Encoder().writeString(topic).writeArray(partitions);\n};\nconst encodeTopic = ({\n  topic,\n  partitions\n}) => {\n  return new Encoder().writeString(topic).writeArray(partitions.map(encodePartition));\n};\nconst encodePartition = ({\n  partition,\n  currentLeaderEpoch = -1,\n  fetchOffset,\n  logStartOffset = -1,\n  maxBytes\n}) => {\n  return new Encoder().writeInt32(partition).writeInt32(currentLeaderEpoch).writeInt64(fetchOffset).writeInt64(logStartOffset).writeInt32(maxBytes);\n};","map":{"version":3,"names":["Encoder","require","Fetch","apiKey","ISOLATION_LEVEL","module","exports","replicaId","maxWaitTime","minBytes","maxBytes","topics","rackId","isolationLevel","READ_COMMITTED","sessionId","sessionEpoch","forgottenTopics","apiVersion","apiName","encode","writeInt32","writeInt8","writeArray","map","encodeTopic","encodeForgottenTopics","writeString","topic","partitions","encodePartition","partition","currentLeaderEpoch","fetchOffset","logStartOffset","writeInt64"],"sources":["C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/kafkajs/src/protocol/requests/fetch/v11/request.js"],"sourcesContent":["const Encoder = require('../../../encoder')\nconst { Fetch: apiKey } = require('../../apiKeys')\nconst ISOLATION_LEVEL = require('../../../isolationLevel')\n\n/**\n * Allow consumers to fetch from closest replica\n * @see https://cwiki.apache.org/confluence/display/KAFKA/KIP-392%3A+Allow+consumers+to+fetch+from+closest+replica\n */\n\n/**\n * Fetch Request (Version: 11) => replica_id max_wait_time min_bytes max_bytes isolation_level session_id session_epoch [topics] [forgotten_topics_data]\n *   replica_id => INT32\n *   max_wait_time => INT32\n *   min_bytes => INT32\n *   max_bytes => INT32\n *   isolation_level => INT8\n *   session_id => INT32\n *   session_epoch => INT32\n *   topics => topic [partitions]\n *     topic => STRING\n *     partitions => partition current_leader_epoch fetch_offset log_start_offset partition_max_bytes\n *       partition => INT32\n *       current_leader_epoch => INT32\n *       fetch_offset => INT64\n *       log_start_offset => INT64\n *       partition_max_bytes => INT32\n *   forgotten_topics_data => topic [partitions]\n *     topic => STRING\n *     partitions => INT32\n *   rack_id => STRING\n */\n\nmodule.exports = ({\n  replicaId,\n  maxWaitTime,\n  minBytes,\n  maxBytes,\n  topics,\n  rackId = '',\n  isolationLevel = ISOLATION_LEVEL.READ_COMMITTED,\n  sessionId = 0,\n  sessionEpoch = -1,\n  forgottenTopics = [], // Topics to remove from the fetch session\n}) => ({\n  apiKey,\n  apiVersion: 11,\n  apiName: 'Fetch',\n  encode: async () => {\n    return new Encoder()\n      .writeInt32(replicaId)\n      .writeInt32(maxWaitTime)\n      .writeInt32(minBytes)\n      .writeInt32(maxBytes)\n      .writeInt8(isolationLevel)\n      .writeInt32(sessionId)\n      .writeInt32(sessionEpoch)\n      .writeArray(topics.map(encodeTopic))\n      .writeArray(forgottenTopics.map(encodeForgottenTopics))\n      .writeString(rackId)\n  },\n})\n\nconst encodeForgottenTopics = ({ topic, partitions }) => {\n  return new Encoder().writeString(topic).writeArray(partitions)\n}\n\nconst encodeTopic = ({ topic, partitions }) => {\n  return new Encoder().writeString(topic).writeArray(partitions.map(encodePartition))\n}\n\nconst encodePartition = ({\n  partition,\n  currentLeaderEpoch = -1,\n  fetchOffset,\n  logStartOffset = -1,\n  maxBytes,\n}) => {\n  return new Encoder()\n    .writeInt32(partition)\n    .writeInt32(currentLeaderEpoch)\n    .writeInt64(fetchOffset)\n    .writeInt64(logStartOffset)\n    .writeInt32(maxBytes)\n}\n"],"mappings":";AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAC3C,MAAM;EAAEC,KAAK,EAAEC;AAAO,CAAC,GAAGF,OAAO,CAAC,eAAe,CAAC;AAClD,MAAMG,eAAe,GAAGH,OAAO,CAAC,yBAAyB,CAAC;;AAE1D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAI,MAAM,CAACC,OAAO,GAAG,CAAC;EAChBC,SAAS;EACTC,WAAW;EACXC,QAAQ;EACRC,QAAQ;EACRC,MAAM;EACNC,MAAM,GAAG,EAAE;EACXC,cAAc,GAAGT,eAAe,CAACU,cAAc;EAC/CC,SAAS,GAAG,CAAC;EACbC,YAAY,GAAG,CAAC,CAAC;EACjBC,eAAe,GAAG,EAAE,CAAE;AACxB,CAAC,MAAM;EACLd,MAAM;EACNe,UAAU,EAAE,EAAE;EACdC,OAAO,EAAE,OAAO;EAChBC,MAAM;IAAA,6BAAE,aAAY;MAClB,OAAO,IAAIpB,OAAO,EAAE,CACjBqB,UAAU,CAACd,SAAS,CAAC,CACrBc,UAAU,CAACb,WAAW,CAAC,CACvBa,UAAU,CAACZ,QAAQ,CAAC,CACpBY,UAAU,CAACX,QAAQ,CAAC,CACpBY,SAAS,CAACT,cAAc,CAAC,CACzBQ,UAAU,CAACN,SAAS,CAAC,CACrBM,UAAU,CAACL,YAAY,CAAC,CACxBO,UAAU,CAACZ,MAAM,CAACa,GAAG,CAACC,WAAW,CAAC,CAAC,CACnCF,UAAU,CAACN,eAAe,CAACO,GAAG,CAACE,qBAAqB,CAAC,CAAC,CACtDC,WAAW,CAACf,MAAM,CAAC;IACxB,CAAC;IAAA;MAAA;IAAA;EAAA;AACH,CAAC,CAAC;AAEF,MAAMc,qBAAqB,GAAG,CAAC;EAAEE,KAAK;EAAEC;AAAW,CAAC,KAAK;EACvD,OAAO,IAAI7B,OAAO,EAAE,CAAC2B,WAAW,CAACC,KAAK,CAAC,CAACL,UAAU,CAACM,UAAU,CAAC;AAChE,CAAC;AAED,MAAMJ,WAAW,GAAG,CAAC;EAAEG,KAAK;EAAEC;AAAW,CAAC,KAAK;EAC7C,OAAO,IAAI7B,OAAO,EAAE,CAAC2B,WAAW,CAACC,KAAK,CAAC,CAACL,UAAU,CAACM,UAAU,CAACL,GAAG,CAACM,eAAe,CAAC,CAAC;AACrF,CAAC;AAED,MAAMA,eAAe,GAAG,CAAC;EACvBC,SAAS;EACTC,kBAAkB,GAAG,CAAC,CAAC;EACvBC,WAAW;EACXC,cAAc,GAAG,CAAC,CAAC;EACnBxB;AACF,CAAC,KAAK;EACJ,OAAO,IAAIV,OAAO,EAAE,CACjBqB,UAAU,CAACU,SAAS,CAAC,CACrBV,UAAU,CAACW,kBAAkB,CAAC,CAC9BG,UAAU,CAACF,WAAW,CAAC,CACvBE,UAAU,CAACD,cAAc,CAAC,CAC1Bb,UAAU,CAACX,QAAQ,CAAC;AACzB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}