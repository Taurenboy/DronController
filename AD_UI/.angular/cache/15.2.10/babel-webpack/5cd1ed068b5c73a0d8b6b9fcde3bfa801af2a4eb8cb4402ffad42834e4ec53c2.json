{"ast":null,"code":"var _asyncToGenerator = require(\"C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n/**\n * http://www.ietf.org/rfc/rfc2595.txt\n *\n * The mechanism consists of a single message from the client to the\n * server.  The client sends the authorization identity (identity to\n * login as), followed by a US-ASCII NUL character, followed by the\n * authentication identity (identity whose password will be used),\n * followed by a US-ASCII NUL character, followed by the clear-text\n * password.  The client may leave the authorization identity empty to\n * indicate that it is the same as the authentication identity.\n *\n * The server will verify the authentication identity and password with\n * the system authentication database and verify that the authentication\n * credentials permit the client to login as the authorization identity.\n * If both steps succeed, the user is logged in.\n */\n\nconst Encoder = require('../../encoder');\nconst US_ASCII_NULL_CHAR = '\\u0000';\nmodule.exports = ({\n  authorizationIdentity = null,\n  username,\n  password\n}) => ({\n  encode: function () {\n    var _ref = _asyncToGenerator(function* () {\n      return new Encoder().writeBytes([authorizationIdentity, username, password].join(US_ASCII_NULL_CHAR)).buffer;\n    });\n    return function encode() {\n      return _ref.apply(this, arguments);\n    };\n  }()\n});","map":{"version":3,"names":["Encoder","require","US_ASCII_NULL_CHAR","module","exports","authorizationIdentity","username","password","encode","writeBytes","join","buffer"],"sources":["C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/kafkajs/src/protocol/sasl/plain/request.js"],"sourcesContent":["/**\n * http://www.ietf.org/rfc/rfc2595.txt\n *\n * The mechanism consists of a single message from the client to the\n * server.  The client sends the authorization identity (identity to\n * login as), followed by a US-ASCII NUL character, followed by the\n * authentication identity (identity whose password will be used),\n * followed by a US-ASCII NUL character, followed by the clear-text\n * password.  The client may leave the authorization identity empty to\n * indicate that it is the same as the authentication identity.\n *\n * The server will verify the authentication identity and password with\n * the system authentication database and verify that the authentication\n * credentials permit the client to login as the authorization identity.\n * If both steps succeed, the user is logged in.\n */\n\nconst Encoder = require('../../encoder')\n\nconst US_ASCII_NULL_CHAR = '\\u0000'\n\nmodule.exports = ({ authorizationIdentity = null, username, password }) => ({\n  encode: async () => {\n    return new Encoder().writeBytes(\n      [authorizationIdentity, username, password].join(US_ASCII_NULL_CHAR)\n    ).buffer\n  },\n})\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,eAAe,CAAC;AAExC,MAAMC,kBAAkB,GAAG,QAAQ;AAEnCC,MAAM,CAACC,OAAO,GAAG,CAAC;EAAEC,qBAAqB,GAAG,IAAI;EAAEC,QAAQ;EAAEC;AAAS,CAAC,MAAM;EAC1EC,MAAM;IAAA,6BAAE,aAAY;MAClB,OAAO,IAAIR,OAAO,EAAE,CAACS,UAAU,CAC7B,CAACJ,qBAAqB,EAAEC,QAAQ,EAAEC,QAAQ,CAAC,CAACG,IAAI,CAACR,kBAAkB,CAAC,CACrE,CAACS,MAAM;IACV,CAAC;IAAA;MAAA;IAAA;EAAA;AACH,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}