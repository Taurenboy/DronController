{"ast":null,"code":"var _asyncToGenerator = require(\"C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nconst Encoder = require('../../../encoder');\nconst {\n  ListOffsets: apiKey\n} = require('../../apiKeys');\n\n/**\n * ListOffsets Request (Version: 1) => replica_id [topics]\n *   replica_id => INT32\n *   topics => topic [partitions]\n *     topic => STRING\n *     partitions => partition timestamp\n *       partition => INT32\n *       timestamp => INT64\n */\nmodule.exports = ({\n  replicaId,\n  topics\n}) => ({\n  apiKey,\n  apiVersion: 1,\n  apiName: 'ListOffsets',\n  encode: function () {\n    var _ref = _asyncToGenerator(function* () {\n      return new Encoder().writeInt32(replicaId).writeArray(topics.map(encodeTopic));\n    });\n    return function encode() {\n      return _ref.apply(this, arguments);\n    };\n  }()\n});\nconst encodeTopic = ({\n  topic,\n  partitions\n}) => {\n  return new Encoder().writeString(topic).writeArray(partitions.map(encodePartition));\n};\nconst encodePartition = ({\n  partition,\n  timestamp = -1\n}) => {\n  return new Encoder().writeInt32(partition).writeInt64(timestamp);\n};","map":{"version":3,"names":["Encoder","require","ListOffsets","apiKey","module","exports","replicaId","topics","apiVersion","apiName","encode","writeInt32","writeArray","map","encodeTopic","topic","partitions","writeString","encodePartition","partition","timestamp","writeInt64"],"sources":["C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/kafkajs/src/protocol/requests/listOffsets/v1/request.js"],"sourcesContent":["const Encoder = require('../../../encoder')\nconst { ListOffsets: apiKey } = require('../../apiKeys')\n\n/**\n * ListOffsets Request (Version: 1) => replica_id [topics]\n *   replica_id => INT32\n *   topics => topic [partitions]\n *     topic => STRING\n *     partitions => partition timestamp\n *       partition => INT32\n *       timestamp => INT64\n */\nmodule.exports = ({ replicaId, topics }) => ({\n  apiKey,\n  apiVersion: 1,\n  apiName: 'ListOffsets',\n  encode: async () => {\n    return new Encoder().writeInt32(replicaId).writeArray(topics.map(encodeTopic))\n  },\n})\n\nconst encodeTopic = ({ topic, partitions }) => {\n  return new Encoder().writeString(topic).writeArray(partitions.map(encodePartition))\n}\n\nconst encodePartition = ({ partition, timestamp = -1 }) => {\n  return new Encoder().writeInt32(partition).writeInt64(timestamp)\n}\n"],"mappings":";AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAC3C,MAAM;EAAEC,WAAW,EAAEC;AAAO,CAAC,GAAGF,OAAO,CAAC,eAAe,CAAC;;AAExD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAG,MAAM,CAACC,OAAO,GAAG,CAAC;EAAEC,SAAS;EAAEC;AAAO,CAAC,MAAM;EAC3CJ,MAAM;EACNK,UAAU,EAAE,CAAC;EACbC,OAAO,EAAE,aAAa;EACtBC,MAAM;IAAA,6BAAE,aAAY;MAClB,OAAO,IAAIV,OAAO,EAAE,CAACW,UAAU,CAACL,SAAS,CAAC,CAACM,UAAU,CAACL,MAAM,CAACM,GAAG,CAACC,WAAW,CAAC,CAAC;IAChF,CAAC;IAAA;MAAA;IAAA;EAAA;AACH,CAAC,CAAC;AAEF,MAAMA,WAAW,GAAG,CAAC;EAAEC,KAAK;EAAEC;AAAW,CAAC,KAAK;EAC7C,OAAO,IAAIhB,OAAO,EAAE,CAACiB,WAAW,CAACF,KAAK,CAAC,CAACH,UAAU,CAACI,UAAU,CAACH,GAAG,CAACK,eAAe,CAAC,CAAC;AACrF,CAAC;AAED,MAAMA,eAAe,GAAG,CAAC;EAAEC,SAAS;EAAEC,SAAS,GAAG,CAAC;AAAE,CAAC,KAAK;EACzD,OAAO,IAAIpB,OAAO,EAAE,CAACW,UAAU,CAACQ,SAAS,CAAC,CAACE,UAAU,CAACD,SAAS,CAAC;AAClE,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}