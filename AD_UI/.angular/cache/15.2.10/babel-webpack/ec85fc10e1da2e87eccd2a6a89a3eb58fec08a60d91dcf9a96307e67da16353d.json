{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { io } from 'socket.io-client';\nimport { Kafka } from 'kafkajs';\nimport * as i0 from \"@angular/core\";\nexport class SocketService {\n  constructor() {\n    // Configura la conexión al servidor de sockets\n    this.socket = io('http://localhost:3000', {\n      query: {\n        appName: 'AD_UI' // Nombre de la aplicación\n      },\n\n      transports: ['websocket', 'polling']\n    });\n    this.kafkaClient = new Kafka({\n      clientId: 'AD_UI',\n      brokers: ['localhost:9092']\n    });\n    this.UPDATE_TABLERO_CONSUMER = this.kafkaClient.consumer({\n      groupId: `AD_UI`\n    });\n    this.listenBoard();\n  }\n  sendMessage(message) {\n    this.socket.emit('chatMessage', message);\n  }\n  startDronesApps() {\n    this.socket.emit('start-drone');\n  }\n  startDroneMovement() {\n    this.socket.emit('start-movement');\n  }\n  resetDronesPositions() {\n    this.socket.emit('reset-drone-position');\n  }\n  onMessageReceived(callback) {\n    this.socket.on('tablero', message => {\n      callback(message);\n    });\n  }\n  listenBoard() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      yield _this.UPDATE_TABLERO_CONSUMER.connect();\n      yield _this.UPDATE_TABLERO_CONSUMER.subscribe({\n        topic: 'update-board'\n      });\n      _this.UPDATE_TABLERO_CONSUMER.run({\n        eachMessage: function () {\n          var _ref = _asyncToGenerator(function* ({\n            topic,\n            partition,\n            message\n          }) {\n            console.log('Mensaje recibido en kafka, topic : ' + topic);\n          });\n          return function eachMessage(_x) {\n            return _ref.apply(this, arguments);\n          };\n        }()\n      });\n      yield _this.UPDATE_TABLERO_CONSUMER.disconnect();\n    })();\n  }\n  static #_ = this.ɵfac = function SocketService_Factory(t) {\n    return new (t || SocketService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SocketService,\n    factory: SocketService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":";AACA,SAASA,EAAE,QAAQ,kBAAkB;AACrC,SAAmBC,KAAK,QAAQ,SAAS;;AAKzC,OAAM,MAAOC,aAAa;EAKxBC;IACE;IACA,IAAI,CAACC,MAAM,GAAGJ,EAAE,CAAC,uBAAuB,EAAE;MACxCK,KAAK,EAAE;QACLC,OAAO,EAAE,OAAO,CAAE;OACnB;;MACDC,UAAU,EAAE,CAAC,WAAW,EAAE,SAAS;KACpC,CAAC;IACF,IAAI,CAACC,WAAW,GAAG,IAAIP,KAAK,CAAC;MAC3BQ,QAAQ,EAAE,OAAO;MACjBC,OAAO,EAAE,CAAC,gBAAgB;KAC3B,CAAC;IACF,IAAI,CAACC,uBAAuB,GAAG,IAAI,CAACH,WAAW,CAACI,QAAQ,CAAC;MACvDC,OAAO,EAAE;KACV,CAAC;IACF,IAAI,CAACC,WAAW,EAAE;EACpB;EAEAC,WAAW,CAACC,OAAe;IACzB,IAAI,CAACZ,MAAM,CAACa,IAAI,CAAC,aAAa,EAAED,OAAO,CAAC;EAC1C;EAEAE,eAAe;IACb,IAAI,CAACd,MAAM,CAACa,IAAI,CAAC,aAAa,CAAC;EACjC;EAEAE,kBAAkB;IAChB,IAAI,CAACf,MAAM,CAACa,IAAI,CAAC,gBAAgB,CAAC;EACpC;EAEAG,oBAAoB;IAClB,IAAI,CAAChB,MAAM,CAACa,IAAI,CAAC,sBAAsB,CAAC;EAC1C;EAEAI,iBAAiB,CAACC,QAAmC;IACnD,IAAI,CAAClB,MAAM,CAACmB,EAAE,CAAC,SAAS,EAAGP,OAAe,IAAI;MAC5CM,QAAQ,CAACN,OAAO,CAAC;IACnB,CAAC,CAAC;EACJ;EAEMF,WAAW;IAAA;IAAA;MACf,MAAM,KAAI,CAACH,uBAAuB,CAACa,OAAO,EAAE;MAC5C,MAAM,KAAI,CAACb,uBAAuB,CAACc,SAAS,CAAC;QAAEC,KAAK,EAAE;MAAc,CAAE,CAAC;MACvE,KAAI,CAACf,uBAAuB,CAACgB,GAAG,CAAC;QAC/BC,WAAW;UAAA,6BAAE,WAAO;YAAEF,KAAK;YAAEG,SAAS;YAAEb;UAAO,CAAE,EAAI;YACnDc,OAAO,CAACC,GAAG,CAAC,qCAAqC,GAAGL,KAAK,CAAC;UAC5D,CAAC;UAAA;YAAA;UAAA;QAAA;OACF,CAAC;MACF,MAAM,KAAI,CAACf,uBAAuB,CAACqB,UAAU,EAAE;IAAC;EAClD;EAAC;qBAtDU9B,aAAa;EAAA;EAAA;WAAbA,aAAa;IAAA+B,SAAb/B,aAAa;IAAAgC,YAFZ;EAAM","names":["io","Kafka","SocketService","constructor","socket","query","appName","transports","kafkaClient","clientId","brokers","UPDATE_TABLERO_CONSUMER","consumer","groupId","listenBoard","sendMessage","message","emit","startDronesApps","startDroneMovement","resetDronesPositions","onMessageReceived","callback","on","connect","subscribe","topic","run","eachMessage","partition","console","log","disconnect","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\ingev\\Documents\\Desarrollo\\Luna\\DronController\\AD_UI\\src\\app\\services\\socket.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { io } from 'socket.io-client';\nimport { Consumer, Kafka } from 'kafkajs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SocketService {\n  private socket: any;\n  kafkaClient: any;\n  UPDATE_TABLERO_CONSUMER: Consumer;\n\n  constructor() {\n    // Configura la conexión al servidor de sockets\n    this.socket = io('http://localhost:3000', {\n      query: {\n        appName: 'AD_UI', // Nombre de la aplicación\n      },\n      transports: ['websocket', 'polling'],\n    });\n    this.kafkaClient = new Kafka({\n      clientId: 'AD_UI',\n      brokers: ['localhost:9092'],\n    });\n    this.UPDATE_TABLERO_CONSUMER = this.kafkaClient.consumer({\n      groupId: `AD_UI`,\n    });\n    this.listenBoard();\n  }\n\n  sendMessage(message: string) {\n    this.socket.emit('chatMessage', message);\n  }\n\n  startDronesApps() {\n    this.socket.emit('start-drone');\n  }\n\n  startDroneMovement() {\n    this.socket.emit('start-movement');\n  }\n\n  resetDronesPositions() {\n    this.socket.emit('reset-drone-position');\n  }\n\n  onMessageReceived(callback: (message: string) => void) {\n    this.socket.on('tablero', (message: string) => {\n      callback(message);\n    });\n  }\n\n  async listenBoard() {\n    await this.UPDATE_TABLERO_CONSUMER.connect();\n    await this.UPDATE_TABLERO_CONSUMER.subscribe({ topic: 'update-board' });\n    this.UPDATE_TABLERO_CONSUMER.run({\n      eachMessage: async ({ topic, partition, message }) => {\n        console.log('Mensaje recibido en kafka, topic : ' + topic);\n      },\n    });\n    await this.UPDATE_TABLERO_CONSUMER.disconnect();\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}