{"ast":null,"code":"const {\n  KafkaJSNumberOfRetriesExceeded,\n  KafkaJSNonRetriableError\n} = require('../errors');\nconst isTestMode = process.env.NODE_ENV === 'test';\nconst RETRY_DEFAULT = isTestMode ? require('./defaults.test') : require('./defaults');\nconst random = (min, max) => {\n  return Math.random() * (max - min) + min;\n};\nconst randomFromRetryTime = (factor, retryTime) => {\n  const delta = factor * retryTime;\n  return Math.ceil(random(retryTime - delta, retryTime + delta));\n};\nconst UNRECOVERABLE_ERRORS = ['RangeError', 'ReferenceError', 'SyntaxError', 'TypeError'];\nconst isErrorUnrecoverable = e => UNRECOVERABLE_ERRORS.includes(e.name);\nconst isErrorRetriable = error => (error.retriable || error.retriable !== false) && !isErrorUnrecoverable(error);\nconst createRetriable = (configs, resolve, reject, fn) => {\n  let aborted = false;\n  const {\n    factor,\n    multiplier,\n    maxRetryTime,\n    retries\n  } = configs;\n  const bail = error => {\n    aborted = true;\n    reject(error || new Error('Aborted'));\n  };\n  const calculateExponentialRetryTime = retryTime => {\n    return Math.min(randomFromRetryTime(factor, retryTime) * multiplier, maxRetryTime);\n  };\n  const retry = (retryTime, retryCount = 0) => {\n    if (aborted) return;\n    const nextRetryTime = calculateExponentialRetryTime(retryTime);\n    const shouldRetry = retryCount < retries;\n    const scheduleRetry = () => {\n      setTimeout(() => retry(nextRetryTime, retryCount + 1), retryTime);\n    };\n    fn(bail, retryCount, retryTime).then(resolve).catch(e => {\n      if (isErrorRetriable(e)) {\n        if (shouldRetry) {\n          scheduleRetry();\n        } else {\n          reject(new KafkaJSNumberOfRetriesExceeded(e, {\n            retryCount,\n            retryTime,\n            cause: e.cause || e\n          }));\n        }\n      } else {\n        reject(new KafkaJSNonRetriableError(e, {\n          cause: e.cause || e\n        }));\n      }\n    });\n  };\n  return retry;\n};\n\n/**\n * @typedef {(fn: (bail: (err: Error) => void, retryCount: number, retryTime: number) => any) => Promise<ReturnType<fn>>} Retrier\n */\n\n/**\n * @param {import(\"../../types\").RetryOptions} [opts]\n * @returns {Retrier}\n */\nmodule.exports = (opts = {}) => fn => {\n  return new Promise((resolve, reject) => {\n    const configs = Object.assign({}, RETRY_DEFAULT, opts);\n    const start = createRetriable(configs, resolve, reject, fn);\n    start(randomFromRetryTime(configs.factor, configs.initialRetryTime));\n  });\n};","map":{"version":3,"names":["KafkaJSNumberOfRetriesExceeded","KafkaJSNonRetriableError","require","isTestMode","process","env","NODE_ENV","RETRY_DEFAULT","random","min","max","Math","randomFromRetryTime","factor","retryTime","delta","ceil","UNRECOVERABLE_ERRORS","isErrorUnrecoverable","e","includes","name","isErrorRetriable","error","retriable","createRetriable","configs","resolve","reject","fn","aborted","multiplier","maxRetryTime","retries","bail","Error","calculateExponentialRetryTime","retry","retryCount","nextRetryTime","shouldRetry","scheduleRetry","setTimeout","then","catch","cause","module","exports","opts","Promise","Object","assign","start","initialRetryTime"],"sources":["C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/kafkajs/src/retry/index.js"],"sourcesContent":["const { KafkaJSNumberOfRetriesExceeded, KafkaJSNonRetriableError } = require('../errors')\n\nconst isTestMode = process.env.NODE_ENV === 'test'\nconst RETRY_DEFAULT = isTestMode ? require('./defaults.test') : require('./defaults')\n\nconst random = (min, max) => {\n  return Math.random() * (max - min) + min\n}\n\nconst randomFromRetryTime = (factor, retryTime) => {\n  const delta = factor * retryTime\n  return Math.ceil(random(retryTime - delta, retryTime + delta))\n}\n\nconst UNRECOVERABLE_ERRORS = ['RangeError', 'ReferenceError', 'SyntaxError', 'TypeError']\nconst isErrorUnrecoverable = e => UNRECOVERABLE_ERRORS.includes(e.name)\nconst isErrorRetriable = error =>\n  (error.retriable || error.retriable !== false) && !isErrorUnrecoverable(error)\n\nconst createRetriable = (configs, resolve, reject, fn) => {\n  let aborted = false\n  const { factor, multiplier, maxRetryTime, retries } = configs\n\n  const bail = error => {\n    aborted = true\n    reject(error || new Error('Aborted'))\n  }\n\n  const calculateExponentialRetryTime = retryTime => {\n    return Math.min(randomFromRetryTime(factor, retryTime) * multiplier, maxRetryTime)\n  }\n\n  const retry = (retryTime, retryCount = 0) => {\n    if (aborted) return\n\n    const nextRetryTime = calculateExponentialRetryTime(retryTime)\n    const shouldRetry = retryCount < retries\n\n    const scheduleRetry = () => {\n      setTimeout(() => retry(nextRetryTime, retryCount + 1), retryTime)\n    }\n\n    fn(bail, retryCount, retryTime)\n      .then(resolve)\n      .catch(e => {\n        if (isErrorRetriable(e)) {\n          if (shouldRetry) {\n            scheduleRetry()\n          } else {\n            reject(\n              new KafkaJSNumberOfRetriesExceeded(e, { retryCount, retryTime, cause: e.cause || e })\n            )\n          }\n        } else {\n          reject(new KafkaJSNonRetriableError(e, { cause: e.cause || e }))\n        }\n      })\n  }\n\n  return retry\n}\n\n/**\n * @typedef {(fn: (bail: (err: Error) => void, retryCount: number, retryTime: number) => any) => Promise<ReturnType<fn>>} Retrier\n */\n\n/**\n * @param {import(\"../../types\").RetryOptions} [opts]\n * @returns {Retrier}\n */\nmodule.exports = (opts = {}) => fn => {\n  return new Promise((resolve, reject) => {\n    const configs = Object.assign({}, RETRY_DEFAULT, opts)\n    const start = createRetriable(configs, resolve, reject, fn)\n    start(randomFromRetryTime(configs.factor, configs.initialRetryTime))\n  })\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}