{"ast":null,"code":"const createState = topic => ({\n  topic,\n  paused: new Set(),\n  pauseAll: false,\n  resumed: new Set()\n});\nmodule.exports = class SubscriptionState {\n  constructor() {\n    this.assignedPartitionsByTopic = {};\n    this.subscriptionStatesByTopic = {};\n  }\n\n  /**\n   * Replace the current assignment with a new set of assignments\n   *\n   * @param {Array<TopicPartitions>} topicPartitions Example: [{ topic: 'topic-name', partitions: [1, 2] }]\n   */\n  assign(topicPartitions = []) {\n    this.assignedPartitionsByTopic = topicPartitions.reduce((assigned, {\n      topic,\n      partitions = []\n    }) => {\n      return {\n        ...assigned,\n        [topic]: {\n          topic,\n          partitions\n        }\n      };\n    }, {});\n  }\n\n  /**\n   * @param {Array<TopicPartitions>} topicPartitions Example: [{ topic: 'topic-name', partitions: [1, 2] }]\n   */\n  pause(topicPartitions = []) {\n    topicPartitions.forEach(({\n      topic,\n      partitions\n    }) => {\n      const state = this.subscriptionStatesByTopic[topic] || createState(topic);\n      if (typeof partitions === 'undefined') {\n        state.paused.clear();\n        state.resumed.clear();\n        state.pauseAll = true;\n      } else if (Array.isArray(partitions)) {\n        partitions.forEach(partition => {\n          state.paused.add(partition);\n          state.resumed.delete(partition);\n        });\n        state.pauseAll = false;\n      }\n      this.subscriptionStatesByTopic[topic] = state;\n    });\n  }\n\n  /**\n   * @param {Array<TopicPartitions>} topicPartitions Example: [{ topic: 'topic-name', partitions: [1, 2] }]\n   */\n  resume(topicPartitions = []) {\n    topicPartitions.forEach(({\n      topic,\n      partitions\n    }) => {\n      const state = this.subscriptionStatesByTopic[topic] || createState(topic);\n      if (typeof partitions === 'undefined') {\n        state.paused.clear();\n        state.resumed.clear();\n        state.pauseAll = false;\n      } else if (Array.isArray(partitions)) {\n        partitions.forEach(partition => {\n          state.paused.delete(partition);\n          if (state.pauseAll) {\n            state.resumed.add(partition);\n          }\n        });\n      }\n      this.subscriptionStatesByTopic[topic] = state;\n    });\n  }\n\n  /**\n   * @returns {Array<import(\"../../types\").TopicPartitions>} topicPartitions\n   * Example: [{ topic: 'topic-name', partitions: [1, 2] }]\n   */\n  assigned() {\n    return Object.values(this.assignedPartitionsByTopic).map(({\n      topic,\n      partitions\n    }) => ({\n      topic,\n      partitions: partitions.sort()\n    }));\n  }\n\n  /**\n   * @returns {Array<import(\"../../types\").TopicPartitions>} topicPartitions\n   * Example: [{ topic: 'topic-name', partitions: [1, 2] }]\n   */\n  active() {\n    return Object.values(this.assignedPartitionsByTopic).map(({\n      topic,\n      partitions\n    }) => ({\n      topic,\n      partitions: partitions.filter(partition => !this.isPaused(topic, partition)).sort()\n    }));\n  }\n\n  /**\n   * @returns {Array<import(\"../../types\").TopicPartitions>} topicPartitions\n   * Example: [{ topic: 'topic-name', partitions: [1, 2] }]\n   */\n  paused() {\n    return Object.values(this.assignedPartitionsByTopic).map(({\n      topic,\n      partitions\n    }) => ({\n      topic,\n      partitions: partitions.filter(partition => this.isPaused(topic, partition)).sort()\n    })).filter(({\n      partitions\n    }) => partitions.length !== 0);\n  }\n  isPaused(topic, partition) {\n    const state = this.subscriptionStatesByTopic[topic];\n    if (!state) {\n      return false;\n    }\n    const partitionResumed = state.resumed.has(partition);\n    const partitionPaused = state.paused.has(partition);\n    return state.pauseAll && !partitionResumed || partitionPaused;\n  }\n};","map":{"version":3,"names":["createState","topic","paused","Set","pauseAll","resumed","module","exports","SubscriptionState","constructor","assignedPartitionsByTopic","subscriptionStatesByTopic","assign","topicPartitions","reduce","assigned","partitions","pause","forEach","state","clear","Array","isArray","partition","add","delete","resume","Object","values","map","sort","active","filter","isPaused","length","partitionResumed","has","partitionPaused"],"sources":["C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/kafkajs/src/consumer/subscriptionState.js"],"sourcesContent":["const createState = topic => ({\n  topic,\n  paused: new Set(),\n  pauseAll: false,\n  resumed: new Set(),\n})\n\nmodule.exports = class SubscriptionState {\n  constructor() {\n    this.assignedPartitionsByTopic = {}\n    this.subscriptionStatesByTopic = {}\n  }\n\n  /**\n   * Replace the current assignment with a new set of assignments\n   *\n   * @param {Array<TopicPartitions>} topicPartitions Example: [{ topic: 'topic-name', partitions: [1, 2] }]\n   */\n  assign(topicPartitions = []) {\n    this.assignedPartitionsByTopic = topicPartitions.reduce(\n      (assigned, { topic, partitions = [] }) => {\n        return { ...assigned, [topic]: { topic, partitions } }\n      },\n      {}\n    )\n  }\n\n  /**\n   * @param {Array<TopicPartitions>} topicPartitions Example: [{ topic: 'topic-name', partitions: [1, 2] }]\n   */\n  pause(topicPartitions = []) {\n    topicPartitions.forEach(({ topic, partitions }) => {\n      const state = this.subscriptionStatesByTopic[topic] || createState(topic)\n\n      if (typeof partitions === 'undefined') {\n        state.paused.clear()\n        state.resumed.clear()\n        state.pauseAll = true\n      } else if (Array.isArray(partitions)) {\n        partitions.forEach(partition => {\n          state.paused.add(partition)\n          state.resumed.delete(partition)\n        })\n        state.pauseAll = false\n      }\n\n      this.subscriptionStatesByTopic[topic] = state\n    })\n  }\n\n  /**\n   * @param {Array<TopicPartitions>} topicPartitions Example: [{ topic: 'topic-name', partitions: [1, 2] }]\n   */\n  resume(topicPartitions = []) {\n    topicPartitions.forEach(({ topic, partitions }) => {\n      const state = this.subscriptionStatesByTopic[topic] || createState(topic)\n\n      if (typeof partitions === 'undefined') {\n        state.paused.clear()\n        state.resumed.clear()\n        state.pauseAll = false\n      } else if (Array.isArray(partitions)) {\n        partitions.forEach(partition => {\n          state.paused.delete(partition)\n\n          if (state.pauseAll) {\n            state.resumed.add(partition)\n          }\n        })\n      }\n\n      this.subscriptionStatesByTopic[topic] = state\n    })\n  }\n\n  /**\n   * @returns {Array<import(\"../../types\").TopicPartitions>} topicPartitions\n   * Example: [{ topic: 'topic-name', partitions: [1, 2] }]\n   */\n  assigned() {\n    return Object.values(this.assignedPartitionsByTopic).map(({ topic, partitions }) => ({\n      topic,\n      partitions: partitions.sort(),\n    }))\n  }\n\n  /**\n   * @returns {Array<import(\"../../types\").TopicPartitions>} topicPartitions\n   * Example: [{ topic: 'topic-name', partitions: [1, 2] }]\n   */\n  active() {\n    return Object.values(this.assignedPartitionsByTopic).map(({ topic, partitions }) => ({\n      topic,\n      partitions: partitions.filter(partition => !this.isPaused(topic, partition)).sort(),\n    }))\n  }\n\n  /**\n   * @returns {Array<import(\"../../types\").TopicPartitions>} topicPartitions\n   * Example: [{ topic: 'topic-name', partitions: [1, 2] }]\n   */\n  paused() {\n    return Object.values(this.assignedPartitionsByTopic)\n      .map(({ topic, partitions }) => ({\n        topic,\n        partitions: partitions.filter(partition => this.isPaused(topic, partition)).sort(),\n      }))\n      .filter(({ partitions }) => partitions.length !== 0)\n  }\n\n  isPaused(topic, partition) {\n    const state = this.subscriptionStatesByTopic[topic]\n\n    if (!state) {\n      return false\n    }\n\n    const partitionResumed = state.resumed.has(partition)\n    const partitionPaused = state.paused.has(partition)\n\n    return (state.pauseAll && !partitionResumed) || partitionPaused\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}