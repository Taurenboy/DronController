{"ast":null,"code":"var _asyncToGenerator = require(\"C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nconst Decoder = require('../../../decoder');\nconst {\n  parse: parseV2\n} = require('../v2/response');\n\n/**\n * OffsetFetch Response (Version: 3) => throttle_time_ms [responses] error_code\n *   throttle_time_ms => INT32\n *   responses => topic [partition_responses]\n *     topic => STRING\n *     partition_responses => partition offset metadata error_code\n *       partition => INT32\n *       offset => INT64\n *       metadata => NULLABLE_STRING\n *       error_code => INT16\n *   error_code => INT16\n */\n\nconst decode = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (rawData) {\n    const decoder = new Decoder(rawData);\n    return {\n      throttleTime: decoder.readInt32(),\n      responses: decoder.readArray(decodeResponses),\n      errorCode: decoder.readInt16()\n    };\n  });\n  return function decode(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nconst decodeResponses = decoder => ({\n  topic: decoder.readString(),\n  partitions: decoder.readArray(decodePartitions)\n});\nconst decodePartitions = decoder => ({\n  partition: decoder.readInt32(),\n  offset: decoder.readInt64().toString(),\n  metadata: decoder.readString(),\n  errorCode: decoder.readInt16()\n});\nmodule.exports = {\n  decode,\n  parse: parseV2\n};","map":{"version":3,"names":["Decoder","require","parse","parseV2","decode","rawData","decoder","throttleTime","readInt32","responses","readArray","decodeResponses","errorCode","readInt16","topic","readString","partitions","decodePartitions","partition","offset","readInt64","toString","metadata","module","exports"],"sources":["C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/kafkajs/src/protocol/requests/offsetFetch/v3/response.js"],"sourcesContent":["const Decoder = require('../../../decoder')\nconst { parse: parseV2 } = require('../v2/response')\n\n/**\n * OffsetFetch Response (Version: 3) => throttle_time_ms [responses] error_code\n *   throttle_time_ms => INT32\n *   responses => topic [partition_responses]\n *     topic => STRING\n *     partition_responses => partition offset metadata error_code\n *       partition => INT32\n *       offset => INT64\n *       metadata => NULLABLE_STRING\n *       error_code => INT16\n *   error_code => INT16\n */\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData)\n  return {\n    throttleTime: decoder.readInt32(),\n    responses: decoder.readArray(decodeResponses),\n    errorCode: decoder.readInt16(),\n  }\n}\n\nconst decodeResponses = decoder => ({\n  topic: decoder.readString(),\n  partitions: decoder.readArray(decodePartitions),\n})\n\nconst decodePartitions = decoder => ({\n  partition: decoder.readInt32(),\n  offset: decoder.readInt64().toString(),\n  metadata: decoder.readString(),\n  errorCode: decoder.readInt16(),\n})\n\nmodule.exports = {\n  decode,\n  parse: parseV2,\n}\n"],"mappings":";AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAC3C,MAAM;EAAEC,KAAK,EAAEC;AAAQ,CAAC,GAAGF,OAAO,CAAC,gBAAgB,CAAC;;AAEpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMG,MAAM;EAAA,6BAAG,WAAMC,OAAO,EAAI;IAC9B,MAAMC,OAAO,GAAG,IAAIN,OAAO,CAACK,OAAO,CAAC;IACpC,OAAO;MACLE,YAAY,EAAED,OAAO,CAACE,SAAS,EAAE;MACjCC,SAAS,EAAEH,OAAO,CAACI,SAAS,CAACC,eAAe,CAAC;MAC7CC,SAAS,EAAEN,OAAO,CAACO,SAAS;IAC9B,CAAC;EACH,CAAC;EAAA,gBAPKT,MAAM;IAAA;EAAA;AAAA,GAOX;AAED,MAAMO,eAAe,GAAGL,OAAO,KAAK;EAClCQ,KAAK,EAAER,OAAO,CAACS,UAAU,EAAE;EAC3BC,UAAU,EAAEV,OAAO,CAACI,SAAS,CAACO,gBAAgB;AAChD,CAAC,CAAC;AAEF,MAAMA,gBAAgB,GAAGX,OAAO,KAAK;EACnCY,SAAS,EAAEZ,OAAO,CAACE,SAAS,EAAE;EAC9BW,MAAM,EAAEb,OAAO,CAACc,SAAS,EAAE,CAACC,QAAQ,EAAE;EACtCC,QAAQ,EAAEhB,OAAO,CAACS,UAAU,EAAE;EAC9BH,SAAS,EAAEN,OAAO,CAACO,SAAS;AAC9B,CAAC,CAAC;AAEFU,MAAM,CAACC,OAAO,GAAG;EACfpB,MAAM;EACNF,KAAK,EAAEC;AACT,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}