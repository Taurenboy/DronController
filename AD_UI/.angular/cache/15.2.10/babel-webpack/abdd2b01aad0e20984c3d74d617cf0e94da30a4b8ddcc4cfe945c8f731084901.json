{"ast":null,"code":"/* eslint-disable */\nconst Long = require('../../../utils/long');\n\n// Based on the kafka client 0.10.2 murmur2 implementation\n// https://github.com/apache/kafka/blob/0.10.2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java#L364\n\nconst SEED = Long.fromValue(0x9747b28c);\n\n// 'm' and 'r' are mixing constants generated offline.\n// They're not really 'magic', they just happen to work well.\nconst M = Long.fromValue(0x5bd1e995);\nconst R = Long.fromValue(24);\nmodule.exports = key => {\n  const data = Buffer.isBuffer(key) ? key : Buffer.from(String(key));\n  const length = data.length;\n\n  // Initialize the hash to a random value\n  let h = Long.fromValue(SEED.xor(length));\n  let length4 = Math.floor(length / 4);\n  for (let i = 0; i < length4; i++) {\n    const i4 = i * 4;\n    let k = (data[i4 + 0] & 0xff) + ((data[i4 + 1] & 0xff) << 8) + ((data[i4 + 2] & 0xff) << 16) + ((data[i4 + 3] & 0xff) << 24);\n    k = Long.fromValue(k);\n    k = k.multiply(M);\n    k = k.xor(k.toInt() >>> R);\n    k = Long.fromValue(k).multiply(M);\n    h = h.multiply(M);\n    h = h.xor(k);\n  }\n\n  // Handle the last few bytes of the input array\n  switch (length % 4) {\n    case 3:\n      h = h.xor((data[(length & ~3) + 2] & 0xff) << 16);\n    case 2:\n      h = h.xor((data[(length & ~3) + 1] & 0xff) << 8);\n    case 1:\n      h = h.xor(data[length & ~3] & 0xff);\n      h = h.multiply(M);\n  }\n  h = h.xor(h.toInt() >>> 13);\n  h = h.multiply(M);\n  h = h.xor(h.toInt() >>> 15);\n  return h.toInt();\n};","map":{"version":3,"names":["Long","require","SEED","fromValue","M","R","module","exports","key","data","Buffer","isBuffer","from","String","length","h","xor","length4","Math","floor","i","i4","k","multiply","toInt"],"sources":["C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/kafkajs/src/producer/partitioners/default/murmur2.js"],"sourcesContent":["/* eslint-disable */\nconst Long = require('../../../utils/long')\n\n// Based on the kafka client 0.10.2 murmur2 implementation\n// https://github.com/apache/kafka/blob/0.10.2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java#L364\n\nconst SEED = Long.fromValue(0x9747b28c)\n\n// 'm' and 'r' are mixing constants generated offline.\n// They're not really 'magic', they just happen to work well.\nconst M = Long.fromValue(0x5bd1e995)\nconst R = Long.fromValue(24)\n\nmodule.exports = key => {\n  const data = Buffer.isBuffer(key) ? key : Buffer.from(String(key))\n  const length = data.length\n\n  // Initialize the hash to a random value\n  let h = Long.fromValue(SEED.xor(length))\n  let length4 = Math.floor(length / 4)\n\n  for (let i = 0; i < length4; i++) {\n    const i4 = i * 4\n    let k =\n      (data[i4 + 0] & 0xff) +\n      ((data[i4 + 1] & 0xff) << 8) +\n      ((data[i4 + 2] & 0xff) << 16) +\n      ((data[i4 + 3] & 0xff) << 24)\n    k = Long.fromValue(k)\n    k = k.multiply(M)\n    k = k.xor(k.toInt() >>> R)\n    k = Long.fromValue(k).multiply(M)\n    h = h.multiply(M)\n    h = h.xor(k)\n  }\n\n  // Handle the last few bytes of the input array\n  switch (length % 4) {\n    case 3:\n      h = h.xor((data[(length & ~3) + 2] & 0xff) << 16)\n    case 2:\n      h = h.xor((data[(length & ~3) + 1] & 0xff) << 8)\n    case 1:\n      h = h.xor(data[length & ~3] & 0xff)\n      h = h.multiply(M)\n  }\n\n  h = h.xor(h.toInt() >>> 13)\n  h = h.multiply(M)\n  h = h.xor(h.toInt() >>> 15)\n\n  return h.toInt()\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}