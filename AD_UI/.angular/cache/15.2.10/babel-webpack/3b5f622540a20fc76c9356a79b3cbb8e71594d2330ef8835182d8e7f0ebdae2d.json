{"ast":null,"code":"var _asyncToGenerator = require(\"C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nconst Decoder = require('../../../decoder');\nconst {\n  failure,\n  createErrorFromCode\n} = require('../../../error');\n\n/**\n * Offsets Response (Version: 0) => [responses]\n *   responses => topic [partition_responses]\n *     topic => STRING\n *     partition_responses => partition error_code [offsets]\n *       partition => INT32\n *       error_code => INT16\n *       offsets => INT64\n */\n\nconst decode = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (rawData) {\n    const decoder = new Decoder(rawData);\n    return {\n      responses: decoder.readArray(decodeResponses)\n    };\n  });\n  return function decode(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nconst decodeResponses = decoder => ({\n  topic: decoder.readString(),\n  partitions: decoder.readArray(decodePartitions)\n});\nconst decodePartitions = decoder => ({\n  partition: decoder.readInt32(),\n  errorCode: decoder.readInt16(),\n  offsets: decoder.readArray(decodeOffsets)\n});\nconst decodeOffsets = decoder => decoder.readInt64().toString();\nconst parse = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(function* (data) {\n    const partitionsWithError = data.responses.flatMap(response => response.partitions.filter(partition => failure(partition.errorCode)));\n    const partitionWithError = partitionsWithError[0];\n    if (partitionWithError) {\n      throw createErrorFromCode(partitionWithError.errorCode);\n    }\n    return data;\n  });\n  return function parse(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nmodule.exports = {\n  decode,\n  parse\n};","map":{"version":3,"names":["Decoder","require","failure","createErrorFromCode","decode","rawData","decoder","responses","readArray","decodeResponses","topic","readString","partitions","decodePartitions","partition","readInt32","errorCode","readInt16","offsets","decodeOffsets","readInt64","toString","parse","data","partitionsWithError","flatMap","response","filter","partitionWithError","module","exports"],"sources":["C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/kafkajs/src/protocol/requests/listOffsets/v0/response.js"],"sourcesContent":["const Decoder = require('../../../decoder')\nconst { failure, createErrorFromCode } = require('../../../error')\n\n/**\n * Offsets Response (Version: 0) => [responses]\n *   responses => topic [partition_responses]\n *     topic => STRING\n *     partition_responses => partition error_code [offsets]\n *       partition => INT32\n *       error_code => INT16\n *       offsets => INT64\n */\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData)\n  return {\n    responses: decoder.readArray(decodeResponses),\n  }\n}\n\nconst decodeResponses = decoder => ({\n  topic: decoder.readString(),\n  partitions: decoder.readArray(decodePartitions),\n})\n\nconst decodePartitions = decoder => ({\n  partition: decoder.readInt32(),\n  errorCode: decoder.readInt16(),\n  offsets: decoder.readArray(decodeOffsets),\n})\n\nconst decodeOffsets = decoder => decoder.readInt64().toString()\n\nconst parse = async data => {\n  const partitionsWithError = data.responses.flatMap(response =>\n    response.partitions.filter(partition => failure(partition.errorCode))\n  )\n  const partitionWithError = partitionsWithError[0]\n  if (partitionWithError) {\n    throw createErrorFromCode(partitionWithError.errorCode)\n  }\n\n  return data\n}\n\nmodule.exports = {\n  decode,\n  parse,\n}\n"],"mappings":";AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAC3C,MAAM;EAAEC,OAAO;EAAEC;AAAoB,CAAC,GAAGF,OAAO,CAAC,gBAAgB,CAAC;;AAElE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMG,MAAM;EAAA,6BAAG,WAAMC,OAAO,EAAI;IAC9B,MAAMC,OAAO,GAAG,IAAIN,OAAO,CAACK,OAAO,CAAC;IACpC,OAAO;MACLE,SAAS,EAAED,OAAO,CAACE,SAAS,CAACC,eAAe;IAC9C,CAAC;EACH,CAAC;EAAA,gBALKL,MAAM;IAAA;EAAA;AAAA,GAKX;AAED,MAAMK,eAAe,GAAGH,OAAO,KAAK;EAClCI,KAAK,EAAEJ,OAAO,CAACK,UAAU,EAAE;EAC3BC,UAAU,EAAEN,OAAO,CAACE,SAAS,CAACK,gBAAgB;AAChD,CAAC,CAAC;AAEF,MAAMA,gBAAgB,GAAGP,OAAO,KAAK;EACnCQ,SAAS,EAAER,OAAO,CAACS,SAAS,EAAE;EAC9BC,SAAS,EAAEV,OAAO,CAACW,SAAS,EAAE;EAC9BC,OAAO,EAAEZ,OAAO,CAACE,SAAS,CAACW,aAAa;AAC1C,CAAC,CAAC;AAEF,MAAMA,aAAa,GAAGb,OAAO,IAAIA,OAAO,CAACc,SAAS,EAAE,CAACC,QAAQ,EAAE;AAE/D,MAAMC,KAAK;EAAA,8BAAG,WAAMC,IAAI,EAAI;IAC1B,MAAMC,mBAAmB,GAAGD,IAAI,CAAChB,SAAS,CAACkB,OAAO,CAACC,QAAQ,IACzDA,QAAQ,CAACd,UAAU,CAACe,MAAM,CAACb,SAAS,IAAIZ,OAAO,CAACY,SAAS,CAACE,SAAS,CAAC,CAAC,CACtE;IACD,MAAMY,kBAAkB,GAAGJ,mBAAmB,CAAC,CAAC,CAAC;IACjD,IAAII,kBAAkB,EAAE;MACtB,MAAMzB,mBAAmB,CAACyB,kBAAkB,CAACZ,SAAS,CAAC;IACzD;IAEA,OAAOO,IAAI;EACb,CAAC;EAAA,gBAVKD,KAAK;IAAA;EAAA;AAAA,GAUV;AAEDO,MAAM,CAACC,OAAO,GAAG;EACf1B,MAAM;EACNkB;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}