{"ast":null,"code":"const {\n  KafkaJSNonRetriableError\n} = require('../../../errors');\nconst toNodeCompatible = crypto => ({\n  randomBytes: size => crypto.getRandomValues(Buffer.allocUnsafe(size))\n});\nlet cryptoImplementation = null;\nif (global && global.crypto) {\n  cryptoImplementation = global.crypto.randomBytes === undefined ? toNodeCompatible(global.crypto) : global.crypto;\n} else if (global && global.msCrypto) {\n  cryptoImplementation = toNodeCompatible(global.msCrypto);\n} else if (global && !global.crypto) {\n  cryptoImplementation = require('crypto');\n}\nconst MAX_BYTES = 65536;\nmodule.exports = size => {\n  if (size > MAX_BYTES) {\n    throw new KafkaJSNonRetriableError(`Byte length (${size}) exceeds the max number of bytes of entropy available (${MAX_BYTES})`);\n  }\n  if (!cryptoImplementation) {\n    throw new KafkaJSNonRetriableError('No available crypto implementation');\n  }\n  return cryptoImplementation.randomBytes(size);\n};","map":{"version":3,"names":["KafkaJSNonRetriableError","require","toNodeCompatible","crypto","randomBytes","size","getRandomValues","Buffer","allocUnsafe","cryptoImplementation","global","undefined","msCrypto","MAX_BYTES","module","exports"],"sources":["C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/kafkajs/src/producer/partitioners/legacy/randomBytes.js"],"sourcesContent":["const { KafkaJSNonRetriableError } = require('../../../errors')\n\nconst toNodeCompatible = crypto => ({\n  randomBytes: size => crypto.getRandomValues(Buffer.allocUnsafe(size)),\n})\n\nlet cryptoImplementation = null\nif (global && global.crypto) {\n  cryptoImplementation =\n    global.crypto.randomBytes === undefined ? toNodeCompatible(global.crypto) : global.crypto\n} else if (global && global.msCrypto) {\n  cryptoImplementation = toNodeCompatible(global.msCrypto)\n} else if (global && !global.crypto) {\n  cryptoImplementation = require('crypto')\n}\n\nconst MAX_BYTES = 65536\n\nmodule.exports = size => {\n  if (size > MAX_BYTES) {\n    throw new KafkaJSNonRetriableError(\n      `Byte length (${size}) exceeds the max number of bytes of entropy available (${MAX_BYTES})`\n    )\n  }\n\n  if (!cryptoImplementation) {\n    throw new KafkaJSNonRetriableError('No available crypto implementation')\n  }\n\n  return cryptoImplementation.randomBytes(size)\n}\n"],"mappings":"AAAA,MAAM;EAAEA;AAAyB,CAAC,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AAE/D,MAAMC,gBAAgB,GAAGC,MAAM,KAAK;EAClCC,WAAW,EAAEC,IAAI,IAAIF,MAAM,CAACG,eAAe,CAACC,MAAM,CAACC,WAAW,CAACH,IAAI,CAAC;AACtE,CAAC,CAAC;AAEF,IAAII,oBAAoB,GAAG,IAAI;AAC/B,IAAIC,MAAM,IAAIA,MAAM,CAACP,MAAM,EAAE;EAC3BM,oBAAoB,GAClBC,MAAM,CAACP,MAAM,CAACC,WAAW,KAAKO,SAAS,GAAGT,gBAAgB,CAACQ,MAAM,CAACP,MAAM,CAAC,GAAGO,MAAM,CAACP,MAAM;AAC7F,CAAC,MAAM,IAAIO,MAAM,IAAIA,MAAM,CAACE,QAAQ,EAAE;EACpCH,oBAAoB,GAAGP,gBAAgB,CAACQ,MAAM,CAACE,QAAQ,CAAC;AAC1D,CAAC,MAAM,IAAIF,MAAM,IAAI,CAACA,MAAM,CAACP,MAAM,EAAE;EACnCM,oBAAoB,GAAGR,OAAO,CAAC,QAAQ,CAAC;AAC1C;AAEA,MAAMY,SAAS,GAAG,KAAK;AAEvBC,MAAM,CAACC,OAAO,GAAGV,IAAI,IAAI;EACvB,IAAIA,IAAI,GAAGQ,SAAS,EAAE;IACpB,MAAM,IAAIb,wBAAwB,CAC/B,gBAAeK,IAAK,2DAA0DQ,SAAU,GAAE,CAC5F;EACH;EAEA,IAAI,CAACJ,oBAAoB,EAAE;IACzB,MAAM,IAAIT,wBAAwB,CAAC,oCAAoC,CAAC;EAC1E;EAEA,OAAOS,oBAAoB,CAACL,WAAW,CAACC,IAAI,CAAC;AAC/C,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}