{"ast":null,"code":"var _asyncToGenerator = require(\"C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nconst Decoder = require('../../../decoder');\nconst {\n  failure,\n  createErrorFromCode\n} = require('../../../error');\n/**\n * DeleteGroups Response (Version: 0) => throttle_time_ms [results]\n *  throttle_time_ms => INT32\n *  results => group_id error_code\n *    group_id => STRING\n *    error_code => INT16\n */\n\nconst decodeGroup = decoder => ({\n  groupId: decoder.readString(),\n  errorCode: decoder.readInt16()\n});\nconst decode = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (rawData) {\n    const decoder = new Decoder(rawData);\n    const throttleTimeMs = decoder.readInt32();\n    const results = decoder.readArray(decodeGroup);\n    for (const result of results) {\n      if (failure(result.errorCode)) {\n        result.error = createErrorFromCode(result.errorCode);\n      }\n    }\n    return {\n      throttleTimeMs,\n      results\n    };\n  });\n  return function decode(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nconst parse = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(function* (data) {\n    return data;\n  });\n  return function parse(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nmodule.exports = {\n  decode,\n  parse\n};","map":{"version":3,"names":["Decoder","require","failure","createErrorFromCode","decodeGroup","decoder","groupId","readString","errorCode","readInt16","decode","rawData","throttleTimeMs","readInt32","results","readArray","result","error","parse","data","module","exports"],"sources":["C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/kafkajs/src/protocol/requests/deleteGroups/v0/response.js"],"sourcesContent":["const Decoder = require('../../../decoder')\nconst { failure, createErrorFromCode } = require('../../../error')\n/**\n * DeleteGroups Response (Version: 0) => throttle_time_ms [results]\n *  throttle_time_ms => INT32\n *  results => group_id error_code\n *    group_id => STRING\n *    error_code => INT16\n */\n\nconst decodeGroup = decoder => ({\n  groupId: decoder.readString(),\n  errorCode: decoder.readInt16(),\n})\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData)\n  const throttleTimeMs = decoder.readInt32()\n  const results = decoder.readArray(decodeGroup)\n\n  for (const result of results) {\n    if (failure(result.errorCode)) {\n      result.error = createErrorFromCode(result.errorCode)\n    }\n  }\n  return {\n    throttleTimeMs,\n    results,\n  }\n}\n\nconst parse = async data => {\n  return data\n}\n\nmodule.exports = {\n  decode,\n  parse,\n}\n"],"mappings":";AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAC3C,MAAM;EAAEC,OAAO;EAAEC;AAAoB,CAAC,GAAGF,OAAO,CAAC,gBAAgB,CAAC;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMG,WAAW,GAAGC,OAAO,KAAK;EAC9BC,OAAO,EAAED,OAAO,CAACE,UAAU,EAAE;EAC7BC,SAAS,EAAEH,OAAO,CAACI,SAAS;AAC9B,CAAC,CAAC;AAEF,MAAMC,MAAM;EAAA,6BAAG,WAAMC,OAAO,EAAI;IAC9B,MAAMN,OAAO,GAAG,IAAIL,OAAO,CAACW,OAAO,CAAC;IACpC,MAAMC,cAAc,GAAGP,OAAO,CAACQ,SAAS,EAAE;IAC1C,MAAMC,OAAO,GAAGT,OAAO,CAACU,SAAS,CAACX,WAAW,CAAC;IAE9C,KAAK,MAAMY,MAAM,IAAIF,OAAO,EAAE;MAC5B,IAAIZ,OAAO,CAACc,MAAM,CAACR,SAAS,CAAC,EAAE;QAC7BQ,MAAM,CAACC,KAAK,GAAGd,mBAAmB,CAACa,MAAM,CAACR,SAAS,CAAC;MACtD;IACF;IACA,OAAO;MACLI,cAAc;MACdE;IACF,CAAC;EACH,CAAC;EAAA,gBAdKJ,MAAM;IAAA;EAAA;AAAA,GAcX;AAED,MAAMQ,KAAK;EAAA,8BAAG,WAAMC,IAAI,EAAI;IAC1B,OAAOA,IAAI;EACb,CAAC;EAAA,gBAFKD,KAAK;IAAA;EAAA;AAAA,GAEV;AAEDE,MAAM,CAACC,OAAO,GAAG;EACfX,MAAM;EACNQ;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}