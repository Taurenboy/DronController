{"ast":null,"code":"/* eslint-disable */\n\n// Based on the kafka client 0.10.2 murmur2 implementation\n// https://github.com/apache/kafka/blob/0.10.2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java#L364\n\nconst SEED = 0x9747b28c;\n\n// 'm' and 'r' are mixing constants generated offline.\n// They're not really 'magic', they just happen to work well.\nconst M = 0x5bd1e995;\nconst R = 24;\nmodule.exports = key => {\n  const data = Buffer.isBuffer(key) ? key : Buffer.from(String(key));\n  const length = data.length;\n\n  // Initialize the hash to a random value\n  let h = SEED ^ length;\n  let length4 = length / 4;\n  for (let i = 0; i < length4; i++) {\n    const i4 = i * 4;\n    let k = (data[i4 + 0] & 0xff) + ((data[i4 + 1] & 0xff) << 8) + ((data[i4 + 2] & 0xff) << 16) + ((data[i4 + 3] & 0xff) << 24);\n    k *= M;\n    k ^= k >>> R;\n    k *= M;\n    h *= M;\n    h ^= k;\n  }\n\n  // Handle the last few bytes of the input array\n  switch (length % 4) {\n    case 3:\n      h ^= (data[(length & ~3) + 2] & 0xff) << 16;\n    case 2:\n      h ^= (data[(length & ~3) + 1] & 0xff) << 8;\n    case 1:\n      h ^= data[length & ~3] & 0xff;\n      h *= M;\n  }\n  h ^= h >>> 13;\n  h *= M;\n  h ^= h >>> 15;\n  return h;\n};","map":{"version":3,"names":["SEED","M","R","module","exports","key","data","Buffer","isBuffer","from","String","length","h","length4","i","i4","k"],"sources":["C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/kafkajs/src/producer/partitioners/legacy/murmur2.js"],"sourcesContent":["/* eslint-disable */\n\n// Based on the kafka client 0.10.2 murmur2 implementation\n// https://github.com/apache/kafka/blob/0.10.2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java#L364\n\nconst SEED = 0x9747b28c\n\n// 'm' and 'r' are mixing constants generated offline.\n// They're not really 'magic', they just happen to work well.\nconst M = 0x5bd1e995\nconst R = 24\n\nmodule.exports = key => {\n  const data = Buffer.isBuffer(key) ? key : Buffer.from(String(key))\n  const length = data.length\n\n  // Initialize the hash to a random value\n  let h = SEED ^ length\n  let length4 = length / 4\n\n  for (let i = 0; i < length4; i++) {\n    const i4 = i * 4\n    let k =\n      (data[i4 + 0] & 0xff) +\n      ((data[i4 + 1] & 0xff) << 8) +\n      ((data[i4 + 2] & 0xff) << 16) +\n      ((data[i4 + 3] & 0xff) << 24)\n    k *= M\n    k ^= k >>> R\n    k *= M\n    h *= M\n    h ^= k\n  }\n\n  // Handle the last few bytes of the input array\n  switch (length % 4) {\n    case 3:\n      h ^= (data[(length & ~3) + 2] & 0xff) << 16\n    case 2:\n      h ^= (data[(length & ~3) + 1] & 0xff) << 8\n    case 1:\n      h ^= data[length & ~3] & 0xff\n      h *= M\n  }\n\n  h ^= h >>> 13\n  h *= M\n  h ^= h >>> 15\n\n  return h\n}\n"],"mappings":"AAAA;;AAEA;AACA;;AAEA,MAAMA,IAAI,GAAG,UAAU;;AAEvB;AACA;AACA,MAAMC,CAAC,GAAG,UAAU;AACpB,MAAMC,CAAC,GAAG,EAAE;AAEZC,MAAM,CAACC,OAAO,GAAGC,GAAG,IAAI;EACtB,MAAMC,IAAI,GAAGC,MAAM,CAACC,QAAQ,CAACH,GAAG,CAAC,GAAGA,GAAG,GAAGE,MAAM,CAACE,IAAI,CAACC,MAAM,CAACL,GAAG,CAAC,CAAC;EAClE,MAAMM,MAAM,GAAGL,IAAI,CAACK,MAAM;;EAE1B;EACA,IAAIC,CAAC,GAAGZ,IAAI,GAAGW,MAAM;EACrB,IAAIE,OAAO,GAAGF,MAAM,GAAG,CAAC;EAExB,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,OAAO,EAAEC,CAAC,EAAE,EAAE;IAChC,MAAMC,EAAE,GAAGD,CAAC,GAAG,CAAC;IAChB,IAAIE,CAAC,GACH,CAACV,IAAI,CAACS,EAAE,GAAG,CAAC,CAAC,GAAG,IAAI,KACnB,CAACT,IAAI,CAACS,EAAE,GAAG,CAAC,CAAC,GAAG,IAAI,KAAK,CAAC,CAAC,IAC3B,CAACT,IAAI,CAACS,EAAE,GAAG,CAAC,CAAC,GAAG,IAAI,KAAK,EAAE,CAAC,IAC5B,CAACT,IAAI,CAACS,EAAE,GAAG,CAAC,CAAC,GAAG,IAAI,KAAK,EAAE,CAAC;IAC/BC,CAAC,IAAIf,CAAC;IACNe,CAAC,IAAIA,CAAC,KAAKd,CAAC;IACZc,CAAC,IAAIf,CAAC;IACNW,CAAC,IAAIX,CAAC;IACNW,CAAC,IAAII,CAAC;EACR;;EAEA;EACA,QAAQL,MAAM,GAAG,CAAC;IAChB,KAAK,CAAC;MACJC,CAAC,IAAI,CAACN,IAAI,CAAC,CAACK,MAAM,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,KAAK,EAAE;IAC7C,KAAK,CAAC;MACJC,CAAC,IAAI,CAACN,IAAI,CAAC,CAACK,MAAM,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,KAAK,CAAC;IAC5C,KAAK,CAAC;MACJC,CAAC,IAAIN,IAAI,CAACK,MAAM,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI;MAC7BC,CAAC,IAAIX,CAAC;EAAA;EAGVW,CAAC,IAAIA,CAAC,KAAK,EAAE;EACbA,CAAC,IAAIX,CAAC;EACNW,CAAC,IAAIA,CAAC,KAAK,EAAE;EAEb,OAAOA,CAAC;AACV,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}