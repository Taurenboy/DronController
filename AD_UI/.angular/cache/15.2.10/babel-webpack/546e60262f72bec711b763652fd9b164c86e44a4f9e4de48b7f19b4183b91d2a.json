{"ast":null,"code":"const apiKeys = require('./apiKeys');\nconst {\n  KafkaJSServerDoesNotSupportApiKey,\n  KafkaJSNotImplemented\n} = require('../../errors');\n\n/**\n * @typedef {(options?: Object) => { request: any, response: any, logResponseErrors?: boolean }} Request\n */\n\n/**\n * @typedef {Object} RequestDefinitions\n * @property {string[]} versions\n * @property {({ version: number }) => Request} protocol\n */\n\n/**\n * @typedef {(apiKey: number, definitions: RequestDefinitions) => Request} Lookup\n */\n\n/** @type {RequestDefinitions} */\nconst noImplementedRequestDefinitions = {\n  versions: [],\n  protocol: () => {\n    throw new KafkaJSNotImplemented();\n  }\n};\n\n/**\n * @type {{[apiName: string]: RequestDefinitions}}\n */\nconst requests = {\n  Produce: require('./produce'),\n  Fetch: require('./fetch'),\n  ListOffsets: require('./listOffsets'),\n  Metadata: require('./metadata'),\n  LeaderAndIsr: noImplementedRequestDefinitions,\n  StopReplica: noImplementedRequestDefinitions,\n  UpdateMetadata: noImplementedRequestDefinitions,\n  ControlledShutdown: noImplementedRequestDefinitions,\n  OffsetCommit: require('./offsetCommit'),\n  OffsetFetch: require('./offsetFetch'),\n  GroupCoordinator: require('./findCoordinator'),\n  JoinGroup: require('./joinGroup'),\n  Heartbeat: require('./heartbeat'),\n  LeaveGroup: require('./leaveGroup'),\n  SyncGroup: require('./syncGroup'),\n  DescribeGroups: require('./describeGroups'),\n  ListGroups: require('./listGroups'),\n  SaslHandshake: require('./saslHandshake'),\n  ApiVersions: require('./apiVersions'),\n  CreateTopics: require('./createTopics'),\n  DeleteTopics: require('./deleteTopics'),\n  DeleteRecords: require('./deleteRecords'),\n  InitProducerId: require('./initProducerId'),\n  OffsetForLeaderEpoch: noImplementedRequestDefinitions,\n  AddPartitionsToTxn: require('./addPartitionsToTxn'),\n  AddOffsetsToTxn: require('./addOffsetsToTxn'),\n  EndTxn: require('./endTxn'),\n  WriteTxnMarkers: noImplementedRequestDefinitions,\n  TxnOffsetCommit: require('./txnOffsetCommit'),\n  DescribeAcls: require('./describeAcls'),\n  CreateAcls: require('./createAcls'),\n  DeleteAcls: require('./deleteAcls'),\n  DescribeConfigs: require('./describeConfigs'),\n  AlterConfigs: require('./alterConfigs'),\n  AlterReplicaLogDirs: noImplementedRequestDefinitions,\n  DescribeLogDirs: noImplementedRequestDefinitions,\n  SaslAuthenticate: require('./saslAuthenticate'),\n  CreatePartitions: require('./createPartitions'),\n  CreateDelegationToken: noImplementedRequestDefinitions,\n  RenewDelegationToken: noImplementedRequestDefinitions,\n  ExpireDelegationToken: noImplementedRequestDefinitions,\n  DescribeDelegationToken: noImplementedRequestDefinitions,\n  DeleteGroups: require('./deleteGroups'),\n  ElectLeaders: noImplementedRequestDefinitions,\n  IncrementalAlterConfigs: noImplementedRequestDefinitions,\n  AlterPartitionReassignments: require('./alterPartitionReassignments'),\n  ListPartitionReassignments: require('./listPartitionReassignments')\n};\nconst names = Object.keys(apiKeys);\nconst keys = Object.values(apiKeys);\nconst findApiName = apiKey => names[keys.indexOf(apiKey)];\n\n/**\n * @param {import(\"../../../types\").ApiVersions} versions\n * @returns {Lookup}\n */\nconst lookup = versions => (apiKey, definition) => {\n  const version = versions[apiKey];\n  const availableVersions = definition.versions.map(Number);\n  const bestImplementedVersion = Math.max(...availableVersions);\n  if (!version || version.maxVersion == null) {\n    throw new KafkaJSServerDoesNotSupportApiKey(`The Kafka server does not support the requested API version`, {\n      apiKey,\n      apiName: findApiName(apiKey)\n    });\n  }\n  const bestSupportedVersion = Math.min(bestImplementedVersion, version.maxVersion);\n  return definition.protocol({\n    version: bestSupportedVersion\n  });\n};\nmodule.exports = {\n  requests,\n  lookup\n};","map":{"version":3,"names":["apiKeys","require","KafkaJSServerDoesNotSupportApiKey","KafkaJSNotImplemented","noImplementedRequestDefinitions","versions","protocol","requests","Produce","Fetch","ListOffsets","Metadata","LeaderAndIsr","StopReplica","UpdateMetadata","ControlledShutdown","OffsetCommit","OffsetFetch","GroupCoordinator","JoinGroup","Heartbeat","LeaveGroup","SyncGroup","DescribeGroups","ListGroups","SaslHandshake","ApiVersions","CreateTopics","DeleteTopics","DeleteRecords","InitProducerId","OffsetForLeaderEpoch","AddPartitionsToTxn","AddOffsetsToTxn","EndTxn","WriteTxnMarkers","TxnOffsetCommit","DescribeAcls","CreateAcls","DeleteAcls","DescribeConfigs","AlterConfigs","AlterReplicaLogDirs","DescribeLogDirs","SaslAuthenticate","CreatePartitions","CreateDelegationToken","RenewDelegationToken","ExpireDelegationToken","DescribeDelegationToken","DeleteGroups","ElectLeaders","IncrementalAlterConfigs","AlterPartitionReassignments","ListPartitionReassignments","names","Object","keys","values","findApiName","apiKey","indexOf","lookup","definition","version","availableVersions","map","Number","bestImplementedVersion","Math","max","maxVersion","apiName","bestSupportedVersion","min","module","exports"],"sources":["C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/kafkajs/src/protocol/requests/index.js"],"sourcesContent":["const apiKeys = require('./apiKeys')\nconst { KafkaJSServerDoesNotSupportApiKey, KafkaJSNotImplemented } = require('../../errors')\n\n/**\n * @typedef {(options?: Object) => { request: any, response: any, logResponseErrors?: boolean }} Request\n */\n\n/**\n * @typedef {Object} RequestDefinitions\n * @property {string[]} versions\n * @property {({ version: number }) => Request} protocol\n */\n\n/**\n * @typedef {(apiKey: number, definitions: RequestDefinitions) => Request} Lookup\n */\n\n/** @type {RequestDefinitions} */\nconst noImplementedRequestDefinitions = {\n  versions: [],\n  protocol: () => {\n    throw new KafkaJSNotImplemented()\n  },\n}\n\n/**\n * @type {{[apiName: string]: RequestDefinitions}}\n */\nconst requests = {\n  Produce: require('./produce'),\n  Fetch: require('./fetch'),\n  ListOffsets: require('./listOffsets'),\n  Metadata: require('./metadata'),\n  LeaderAndIsr: noImplementedRequestDefinitions,\n  StopReplica: noImplementedRequestDefinitions,\n  UpdateMetadata: noImplementedRequestDefinitions,\n  ControlledShutdown: noImplementedRequestDefinitions,\n  OffsetCommit: require('./offsetCommit'),\n  OffsetFetch: require('./offsetFetch'),\n  GroupCoordinator: require('./findCoordinator'),\n  JoinGroup: require('./joinGroup'),\n  Heartbeat: require('./heartbeat'),\n  LeaveGroup: require('./leaveGroup'),\n  SyncGroup: require('./syncGroup'),\n  DescribeGroups: require('./describeGroups'),\n  ListGroups: require('./listGroups'),\n  SaslHandshake: require('./saslHandshake'),\n  ApiVersions: require('./apiVersions'),\n  CreateTopics: require('./createTopics'),\n  DeleteTopics: require('./deleteTopics'),\n  DeleteRecords: require('./deleteRecords'),\n  InitProducerId: require('./initProducerId'),\n  OffsetForLeaderEpoch: noImplementedRequestDefinitions,\n  AddPartitionsToTxn: require('./addPartitionsToTxn'),\n  AddOffsetsToTxn: require('./addOffsetsToTxn'),\n  EndTxn: require('./endTxn'),\n  WriteTxnMarkers: noImplementedRequestDefinitions,\n  TxnOffsetCommit: require('./txnOffsetCommit'),\n  DescribeAcls: require('./describeAcls'),\n  CreateAcls: require('./createAcls'),\n  DeleteAcls: require('./deleteAcls'),\n  DescribeConfigs: require('./describeConfigs'),\n  AlterConfigs: require('./alterConfigs'),\n  AlterReplicaLogDirs: noImplementedRequestDefinitions,\n  DescribeLogDirs: noImplementedRequestDefinitions,\n  SaslAuthenticate: require('./saslAuthenticate'),\n  CreatePartitions: require('./createPartitions'),\n  CreateDelegationToken: noImplementedRequestDefinitions,\n  RenewDelegationToken: noImplementedRequestDefinitions,\n  ExpireDelegationToken: noImplementedRequestDefinitions,\n  DescribeDelegationToken: noImplementedRequestDefinitions,\n  DeleteGroups: require('./deleteGroups'),\n  ElectLeaders: noImplementedRequestDefinitions,\n  IncrementalAlterConfigs: noImplementedRequestDefinitions,\n  AlterPartitionReassignments: require('./alterPartitionReassignments'),\n  ListPartitionReassignments: require('./listPartitionReassignments'),\n}\n\nconst names = Object.keys(apiKeys)\nconst keys = Object.values(apiKeys)\nconst findApiName = apiKey => names[keys.indexOf(apiKey)]\n\n/**\n * @param {import(\"../../../types\").ApiVersions} versions\n * @returns {Lookup}\n */\nconst lookup = versions => (apiKey, definition) => {\n  const version = versions[apiKey]\n  const availableVersions = definition.versions.map(Number)\n  const bestImplementedVersion = Math.max(...availableVersions)\n\n  if (!version || version.maxVersion == null) {\n    throw new KafkaJSServerDoesNotSupportApiKey(\n      `The Kafka server does not support the requested API version`,\n      { apiKey, apiName: findApiName(apiKey) }\n    )\n  }\n\n  const bestSupportedVersion = Math.min(bestImplementedVersion, version.maxVersion)\n  return definition.protocol({ version: bestSupportedVersion })\n}\n\nmodule.exports = {\n  requests,\n  lookup,\n}\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,WAAW,CAAC;AACpC,MAAM;EAAEC,iCAAiC;EAAEC;AAAsB,CAAC,GAAGF,OAAO,CAAC,cAAc,CAAC;;AAE5F;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,MAAMG,+BAA+B,GAAG;EACtCC,QAAQ,EAAE,EAAE;EACZC,QAAQ,EAAE,MAAM;IACd,MAAM,IAAIH,qBAAqB,EAAE;EACnC;AACF,CAAC;;AAED;AACA;AACA;AACA,MAAMI,QAAQ,GAAG;EACfC,OAAO,EAAEP,OAAO,CAAC,WAAW,CAAC;EAC7BQ,KAAK,EAAER,OAAO,CAAC,SAAS,CAAC;EACzBS,WAAW,EAAET,OAAO,CAAC,eAAe,CAAC;EACrCU,QAAQ,EAAEV,OAAO,CAAC,YAAY,CAAC;EAC/BW,YAAY,EAAER,+BAA+B;EAC7CS,WAAW,EAAET,+BAA+B;EAC5CU,cAAc,EAAEV,+BAA+B;EAC/CW,kBAAkB,EAAEX,+BAA+B;EACnDY,YAAY,EAAEf,OAAO,CAAC,gBAAgB,CAAC;EACvCgB,WAAW,EAAEhB,OAAO,CAAC,eAAe,CAAC;EACrCiB,gBAAgB,EAAEjB,OAAO,CAAC,mBAAmB,CAAC;EAC9CkB,SAAS,EAAElB,OAAO,CAAC,aAAa,CAAC;EACjCmB,SAAS,EAAEnB,OAAO,CAAC,aAAa,CAAC;EACjCoB,UAAU,EAAEpB,OAAO,CAAC,cAAc,CAAC;EACnCqB,SAAS,EAAErB,OAAO,CAAC,aAAa,CAAC;EACjCsB,cAAc,EAAEtB,OAAO,CAAC,kBAAkB,CAAC;EAC3CuB,UAAU,EAAEvB,OAAO,CAAC,cAAc,CAAC;EACnCwB,aAAa,EAAExB,OAAO,CAAC,iBAAiB,CAAC;EACzCyB,WAAW,EAAEzB,OAAO,CAAC,eAAe,CAAC;EACrC0B,YAAY,EAAE1B,OAAO,CAAC,gBAAgB,CAAC;EACvC2B,YAAY,EAAE3B,OAAO,CAAC,gBAAgB,CAAC;EACvC4B,aAAa,EAAE5B,OAAO,CAAC,iBAAiB,CAAC;EACzC6B,cAAc,EAAE7B,OAAO,CAAC,kBAAkB,CAAC;EAC3C8B,oBAAoB,EAAE3B,+BAA+B;EACrD4B,kBAAkB,EAAE/B,OAAO,CAAC,sBAAsB,CAAC;EACnDgC,eAAe,EAAEhC,OAAO,CAAC,mBAAmB,CAAC;EAC7CiC,MAAM,EAAEjC,OAAO,CAAC,UAAU,CAAC;EAC3BkC,eAAe,EAAE/B,+BAA+B;EAChDgC,eAAe,EAAEnC,OAAO,CAAC,mBAAmB,CAAC;EAC7CoC,YAAY,EAAEpC,OAAO,CAAC,gBAAgB,CAAC;EACvCqC,UAAU,EAAErC,OAAO,CAAC,cAAc,CAAC;EACnCsC,UAAU,EAAEtC,OAAO,CAAC,cAAc,CAAC;EACnCuC,eAAe,EAAEvC,OAAO,CAAC,mBAAmB,CAAC;EAC7CwC,YAAY,EAAExC,OAAO,CAAC,gBAAgB,CAAC;EACvCyC,mBAAmB,EAAEtC,+BAA+B;EACpDuC,eAAe,EAAEvC,+BAA+B;EAChDwC,gBAAgB,EAAE3C,OAAO,CAAC,oBAAoB,CAAC;EAC/C4C,gBAAgB,EAAE5C,OAAO,CAAC,oBAAoB,CAAC;EAC/C6C,qBAAqB,EAAE1C,+BAA+B;EACtD2C,oBAAoB,EAAE3C,+BAA+B;EACrD4C,qBAAqB,EAAE5C,+BAA+B;EACtD6C,uBAAuB,EAAE7C,+BAA+B;EACxD8C,YAAY,EAAEjD,OAAO,CAAC,gBAAgB,CAAC;EACvCkD,YAAY,EAAE/C,+BAA+B;EAC7CgD,uBAAuB,EAAEhD,+BAA+B;EACxDiD,2BAA2B,EAAEpD,OAAO,CAAC,+BAA+B,CAAC;EACrEqD,0BAA0B,EAAErD,OAAO,CAAC,8BAA8B;AACpE,CAAC;AAED,MAAMsD,KAAK,GAAGC,MAAM,CAACC,IAAI,CAACzD,OAAO,CAAC;AAClC,MAAMyD,IAAI,GAAGD,MAAM,CAACE,MAAM,CAAC1D,OAAO,CAAC;AACnC,MAAM2D,WAAW,GAAGC,MAAM,IAAIL,KAAK,CAACE,IAAI,CAACI,OAAO,CAACD,MAAM,CAAC,CAAC;;AAEzD;AACA;AACA;AACA;AACA,MAAME,MAAM,GAAGzD,QAAQ,IAAI,CAACuD,MAAM,EAAEG,UAAU,KAAK;EACjD,MAAMC,OAAO,GAAG3D,QAAQ,CAACuD,MAAM,CAAC;EAChC,MAAMK,iBAAiB,GAAGF,UAAU,CAAC1D,QAAQ,CAAC6D,GAAG,CAACC,MAAM,CAAC;EACzD,MAAMC,sBAAsB,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAGL,iBAAiB,CAAC;EAE7D,IAAI,CAACD,OAAO,IAAIA,OAAO,CAACO,UAAU,IAAI,IAAI,EAAE;IAC1C,MAAM,IAAIrE,iCAAiC,CACxC,6DAA4D,EAC7D;MAAE0D,MAAM;MAAEY,OAAO,EAAEb,WAAW,CAACC,MAAM;IAAE,CAAC,CACzC;EACH;EAEA,MAAMa,oBAAoB,GAAGJ,IAAI,CAACK,GAAG,CAACN,sBAAsB,EAAEJ,OAAO,CAACO,UAAU,CAAC;EACjF,OAAOR,UAAU,CAACzD,QAAQ,CAAC;IAAE0D,OAAO,EAAES;EAAqB,CAAC,CAAC;AAC/D,CAAC;AAEDE,MAAM,CAACC,OAAO,GAAG;EACfrE,QAAQ;EACRuD;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}