{"ast":null,"code":"var _asyncToGenerator = require(\"C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nconst Decoder = require('../../../decoder');\nconst {\n  failure,\n  createErrorFromCode\n} = require('../../../error');\n\n/**\n * DescribeGroups Response (Version: 0) => [groups]\n *   groups => error_code group_id state protocol_type protocol [members]\n *     error_code => INT16\n *     group_id => STRING\n *     state => STRING\n *     protocol_type => STRING\n *     protocol => STRING\n *     members => member_id client_id client_host member_metadata member_assignment\n *       member_id => STRING\n *       client_id => STRING\n *       client_host => STRING\n *       member_metadata => BYTES\n *       member_assignment => BYTES\n */\n\nconst decoderMember = decoder => ({\n  memberId: decoder.readString(),\n  clientId: decoder.readString(),\n  clientHost: decoder.readString(),\n  memberMetadata: decoder.readBytes(),\n  memberAssignment: decoder.readBytes()\n});\nconst decodeGroup = decoder => ({\n  errorCode: decoder.readInt16(),\n  groupId: decoder.readString(),\n  state: decoder.readString(),\n  protocolType: decoder.readString(),\n  protocol: decoder.readString(),\n  members: decoder.readArray(decoderMember)\n});\nconst decode = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (rawData) {\n    const decoder = new Decoder(rawData);\n    const groups = decoder.readArray(decodeGroup);\n    return {\n      groups\n    };\n  });\n  return function decode(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nconst parse = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(function* (data) {\n    const groupsWithError = data.groups.filter(({\n      errorCode\n    }) => failure(errorCode));\n    if (groupsWithError.length > 0) {\n      throw createErrorFromCode(groupsWithError[0].errorCode);\n    }\n    return data;\n  });\n  return function parse(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nmodule.exports = {\n  decode,\n  parse\n};","map":{"version":3,"names":["Decoder","require","failure","createErrorFromCode","decoderMember","decoder","memberId","readString","clientId","clientHost","memberMetadata","readBytes","memberAssignment","decodeGroup","errorCode","readInt16","groupId","state","protocolType","protocol","members","readArray","decode","rawData","groups","parse","data","groupsWithError","filter","length","module","exports"],"sources":["C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/kafkajs/src/protocol/requests/describeGroups/v0/response.js"],"sourcesContent":["const Decoder = require('../../../decoder')\nconst { failure, createErrorFromCode } = require('../../../error')\n\n/**\n * DescribeGroups Response (Version: 0) => [groups]\n *   groups => error_code group_id state protocol_type protocol [members]\n *     error_code => INT16\n *     group_id => STRING\n *     state => STRING\n *     protocol_type => STRING\n *     protocol => STRING\n *     members => member_id client_id client_host member_metadata member_assignment\n *       member_id => STRING\n *       client_id => STRING\n *       client_host => STRING\n *       member_metadata => BYTES\n *       member_assignment => BYTES\n */\n\nconst decoderMember = decoder => ({\n  memberId: decoder.readString(),\n  clientId: decoder.readString(),\n  clientHost: decoder.readString(),\n  memberMetadata: decoder.readBytes(),\n  memberAssignment: decoder.readBytes(),\n})\n\nconst decodeGroup = decoder => ({\n  errorCode: decoder.readInt16(),\n  groupId: decoder.readString(),\n  state: decoder.readString(),\n  protocolType: decoder.readString(),\n  protocol: decoder.readString(),\n  members: decoder.readArray(decoderMember),\n})\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData)\n  const groups = decoder.readArray(decodeGroup)\n\n  return {\n    groups,\n  }\n}\n\nconst parse = async data => {\n  const groupsWithError = data.groups.filter(({ errorCode }) => failure(errorCode))\n  if (groupsWithError.length > 0) {\n    throw createErrorFromCode(groupsWithError[0].errorCode)\n  }\n\n  return data\n}\n\nmodule.exports = {\n  decode,\n  parse,\n}\n"],"mappings":";AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAC3C,MAAM;EAAEC,OAAO;EAAEC;AAAoB,CAAC,GAAGF,OAAO,CAAC,gBAAgB,CAAC;;AAElE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMG,aAAa,GAAGC,OAAO,KAAK;EAChCC,QAAQ,EAAED,OAAO,CAACE,UAAU,EAAE;EAC9BC,QAAQ,EAAEH,OAAO,CAACE,UAAU,EAAE;EAC9BE,UAAU,EAAEJ,OAAO,CAACE,UAAU,EAAE;EAChCG,cAAc,EAAEL,OAAO,CAACM,SAAS,EAAE;EACnCC,gBAAgB,EAAEP,OAAO,CAACM,SAAS;AACrC,CAAC,CAAC;AAEF,MAAME,WAAW,GAAGR,OAAO,KAAK;EAC9BS,SAAS,EAAET,OAAO,CAACU,SAAS,EAAE;EAC9BC,OAAO,EAAEX,OAAO,CAACE,UAAU,EAAE;EAC7BU,KAAK,EAAEZ,OAAO,CAACE,UAAU,EAAE;EAC3BW,YAAY,EAAEb,OAAO,CAACE,UAAU,EAAE;EAClCY,QAAQ,EAAEd,OAAO,CAACE,UAAU,EAAE;EAC9Ba,OAAO,EAAEf,OAAO,CAACgB,SAAS,CAACjB,aAAa;AAC1C,CAAC,CAAC;AAEF,MAAMkB,MAAM;EAAA,6BAAG,WAAMC,OAAO,EAAI;IAC9B,MAAMlB,OAAO,GAAG,IAAIL,OAAO,CAACuB,OAAO,CAAC;IACpC,MAAMC,MAAM,GAAGnB,OAAO,CAACgB,SAAS,CAACR,WAAW,CAAC;IAE7C,OAAO;MACLW;IACF,CAAC;EACH,CAAC;EAAA,gBAPKF,MAAM;IAAA;EAAA;AAAA,GAOX;AAED,MAAMG,KAAK;EAAA,8BAAG,WAAMC,IAAI,EAAI;IAC1B,MAAMC,eAAe,GAAGD,IAAI,CAACF,MAAM,CAACI,MAAM,CAAC,CAAC;MAAEd;IAAU,CAAC,KAAKZ,OAAO,CAACY,SAAS,CAAC,CAAC;IACjF,IAAIa,eAAe,CAACE,MAAM,GAAG,CAAC,EAAE;MAC9B,MAAM1B,mBAAmB,CAACwB,eAAe,CAAC,CAAC,CAAC,CAACb,SAAS,CAAC;IACzD;IAEA,OAAOY,IAAI;EACb,CAAC;EAAA,gBAPKD,KAAK;IAAA;EAAA;AAAA,GAOV;AAEDK,MAAM,CAACC,OAAO,GAAG;EACfT,MAAM;EACNG;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}