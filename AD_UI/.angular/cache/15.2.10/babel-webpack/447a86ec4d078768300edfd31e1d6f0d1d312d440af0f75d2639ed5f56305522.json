{"ast":null,"code":"var _asyncToGenerator = require(\"C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n/**\n * @typedef {(batch: T, metadata: { workerId: number }) => Promise<void>} Handler\n * @template T\n *\n * @typedef {ReturnType<typeof createWorker>} Worker\n */\n\nconst sharedPromiseTo = require('../utils/sharedPromiseTo');\n\n/**\n * @param {{ handler: Handler<T>, workerId: number }} options\n * @template T\n */\nconst createWorker = ({\n  handler,\n  workerId\n}) => {\n  /**\n   * Takes batches from next() until it returns undefined.\n   *\n   * @param {{ next: () => { batch: T, resolve: () => void, reject: (e: Error) => void } | undefined }} param0\n   * @returns {Promise<void>}\n   */\n  const run = sharedPromiseTo( /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* ({\n      next\n    }) {\n      while (true) {\n        const item = next();\n        if (!item) break;\n        const {\n          batch,\n          resolve,\n          reject\n        } = item;\n        try {\n          yield handler(batch, {\n            workerId\n          });\n          resolve();\n        } catch (error) {\n          reject(error);\n        }\n      }\n    });\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n  return {\n    run\n  };\n};\nmodule.exports = createWorker;","map":{"version":3,"names":["sharedPromiseTo","require","createWorker","handler","workerId","run","next","item","batch","resolve","reject","error","module","exports"],"sources":["C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/kafkajs/src/consumer/worker.js"],"sourcesContent":["/**\n * @typedef {(batch: T, metadata: { workerId: number }) => Promise<void>} Handler\n * @template T\n *\n * @typedef {ReturnType<typeof createWorker>} Worker\n */\n\nconst sharedPromiseTo = require('../utils/sharedPromiseTo')\n\n/**\n * @param {{ handler: Handler<T>, workerId: number }} options\n * @template T\n */\nconst createWorker = ({ handler, workerId }) => {\n  /**\n   * Takes batches from next() until it returns undefined.\n   *\n   * @param {{ next: () => { batch: T, resolve: () => void, reject: (e: Error) => void } | undefined }} param0\n   * @returns {Promise<void>}\n   */\n  const run = sharedPromiseTo(async ({ next }) => {\n    while (true) {\n      const item = next()\n      if (!item) break\n\n      const { batch, resolve, reject } = item\n\n      try {\n        await handler(batch, { workerId })\n        resolve()\n      } catch (error) {\n        reject(error)\n      }\n    }\n  })\n\n  return { run }\n}\n\nmodule.exports = createWorker\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,eAAe,GAAGC,OAAO,CAAC,0BAA0B,CAAC;;AAE3D;AACA;AACA;AACA;AACA,MAAMC,YAAY,GAAG,CAAC;EAAEC,OAAO;EAAEC;AAAS,CAAC,KAAK;EAC9C;AACF;AACA;AACA;AACA;AACA;EACE,MAAMC,GAAG,GAAGL,eAAe;IAAA,6BAAC,WAAO;MAAEM;IAAK,CAAC,EAAK;MAC9C,OAAO,IAAI,EAAE;QACX,MAAMC,IAAI,GAAGD,IAAI,EAAE;QACnB,IAAI,CAACC,IAAI,EAAE;QAEX,MAAM;UAAEC,KAAK;UAAEC,OAAO;UAAEC;QAAO,CAAC,GAAGH,IAAI;QAEvC,IAAI;UACF,MAAMJ,OAAO,CAACK,KAAK,EAAE;YAAEJ;UAAS,CAAC,CAAC;UAClCK,OAAO,EAAE;QACX,CAAC,CAAC,OAAOE,KAAK,EAAE;UACdD,MAAM,CAACC,KAAK,CAAC;QACf;MACF;IACF,CAAC;IAAA;MAAA;IAAA;EAAA,IAAC;EAEF,OAAO;IAAEN;EAAI,CAAC;AAChB,CAAC;AAEDO,MAAM,CAACC,OAAO,GAAGX,YAAY"},"metadata":{},"sourceType":"script","externalDependencies":[]}