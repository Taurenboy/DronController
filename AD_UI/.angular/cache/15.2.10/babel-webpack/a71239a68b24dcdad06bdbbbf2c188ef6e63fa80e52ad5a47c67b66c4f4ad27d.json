{"ast":null,"code":"var _asyncToGenerator = require(\"C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nconst {\n  request,\n  response\n} = require('../../protocol/sasl/plain');\nconst {\n  KafkaJSSASLAuthenticationError\n} = require('../../errors');\nconst plainAuthenticatorProvider = sasl => ({\n  host,\n  port,\n  logger,\n  saslAuthenticate\n}) => {\n  return {\n    authenticate: function () {\n      var _ref = _asyncToGenerator(function* () {\n        if (sasl.username == null || sasl.password == null) {\n          throw new KafkaJSSASLAuthenticationError('SASL Plain: Invalid username or password');\n        }\n        const broker = `${host}:${port}`;\n        try {\n          logger.debug('Authenticate with SASL PLAIN', {\n            broker\n          });\n          yield saslAuthenticate({\n            request: request(sasl),\n            response\n          });\n          logger.debug('SASL PLAIN authentication successful', {\n            broker\n          });\n        } catch (e) {\n          const error = new KafkaJSSASLAuthenticationError(`SASL PLAIN authentication failed: ${e.message}`);\n          logger.error(error.message, {\n            broker\n          });\n          throw error;\n        }\n      });\n      return function authenticate() {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  };\n};\nmodule.exports = plainAuthenticatorProvider;","map":{"version":3,"names":["request","response","require","KafkaJSSASLAuthenticationError","plainAuthenticatorProvider","sasl","host","port","logger","saslAuthenticate","authenticate","username","password","broker","debug","e","error","message","module","exports"],"sources":["C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/kafkajs/src/broker/saslAuthenticator/plain.js"],"sourcesContent":["const { request, response } = require('../../protocol/sasl/plain')\nconst { KafkaJSSASLAuthenticationError } = require('../../errors')\n\nconst plainAuthenticatorProvider = sasl => ({ host, port, logger, saslAuthenticate }) => {\n  return {\n    authenticate: async () => {\n      if (sasl.username == null || sasl.password == null) {\n        throw new KafkaJSSASLAuthenticationError('SASL Plain: Invalid username or password')\n      }\n\n      const broker = `${host}:${port}`\n\n      try {\n        logger.debug('Authenticate with SASL PLAIN', { broker })\n        await saslAuthenticate({ request: request(sasl), response })\n        logger.debug('SASL PLAIN authentication successful', { broker })\n      } catch (e) {\n        const error = new KafkaJSSASLAuthenticationError(\n          `SASL PLAIN authentication failed: ${e.message}`\n        )\n        logger.error(error.message, { broker })\n        throw error\n      }\n    },\n  }\n}\n\nmodule.exports = plainAuthenticatorProvider\n"],"mappings":";AAAA,MAAM;EAAEA,OAAO;EAAEC;AAAS,CAAC,GAAGC,OAAO,CAAC,2BAA2B,CAAC;AAClE,MAAM;EAAEC;AAA+B,CAAC,GAAGD,OAAO,CAAC,cAAc,CAAC;AAElE,MAAME,0BAA0B,GAAGC,IAAI,IAAI,CAAC;EAAEC,IAAI;EAAEC,IAAI;EAAEC,MAAM;EAAEC;AAAiB,CAAC,KAAK;EACvF,OAAO;IACLC,YAAY;MAAA,6BAAE,aAAY;QACxB,IAAIL,IAAI,CAACM,QAAQ,IAAI,IAAI,IAAIN,IAAI,CAACO,QAAQ,IAAI,IAAI,EAAE;UAClD,MAAM,IAAIT,8BAA8B,CAAC,0CAA0C,CAAC;QACtF;QAEA,MAAMU,MAAM,GAAI,GAAEP,IAAK,IAAGC,IAAK,EAAC;QAEhC,IAAI;UACFC,MAAM,CAACM,KAAK,CAAC,8BAA8B,EAAE;YAAED;UAAO,CAAC,CAAC;UACxD,MAAMJ,gBAAgB,CAAC;YAAET,OAAO,EAAEA,OAAO,CAACK,IAAI,CAAC;YAAEJ;UAAS,CAAC,CAAC;UAC5DO,MAAM,CAACM,KAAK,CAAC,sCAAsC,EAAE;YAAED;UAAO,CAAC,CAAC;QAClE,CAAC,CAAC,OAAOE,CAAC,EAAE;UACV,MAAMC,KAAK,GAAG,IAAIb,8BAA8B,CAC7C,qCAAoCY,CAAC,CAACE,OAAQ,EAAC,CACjD;UACDT,MAAM,CAACQ,KAAK,CAACA,KAAK,CAACC,OAAO,EAAE;YAAEJ;UAAO,CAAC,CAAC;UACvC,MAAMG,KAAK;QACb;MACF,CAAC;MAAA;QAAA;MAAA;IAAA;EACH,CAAC;AACH,CAAC;AAEDE,MAAM,CAACC,OAAO,GAAGf,0BAA0B"},"metadata":{},"sourceType":"script","externalDependencies":[]}