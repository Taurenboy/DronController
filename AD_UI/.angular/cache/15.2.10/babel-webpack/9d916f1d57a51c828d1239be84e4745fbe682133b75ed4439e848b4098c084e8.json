{"ast":null,"code":"var _asyncToGenerator = require(\"C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nconst Encoder = require('../../../encoder');\nconst {\n  CreateTopics: apiKey\n} = require('../../apiKeys');\n\n/**\n *CreateTopics Request (Version: 1) => [create_topic_requests] timeout validate_only\n *  create_topic_requests => topic num_partitions replication_factor [replica_assignment] [config_entries]\n *    topic => STRING\n *    num_partitions => INT32\n *    replication_factor => INT16\n *    replica_assignment => partition [replicas]\n *      partition => INT32\n *      replicas => INT32\n *    config_entries => config_name config_value\n *      config_name => STRING\n *      config_value => NULLABLE_STRING\n *  timeout => INT32\n *  validate_only => BOOLEAN\n */\n\nmodule.exports = ({\n  topics,\n  validateOnly = false,\n  timeout = 5000\n}) => ({\n  apiKey,\n  apiVersion: 1,\n  apiName: 'CreateTopics',\n  encode: function () {\n    var _ref = _asyncToGenerator(function* () {\n      return new Encoder().writeArray(topics.map(encodeTopics)).writeInt32(timeout).writeBoolean(validateOnly);\n    });\n    return function encode() {\n      return _ref.apply(this, arguments);\n    };\n  }()\n});\nconst encodeTopics = ({\n  topic,\n  numPartitions = -1,\n  replicationFactor = -1,\n  replicaAssignment = [],\n  configEntries = []\n}) => {\n  return new Encoder().writeString(topic).writeInt32(numPartitions).writeInt16(replicationFactor).writeArray(replicaAssignment.map(encodeReplicaAssignment)).writeArray(configEntries.map(encodeConfigEntries));\n};\nconst encodeReplicaAssignment = ({\n  partition,\n  replicas\n}) => {\n  return new Encoder().writeInt32(partition).writeArray(replicas);\n};\nconst encodeConfigEntries = ({\n  name,\n  value\n}) => {\n  return new Encoder().writeString(name).writeString(value);\n};","map":{"version":3,"names":["Encoder","require","CreateTopics","apiKey","module","exports","topics","validateOnly","timeout","apiVersion","apiName","encode","writeArray","map","encodeTopics","writeInt32","writeBoolean","topic","numPartitions","replicationFactor","replicaAssignment","configEntries","writeString","writeInt16","encodeReplicaAssignment","encodeConfigEntries","partition","replicas","name","value"],"sources":["C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/kafkajs/src/protocol/requests/createTopics/v1/request.js"],"sourcesContent":["const Encoder = require('../../../encoder')\nconst { CreateTopics: apiKey } = require('../../apiKeys')\n\n/**\n *CreateTopics Request (Version: 1) => [create_topic_requests] timeout validate_only\n *  create_topic_requests => topic num_partitions replication_factor [replica_assignment] [config_entries]\n *    topic => STRING\n *    num_partitions => INT32\n *    replication_factor => INT16\n *    replica_assignment => partition [replicas]\n *      partition => INT32\n *      replicas => INT32\n *    config_entries => config_name config_value\n *      config_name => STRING\n *      config_value => NULLABLE_STRING\n *  timeout => INT32\n *  validate_only => BOOLEAN\n */\n\nmodule.exports = ({ topics, validateOnly = false, timeout = 5000 }) => ({\n  apiKey,\n  apiVersion: 1,\n  apiName: 'CreateTopics',\n  encode: async () => {\n    return new Encoder()\n      .writeArray(topics.map(encodeTopics))\n      .writeInt32(timeout)\n      .writeBoolean(validateOnly)\n  },\n})\n\nconst encodeTopics = ({\n  topic,\n  numPartitions = -1,\n  replicationFactor = -1,\n  replicaAssignment = [],\n  configEntries = [],\n}) => {\n  return new Encoder()\n    .writeString(topic)\n    .writeInt32(numPartitions)\n    .writeInt16(replicationFactor)\n    .writeArray(replicaAssignment.map(encodeReplicaAssignment))\n    .writeArray(configEntries.map(encodeConfigEntries))\n}\n\nconst encodeReplicaAssignment = ({ partition, replicas }) => {\n  return new Encoder().writeInt32(partition).writeArray(replicas)\n}\n\nconst encodeConfigEntries = ({ name, value }) => {\n  return new Encoder().writeString(name).writeString(value)\n}\n"],"mappings":";AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAC3C,MAAM;EAAEC,YAAY,EAAEC;AAAO,CAAC,GAAGF,OAAO,CAAC,eAAe,CAAC;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAG,MAAM,CAACC,OAAO,GAAG,CAAC;EAAEC,MAAM;EAAEC,YAAY,GAAG,KAAK;EAAEC,OAAO,GAAG;AAAK,CAAC,MAAM;EACtEL,MAAM;EACNM,UAAU,EAAE,CAAC;EACbC,OAAO,EAAE,cAAc;EACvBC,MAAM;IAAA,6BAAE,aAAY;MAClB,OAAO,IAAIX,OAAO,EAAE,CACjBY,UAAU,CAACN,MAAM,CAACO,GAAG,CAACC,YAAY,CAAC,CAAC,CACpCC,UAAU,CAACP,OAAO,CAAC,CACnBQ,YAAY,CAACT,YAAY,CAAC;IAC/B,CAAC;IAAA;MAAA;IAAA;EAAA;AACH,CAAC,CAAC;AAEF,MAAMO,YAAY,GAAG,CAAC;EACpBG,KAAK;EACLC,aAAa,GAAG,CAAC,CAAC;EAClBC,iBAAiB,GAAG,CAAC,CAAC;EACtBC,iBAAiB,GAAG,EAAE;EACtBC,aAAa,GAAG;AAClB,CAAC,KAAK;EACJ,OAAO,IAAIrB,OAAO,EAAE,CACjBsB,WAAW,CAACL,KAAK,CAAC,CAClBF,UAAU,CAACG,aAAa,CAAC,CACzBK,UAAU,CAACJ,iBAAiB,CAAC,CAC7BP,UAAU,CAACQ,iBAAiB,CAACP,GAAG,CAACW,uBAAuB,CAAC,CAAC,CAC1DZ,UAAU,CAACS,aAAa,CAACR,GAAG,CAACY,mBAAmB,CAAC,CAAC;AACvD,CAAC;AAED,MAAMD,uBAAuB,GAAG,CAAC;EAAEE,SAAS;EAAEC;AAAS,CAAC,KAAK;EAC3D,OAAO,IAAI3B,OAAO,EAAE,CAACe,UAAU,CAACW,SAAS,CAAC,CAACd,UAAU,CAACe,QAAQ,CAAC;AACjE,CAAC;AAED,MAAMF,mBAAmB,GAAG,CAAC;EAAEG,IAAI;EAAEC;AAAM,CAAC,KAAK;EAC/C,OAAO,IAAI7B,OAAO,EAAE,CAACsB,WAAW,CAACM,IAAI,CAAC,CAACN,WAAW,CAACO,KAAK,CAAC;AAC3D,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}