{"ast":null,"code":"var _asyncToGenerator = require(\"C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nconst {\n  KafkaJSAggregateError,\n  KafkaJSAlterPartitionReassignmentsError\n} = require('../../../../errors');\nconst Decoder = require('../../../decoder');\nconst {\n  failure,\n  createErrorFromCode\n} = require('../../../error');\n\n/**\n * AlterPartitionReassignments Response (Version: 0) => throttle_time_ms error_code error_message [responses] TAG_BUFFER\n * throttle_time_ms => INT32\n * error_code => INT16\n * error_message => COMPACT_NULLABLE_STRING\n * responses => name [partitions] TAG_BUFFER\n *  name => COMPACT_STRING\n *  partitions => partition_index error_code error_message TAG_BUFFER\n *    partition_index => INT32\n *    error_code => INT16\n *    error_message => COMPACT_NULLABLE_STRING\n */\n\nconst decodeResponses = decoder => {\n  const response = {\n    topic: decoder.readUVarIntString(),\n    partitions: decoder.readUVarIntArray(decodePartitions)\n  };\n  decoder.readTaggedFields();\n  return response;\n};\nconst decodePartitions = decoder => {\n  const partition = {\n    partition: decoder.readInt32(),\n    errorCode: decoder.readInt16()\n  };\n  decoder.readUVarIntString();\n  decoder.readTaggedFields();\n  return partition;\n};\nconst decode = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (rawData) {\n    const decoder = new Decoder(rawData);\n    decoder.readTaggedFields();\n    const throttleTime = decoder.readInt32();\n    const errorCode = decoder.readInt16();\n    decoder.readUVarIntString();\n    return {\n      throttleTime,\n      errorCode,\n      responses: decoder.readUVarIntArray(decodeResponses)\n    };\n  });\n  return function decode(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nconst parse = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(function* (data) {\n    if (failure(data.errorCode)) {\n      throw new KafkaJSAlterPartitionReassignmentsError(createErrorFromCode(data.errorCode));\n    }\n    const topicPartitionsWithError = data.responses.flatMap(({\n      partitions,\n      topic\n    }) => partitions.filter(partition => failure(partition.errorCode)).map(partition => ({\n      ...partition,\n      topic\n    })));\n    if (topicPartitionsWithError.length > 0) {\n      throw new KafkaJSAggregateError('Errors altering partition reassignments', topicPartitionsWithError.map(({\n        topic,\n        partition,\n        errorCode\n      }) => new KafkaJSAlterPartitionReassignmentsError(createErrorFromCode(errorCode), topic, partition)));\n    }\n    return data;\n  });\n  return function parse(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nmodule.exports = {\n  decode,\n  parse\n};","map":{"version":3,"names":["KafkaJSAggregateError","KafkaJSAlterPartitionReassignmentsError","require","Decoder","failure","createErrorFromCode","decodeResponses","decoder","response","topic","readUVarIntString","partitions","readUVarIntArray","decodePartitions","readTaggedFields","partition","readInt32","errorCode","readInt16","decode","rawData","throttleTime","responses","parse","data","topicPartitionsWithError","flatMap","filter","map","length","module","exports"],"sources":["C:/Users/ingev/Documents/Desarrollo/Luna/DronController/AD_UI/node_modules/kafkajs/src/protocol/requests/alterPartitionReassignments/v0/response.js"],"sourcesContent":["const {\n  KafkaJSAggregateError,\n  KafkaJSAlterPartitionReassignmentsError,\n} = require('../../../../errors')\nconst Decoder = require('../../../decoder')\nconst { failure, createErrorFromCode } = require('../../../error')\n\n/**\n * AlterPartitionReassignments Response (Version: 0) => throttle_time_ms error_code error_message [responses] TAG_BUFFER\n * throttle_time_ms => INT32\n * error_code => INT16\n * error_message => COMPACT_NULLABLE_STRING\n * responses => name [partitions] TAG_BUFFER\n *  name => COMPACT_STRING\n *  partitions => partition_index error_code error_message TAG_BUFFER\n *    partition_index => INT32\n *    error_code => INT16\n *    error_message => COMPACT_NULLABLE_STRING\n */\n\nconst decodeResponses = decoder => {\n  const response = {\n    topic: decoder.readUVarIntString(),\n    partitions: decoder.readUVarIntArray(decodePartitions),\n  }\n\n  decoder.readTaggedFields()\n  return response\n}\n\nconst decodePartitions = decoder => {\n  const partition = {\n    partition: decoder.readInt32(),\n    errorCode: decoder.readInt16(),\n  }\n  decoder.readUVarIntString()\n  decoder.readTaggedFields()\n  return partition\n}\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData)\n  decoder.readTaggedFields()\n  const throttleTime = decoder.readInt32()\n  const errorCode = decoder.readInt16()\n  decoder.readUVarIntString()\n  return {\n    throttleTime,\n    errorCode,\n    responses: decoder.readUVarIntArray(decodeResponses),\n  }\n}\n\nconst parse = async data => {\n  if (failure(data.errorCode)) {\n    throw new KafkaJSAlterPartitionReassignmentsError(createErrorFromCode(data.errorCode))\n  }\n\n  const topicPartitionsWithError = data.responses.flatMap(({ partitions, topic }) =>\n    partitions\n      .filter(partition => failure(partition.errorCode))\n      .map(partition => ({\n        ...partition,\n        topic,\n      }))\n  )\n\n  if (topicPartitionsWithError.length > 0) {\n    throw new KafkaJSAggregateError(\n      'Errors altering partition reassignments',\n      topicPartitionsWithError.map(\n        ({ topic, partition, errorCode }) =>\n          new KafkaJSAlterPartitionReassignmentsError(\n            createErrorFromCode(errorCode),\n            topic,\n            partition\n          )\n      )\n    )\n  }\n\n  return data\n}\n\nmodule.exports = {\n  decode,\n  parse,\n}\n"],"mappings":";AAAA,MAAM;EACJA,qBAAqB;EACrBC;AACF,CAAC,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AACjC,MAAMC,OAAO,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AAC3C,MAAM;EAAEE,OAAO;EAAEC;AAAoB,CAAC,GAAGH,OAAO,CAAC,gBAAgB,CAAC;;AAElE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMI,eAAe,GAAGC,OAAO,IAAI;EACjC,MAAMC,QAAQ,GAAG;IACfC,KAAK,EAAEF,OAAO,CAACG,iBAAiB,EAAE;IAClCC,UAAU,EAAEJ,OAAO,CAACK,gBAAgB,CAACC,gBAAgB;EACvD,CAAC;EAEDN,OAAO,CAACO,gBAAgB,EAAE;EAC1B,OAAON,QAAQ;AACjB,CAAC;AAED,MAAMK,gBAAgB,GAAGN,OAAO,IAAI;EAClC,MAAMQ,SAAS,GAAG;IAChBA,SAAS,EAAER,OAAO,CAACS,SAAS,EAAE;IAC9BC,SAAS,EAAEV,OAAO,CAACW,SAAS;EAC9B,CAAC;EACDX,OAAO,CAACG,iBAAiB,EAAE;EAC3BH,OAAO,CAACO,gBAAgB,EAAE;EAC1B,OAAOC,SAAS;AAClB,CAAC;AAED,MAAMI,MAAM;EAAA,6BAAG,WAAMC,OAAO,EAAI;IAC9B,MAAMb,OAAO,GAAG,IAAIJ,OAAO,CAACiB,OAAO,CAAC;IACpCb,OAAO,CAACO,gBAAgB,EAAE;IAC1B,MAAMO,YAAY,GAAGd,OAAO,CAACS,SAAS,EAAE;IACxC,MAAMC,SAAS,GAAGV,OAAO,CAACW,SAAS,EAAE;IACrCX,OAAO,CAACG,iBAAiB,EAAE;IAC3B,OAAO;MACLW,YAAY;MACZJ,SAAS;MACTK,SAAS,EAAEf,OAAO,CAACK,gBAAgB,CAACN,eAAe;IACrD,CAAC;EACH,CAAC;EAAA,gBAXKa,MAAM;IAAA;EAAA;AAAA,GAWX;AAED,MAAMI,KAAK;EAAA,8BAAG,WAAMC,IAAI,EAAI;IAC1B,IAAIpB,OAAO,CAACoB,IAAI,CAACP,SAAS,CAAC,EAAE;MAC3B,MAAM,IAAIhB,uCAAuC,CAACI,mBAAmB,CAACmB,IAAI,CAACP,SAAS,CAAC,CAAC;IACxF;IAEA,MAAMQ,wBAAwB,GAAGD,IAAI,CAACF,SAAS,CAACI,OAAO,CAAC,CAAC;MAAEf,UAAU;MAAEF;IAAM,CAAC,KAC5EE,UAAU,CACPgB,MAAM,CAACZ,SAAS,IAAIX,OAAO,CAACW,SAAS,CAACE,SAAS,CAAC,CAAC,CACjDW,GAAG,CAACb,SAAS,KAAK;MACjB,GAAGA,SAAS;MACZN;IACF,CAAC,CAAC,CAAC,CACN;IAED,IAAIgB,wBAAwB,CAACI,MAAM,GAAG,CAAC,EAAE;MACvC,MAAM,IAAI7B,qBAAqB,CAC7B,yCAAyC,EACzCyB,wBAAwB,CAACG,GAAG,CAC1B,CAAC;QAAEnB,KAAK;QAAEM,SAAS;QAAEE;MAAU,CAAC,KAC9B,IAAIhB,uCAAuC,CACzCI,mBAAmB,CAACY,SAAS,CAAC,EAC9BR,KAAK,EACLM,SAAS,CACV,CACJ,CACF;IACH;IAEA,OAAOS,IAAI;EACb,CAAC;EAAA,gBA7BKD,KAAK;IAAA;EAAA;AAAA,GA6BV;AAEDO,MAAM,CAACC,OAAO,GAAG;EACfZ,MAAM;EACNI;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}